C  XDIFF.F - DIFFUSION EVALUATION FOR GIVEN DIFFUSION TENSOR (ASSUME 
C            ONLY MOLECULAR COMPONENT PRESENTLY).
C  COMPOSITIONAL IMPEC MODEL

C  ROUTINES IN THIS MODULE:
C  SUBROUTINE XGETDISP(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                      KEYOUT,NBLK,PV,KROCK,SAT,XVEL,XDMAT)
C  SUBROUTINE XDIFFX(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                    KEYOUT,NBLK,TCOF,PV,CR,SAT,PMDEN,MOLFRAC,XDMAT,
C                    TFLOW,DFLOW,RESID)
C  SUBROUTINE XDIFFY(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                    KEYOUT,NBLK,TCOF,PV,CR,SAT,PMDEN,MOLFRAC,XDMAT,
C                    TFLOW,DFLOW,RESID)
C  SUBROUTINE XDIFFZ(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                    KEYOUT,NBLK,TCOF,PV,CR,SAT,PMDEN,MOLFRAC,XDMAT,
C                    TFLOW,DFLOW,RESID)
C  CODE HISTORY:

C  SUNIL G. THOMAS  11/27/07   ALPHA VERSION (SEE Y.B. CHANG FOR REF.)
C  GURPREET SINGH   08/13/14   CORRECTED DIFFUSION

C***********************************************************************
      SUBROUTINE XGETDISP(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                    KEYOUT,NBLK,PV,KROCK,SAT,XVEL,XDMAT)
C***********************************************************************
      IMPLICIT NONE
      INCLUDE 'xmodel.h'
C***********************************************************************
C  THIS ROUTINE EVALUATES DIFFUSION-DISPERSION TENSOR.
C  INPUT:
C      POR =     PORE VOLUME (CU-FT, REAL*4)
C      ROCK =    ROCK TYPE (INTEGER)
C      SAT =     PHASE SATURATIONS (REAL*8)
C      XVEL =    PHASE DARCY VELOCITY (LB/SQ-FT-DAY, REAL*8)
C  OUTPUT:
C      DMAT =    DIFFUSION/DISPERSION TENSOR (REAL*8)
C-----------------------------------------------------------------------
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,JL1V(KDIM),JL2V(KDIM),
     &        KEYOUT(IDIM,JDIM,KDIM),KROCK(IDIM,JDIM,KDIM),NBLK
      INTEGER I,IC,IPH,J,JL1,JL2,K,KR,LC
      REAL*8  PV(IDIM,JDIM,KDIM)
      REAL*8  SAT(IDIM,JDIM,KDIM,NPH),XVEL(IDIM,JDIM,KDIM,NPH,3),
     &        XDMAT(IDIM,JDIM,KDIM,6,NCINPH)

C ------only mol. diff. implemented currently but dispersion is ready.
      DO K=KL1,KL2
         JL1=JL1V(K)
         JL2=JL2V(K)
         DO J=JL1,JL2
            DO I=IL1,IL2
               DO IPH=1,NPH
                  DO IC=1,NC
                     LC=ICINPH(IC,IPH)
                     IF(LC == 0) CYCLE
                     KR=KROCK(I,J,K)
                     IF(KR > NXROCKS) THEN
                        STOP 'ERROR IN XGETDISP: NROCKS EXCEEDED !!'
                     ENDIF
                     XDMAT(I,J,K,1,LC) = XMDIFF(KR,IC,IPH) 
                     XDMAT(I,J,K,2,LC) = XMDIFF(KR,IC,IPH) 
                     XDMAT(I,J,K,3,LC) = XMDIFF(KR,IC,IPH)

                     IF((.NOT.XNO_LD).OR.(.NOT.XNO_TD)) THEN
                        WRITE(0,*) "WARNING IN XGETDISP: LONG./TRANS. 
     &                             DISPERSION NOT IMPLEMENTED YET !!"
                     ENDIF
                  END DO
               END DO
            END DO
         END DO
      END DO

      RETURN
      END


C***********************************************************************
      SUBROUTINE XDIFFX(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                 KEYOUT,NBLK,TCOF,PV,CR,SAT,PMDEN,MOLFRAC,XDMAT,
     &                 TFLOW,DFLOW,RESID)
C***********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'xparam.h'
      INCLUDE 'xmodel.h'
C***********************************************************************
C  THIS ROUTINE EVALUATES CONTRIBUTION TO RESIDUAL FROM DIFFUSION-
C  -DISPERSION ON X-FACES.
C  INPUT: 
C      TCOF =    X-TRANSMISSIBILITY (CU-FT-CP/PSI-DAY, REAL*8)
C      PV =      PV VOLUME (CU-FT, REAL*8)
C      CR =      ROCK COMPRESSIBILITY X PV0 (CU-FT, REAL*4)
C      SAT =     PHASE SATURATIONS (REAL*8)
C      PMDEN =   PHASE MOLAR DENSITY (MOLE/RCF, REAL*8)
C      MOLFRAC = COMPONENT MOLE FRACTIONS IN EACH PHASE (REAL*8)
C      XDMAT =   DIFFUSION-DISPERSION TENSOR (REAL*8).
C  INPUT/OUTPUT:
C     RESID(I,J,K,IC) = RESIDUAL FOR RIGHT HAND SIDE (REAL*8)
C     DFLOW(I,J,K,IC) = DIAGONAL FLOW COEFFICIENT FOR P(I,J,K)
C                       IN (I,J,K,IC) MASS CONSERVATION EQUATION (REAL*8)

C  OUTPUT:
C     TFLOW(I,J,K,IC,IDIR) = OFF-DIAGONAL FLOW COEFFICIENT FOR P(I-1,J,K)
C                            IN (I,J,K,IC) MASS CONSERVATION EQUATION (REAL*8) 
C-----------------------------------------------------------------------
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,JL1V(KDIM),JL2V(KDIM),
     &        KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*4  CR(IDIM,JDIM,KDIM)
      REAL*8  PV(IDIM,JDIM,KDIM)
      REAL*8  SAT(IDIM,JDIM,KDIM,NPH),PMDEN(IDIM,JDIM,KDIM,NPH),
     &        TCOF(IDIM,JDIM,KDIM),MOLFRAC(IDIM,JDIM,KDIM,NCINPH),
     &        XDMAT(IDIM,JDIM,KDIM,6,NCINPH),RESID(IDIM,JDIM,KDIM,NC),
     &        DFLOW(IDIM,JDIM,KDIM,NC),TFLOW(IDIM,JDIM,KDIM,NC,3)

C-----------------------------------------------------------------------
C     Local variables
C-----------------------------------------------------------------------
      INTEGER I,IC,IERR,IL2P,IL1S,IOFF,IPH,J,JL1,JL2,JOFF,K,KOFF,LC
      REAL*8  AVDEN,AVSAT,COEF,DC,DX,DX1,TC,DELMF,FLUX

C  GET BLOCK OFFSETS
      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,IERR)

C  SET RANGE INDICES
      IL2P = IL2+1
      IL1S = MAX(IL1,2)

C-------zero initial coefficients
      DO IC = 1,NC
      DO K = KL1,KL2
      DO J = JL1V(K),JL2V(K)
      DO I = IL1,IL2P
         TFLOW(I,J,K,IC,1) = ZERO
      END DO
      END DO
      END DO
      END DO

      DO IPH=1,NPH

C----------add contribution for each component in phase IPH
         DO IC=1,NC
            LC=ICINPH(IC,IPH)
            IF(LC == 0) CYCLE

            DO K=KL1,KL2
               JL1=JL1V(K)
               JL2=JL2V(K)
               DO J=JL1,JL2
                  DO I=IL1S,IL2P
                     TC=TCOF(I,J,K)
                     IF(TC == ZERO) CYCLE
                     DX=HALF*(DXREC(I+IOFF,NBLK)+DXREC(I-1+IOFF,NBLK))
                     DELMF=MOLFRAC(I,J,K,LC)-MOLFRAC(I-1,J,K,LC)
                     DC=HALF*(XDMAT(I,J,K,1,LC)+XDMAT(I-1,J,K,1,LC))
     &                      *DELTIM
                     AVDEN=HALF*(PMDEN(I,J,K,IPH)+PMDEN(I-1,J,K,IPH))
                     AVSAT=HALF*(SAT(I,J,K,IPH)+SAT(I-1,J,K,IPH))

                     IF(KEYOUT(I,J,K) /= 0) THEN
                        DX1=DXREC(I+IOFF,NBLK)
                           FLUX=DC*DELMF*AVSAT*AVDEN/DX
                        COEF=FLUX*CR(I,J,K)/DX1
CGUS ---- CORRECTION
C                        TFLOW(I,J,K,IC,1)=TFLOW(I,J,K,IC,1)+COEF
                        IF(KEYOUT(I,J,K) > 0) THEN 
                            DFLOW(I,J,K,IC)=DFLOW(I,J,K,IC)+COEF
                            RESID(I,J,K,IC)=RESID(I,J,K,IC)
     &                                     +FLUX*PV(I,J,K)/DX1
                        ENDIF
                     ENDIF
                     IF(KEYOUT(I-1,J,K) > 0) THEN
                        DX1=DXREC(I-1+IOFF,NBLK)
                           FLUX=DC*DELMF*AVSAT*AVDEN/DX
                        COEF=FLUX*CR(I-1,J,K)/DX1
CGUS ---- CORRECTION
C                        DFLOW(I-1,J,K,IC)=DFLOW(I-1,J,K,IC)+COEF
                        DFLOW(I-1,J,K,IC)=DFLOW(I-1,J,K,IC)-COEF
                        RESID(I-1,J,K,IC)=RESID(I-1,J,K,IC)
     &                                   -FLUX*PV(I-1,J,K)/DX1
                     ENDIF
                  END DO
               END DO
            END DO

         END DO

      END DO


      RETURN
      END


C***********************************************************************
      SUBROUTINE XDIFFY(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                 KEYOUT,NBLK,TCOF,PV,CR,SAT,PMDEN,MOLFRAC,XDMAT,
     &                 TFLOW,DFLOW,RESID)
C***********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'xparam.h'
      INCLUDE 'xmodel.h'
C***********************************************************************
C  THIS ROUTINE EVALUATES CONTRIBUTION TO RESIDUAL FROM DIFFUSION-
C  -DISPERSION ON Y-FACES.
C  INPUT:
C      TCOF =    Y-TRANSMISSIBILITY (CU-FT-CP/PSI-DAY, REAL*8)
C      PV =      PORE VOLUME (CU-FT, REAL*8)
C      CR =      ROCK COMPRESSIBILITY X PV0 (CU-FT, REAL*4)
C      SAT =     PHASE SATURATIONS (REAL*8)
C      PMDEN =   PHASE MOLAR DENSITY (MOLE/RCF, REAL*8)
C      MOLFRAC = COMPONENT MOLE FRACTIONS IN EACH PHASE (REAL*8)
C      XDMAT =   DIFFUSION-DISPERSION TENSOR (REAL*8).
C  INPUT/OUTPUT:
C     RESID(I,J,K,IC) = RESIDUAL FOR RIGHT HAND SIDE (REAL*8)
C     DFLOW(I,J,K,IC) = DIAGONAL FLOW COEFFICIENT FOR P(I,J,K)
C                       IN (I,J,K,IC) MASS CONSERVATION EQUATION (REAL*8)

C  OUTPUT:
C     TFLOW(I,J,K,IC,IDIR) = OFF-DIAGONAL FLOW COEFFICIENT FOR P(I,J-1,K)
C                            IN (I,J,K,IC) MASS CONSERVATION EQUATION (REAL*8)
C-----------------------------------------------------------------------
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,JL1V(KDIM),JL2V(KDIM),
     &        KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*4  CR(IDIM,JDIM,KDIM)
      REAL*8  PV(IDIM,JDIM,KDIM)
      REAL*8  SAT(IDIM,JDIM,KDIM,NPH),PMDEN(IDIM,JDIM,KDIM,NPH),
     &        TCOF(IDIM,JDIM,KDIM),MOLFRAC(IDIM,JDIM,KDIM,NCINPH),
     &        XDMAT(IDIM,JDIM,KDIM,6,NCINPH),RESID(IDIM,JDIM,KDIM,NC),
     &        DFLOW(IDIM,JDIM,KDIM,NC),TFLOW(IDIM,JDIM,KDIM,NC,3)

C-----------------------------------------------------------------------
C     Local variables
C-----------------------------------------------------------------------
      INTEGER I,IC,IERR,IOFF,IPH,J,JL1,JL2,JM1,JOFF,K,KOFF,LC
      REAL*8  AVDEN,AVSAT,COEF,DC,DY,DY1,TC,DELMF,FLUX

C  GET BLOCK OFFSETS
      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,IERR)

C-------zero initial coefficients
      DO IC = 1,NC
      DO K = KL1,KL2
      DO J = JL1V(K),JL2V(K)+1
      DO I = IL1,IL2
         TFLOW(I,J,K,IC,2) = ZERO
      END DO
      END DO
      END DO
      END DO

      DO IPH=1,NPH

C----------add contribution for each component in phase IPH
         DO IC=1,NC
            LC=ICINPH(IC,IPH)
            IF(LC == 0) CYCLE

            DO K=KL1,KL2
               JL1=JL1V(K)
               JL2=JL2V(K)
               DO J=JL1,JL2+1
                  JM1=J-1
                  IF(JM1 <= 0) CYCLE
                  DO I=IL1,IL2
                     TC=TCOF(I,J,K)
                     IF(TC == ZERO) CYCLE
                     DY=HALF*(DYREC(J+JOFF,NBLK)+DYREC(JM1+JOFF,NBLK))
                     DELMF=MOLFRAC(I,J,K,LC)-MOLFRAC(I,JM1,K,LC)
                     DC=HALF*(XDMAT(I,J,K,2,LC)+XDMAT(I,JM1,K,2,LC))
     &                      *DELTIM
                     AVDEN=HALF*(PMDEN(I,J,K,IPH)+PMDEN(I,JM1,K,IPH))
                     AVSAT=HALF*(SAT(I,J,K,IPH)+SAT(I,JM1,K,IPH))

                     IF(KEYOUT(I,J,K) /= 0) THEN
                        DC=XDMAT(I,J,K,2,LC)*DELTIM
                        DY1=DYREC(J+JOFF,NBLK)
                        FLUX=DC*DELMF*AVSAT*AVDEN/DY
                        COEF=FLUX*CR(I,J,K)/DY1
CGUS ---- CORRECTION
C                        TFLOW(I,J,K,IC,2)=TFLOW(I,J,K,IC,2)+COEF
                        IF(KEYOUT(I,J,K) > 0) THEN
                           DFLOW(I,J,K,IC)=DFLOW(I,J,K,IC)+COEF
                           RESID(I,J,K,IC)=RESID(I,J,K,IC)
     &                                    +FLUX*PV(I,J,K)/DY1
                        ENDIF
                     ENDIF
                     IF(KEYOUT(I,JM1,K) > 0) THEN
                        DY1=DYREC(JM1+JOFF,NBLK)
                        FLUX=DC*DELMF*AVSAT*AVDEN/DY
                        COEF=FLUX*CR(I,JM1,K)/DY1
CGUS ---- CORRECTION
C                        DFLOW(I,JM1,K,IC)=DFLOW(I,JM1,K,IC)+COEF
                        DFLOW(I,JM1,K,IC)=DFLOW(I,JM1,K,IC)-COEF
                        RESID(I,JM1,K,IC)=RESID(I,JM1,K,IC)
     &                      -FLUX*PV(I,JM1,K)/DY1
                     ENDIF
                  END DO
               END DO
            END DO
         END DO
      END DO

      RETURN
      END

C***********************************************************************
      SUBROUTINE XDIFFZ(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                 KEYOUT,NBLK,TCOF,PV,CR,SAT,PMDEN,MOLFRAC,XDMAT,
     &                 TFLOW,DFLOW,RESID)
C***********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'xparam.h'
      INCLUDE 'xmodel.h'
C***********************************************************************
C  THIS ROUTINE EVALUATES CONTRIBUTION TO RESIDUAL FROM DIFFUSION-
C  -DISPERSION ON Z-FACES.
C  INPUT:
C      TCOF =    Z-TRANSMISSIBILITY (CU-FT-CP/PSI-DAY, REAL*8)
C      PV =      PV VOLUME (CU-FT, REAL*8)
C      CR =      ROCK COMPRESSIBILITY X PV0 (CU-FT, REAL*4)
C      SAT =     PHASE SATURATIONS (REAL*8)
C      PMDEN =   PHASE MOLAR DENSITY (MOLE/RCF, REAL*8)
C      MOLFRAC = COMPONENT MOLE FRACTIONS IN EACH PHASE (REAL*8)
C      XDMAT =   DIFFUSION-DISPERSION TENSOR (REAL*8).
C  INPUT/OUTPUT:
C     RESID(I,J,K,IC) = RESIDUAL FOR RIGHT HAND SIDE (REAL*8)
C     DFLOW(I,J,K,IC) = DIAGONAL FLOW COEFFICIENT FOR P(I,J,K)
C                       IN (I,J,K,IC) MASS CONSERVATION EQUATION (REAL*8)

C  OUTPUT:
C     TFLOW(I,J,K,IC,IDIR) = OFF-DIAGONAL FLOW COEFFICIENT FOR P(I,J-1,K)
C                            IN (I,J,K,IC) MASS CONSERVATION EQUATION (REAL*8)
C-----------------------------------------------------------------------
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,JL1V(KDIM),JL2V(KDIM),
     &        KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*4  CR(IDIM,JDIM,KDIM)
      REAL*8  PV(IDIM,JDIM,KDIM)
      REAL*8  SAT(IDIM,JDIM,KDIM,NPH),PMDEN(IDIM,JDIM,KDIM,NPH),
     &        TCOF(IDIM,JDIM,KDIM),MOLFRAC(IDIM,JDIM,KDIM,NCINPH),
     &        XDMAT(IDIM,JDIM,KDIM,6,NCINPH),RESID(IDIM,JDIM,KDIM,NC),
     &        DFLOW(IDIM,JDIM,KDIM,NC),TFLOW(IDIM,JDIM,KDIM,NC,3)

C-----------------------------------------------------------------------
C     Local variables
C-----------------------------------------------------------------------
      INTEGER I,IC,IERR,KL2P,KL1S,IOFF,IPH,J,JL1(KDIM),JL2(KDIM),JOFF,K,
     &        KOFF,LC
      REAL*8  AVDEN,AVSAT,COEF,DC,DZ,DZ1,TC,DELMF,FLUX

C  GET BLOCK OFFSETS
      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,IERR)

C  SET RANGE INDICES
      KL2P = KL2+1
      KL1S = MAX(KL1,2)

C-------set up JL1 and JL2 vectors
      JL1(KL1)=JL1V(KL1)
      JL2(KL1)=JL2V(KL1)
      DO K = KL1+1,KL2
         JL1(K)=MIN(JL1V(K-1),JL1V(K))
         JL2(K)=MAX(JL2V(K-1),JL2V(K))
      END DO
      JL1(KL2P)=JL1V(KL2)
      JL2(KL2P)=JL2V(KL2)

C-------zero initial coefficients
      DO IC = 1,NC
      DO K = KL1,KL2P
         DO J = JL1(K),JL2(K)
         DO I = IL1,IL2
            TFLOW(I,J,K,IC,3) = ZERO
         END DO
         END DO
      END DO
      END DO

      DO IPH=1,NPH

C----------add contribution for each component in phase IPH
         DO IC=1,NC
            LC=ICINPH(IC,IPH)
            IF(LC == 0) CYCLE

            DO K=KL1S,KL2P
               DO J=JL1(K),JL2(K)
                  DO I=IL1,IL2
                     TC=TCOF(I,J,K)
                     IF(TC == ZERO) CYCLE
                     DZ=HALF*(DZREC(K+KOFF,NBLK)+DZREC(K-1+KOFF,NBLK))
                     DELMF=MOLFRAC(I,J,K,LC)-MOLFRAC(I,J,K-1,LC)
                     DC=HALF*(XDMAT(I,J,K,3,LC)+XDMAT(I,J,K-1,3,LC))
     &                      *DELTIM
                     AVDEN=HALF*(PMDEN(I,J,K,IPH)+PMDEN(I,J,K-1,IPH))
                     AVSAT=HALF*(SAT(I,J,K,IPH)+SAT(I,J,K-1,IPH))

                     IF(KEYOUT(I,J,K) /= 0) THEN
                        DZ1=DZREC(K+KOFF,NBLK)
                        FLUX=DC*DELMF*AVSAT*AVDEN/DZ
                        COEF=FLUX*CR(I,J,K)/DZ1
CGUS ---- CORRECTION
C                        TFLOW(I,J,K,IC,3)=TFLOW(I,J,K,IC,3)+COEF
                        IF(KEYOUT(I,J,K) > 0) THEN
                           DFLOW(I,J,K,IC)=DFLOW(I,J,K,IC)+COEF
                           RESID(I,J,K,IC)=RESID(I,J,K,IC)
     &                                    +FLUX*PV(I,J,K)/DZ1
                        ENDIF
                     ENDIF
                     IF(KEYOUT(I,J,K-1) > 0) THEN
                        DZ1=DZREC(K-1+KOFF,NBLK)
                        FLUX=DC*DELMF*AVSAT*AVDEN/DZ
                        COEF=FLUX*CR(I,J,K-1)/DZ1
CGUS ---- CORRECTION
C                        DFLOW(I,J,K-1,IC)=DFLOW(I,J,K-1,IC)+COEF
                        DFLOW(I,J,K-1,IC)=DFLOW(I,J,K-1,IC)-COEF
                        RESID(I,J,K-1,IC)=RESID(I,J,K-1,IC)
     &                      -FLUX*PV(I,J,K-1)/DZ1
                     ENDIF
                  END DO
               END DO
            END DO

         END DO

      END DO


      RETURN
      END

