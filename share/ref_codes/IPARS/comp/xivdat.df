C  XIVDAT.F - INITIALIZATION FOR THE COMPOSITIONAL MODEL AFTER INPUT

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE XIVDAT  (NERR)

C  CODE HISTORY
C    RICK DEAN
C      ALPHA VERSION                                    04/02/1997
C      ADD TASKS FOR CPU DISTRIBUTION                   07/01/1997
C      ALLOW COMPONENT INJECTION/PRODUCTION RATES
C      TO BE PRINTED                                    04/03/1998
C      MODIFIED FOR NEW PHASE PACKAGE                   03/26/2001
C    SUNIL G. THOMAS
C      THERMAL, DIFF-DISP, CO2 APPS, HYSTERESIS AND     09/01/2007
C      OTHER MODS
C    GURPREET SINGH
C      AQUEOUS PHASE COMPONENTS                         10/15/2015

C*********************************************************************
      SUBROUTINE XIVDAT (NERR)
C*********************************************************************

C  Complete compositional model initialization

C  NERR = Error number stepped by 1 on error (input & output, INTEGER*4)

C*********************************************************************
      USE xgendat
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'times.h'
      INCLUDE 'wells.h'
      INCLUDE 'xcompwel.h'
      INCLUDE 'xthermal.h'
      INCLUDE 'xmodel.h'
      INCLUDE 'unitsex.h'
      INCLUDE 'blkary.h'
      INCLUDE 'xarydat.h'
      INCLUDE 'xresprop.h'
      INCLUDE 'xiter.h'
      INCLUDE 'xparam.h'
      INCLUDE 'xbaldat.h'
$POWER      INCLUDE 'msjunk.h'
      REAL*8 COMPSUM,SUMERR
      COMMON/ISUM/COMPSUM,SUMERR
      INTEGER I,J,K,NERR
      INTEGER IPNT(10),IPOR(6),IVEL(10),IDISP(6),IMFR(3),ITHCOND(7),
     &        ISPHEAT(7),IPHDENS(3),ICOPY(4),ISET(4),IHYST(5)
      REAL*8 DUM
      LOGICAL INIT
      EXTERNAL CMPSHFT, TASSIGN, XPORE_IN, XPORE, CPYARYR8, SETARYI4
     &        ,XGETDISP, XVELCOMP, XMASSFRAC_ALL, XTHCOND, XTHCONDBD
     &        ,XSPHEAT, XPHDENS, XHYSINIT, CPYARYR8N, SETARYR8 
     &        ,SETARYR8N, XPHMDENS

      IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)'PROC',MYPRC,
     &                         ' ENTERING SUBROUTINE XIVDAT'

C-------setup flag for restart run
      IF(RTIMIN <= ZERO) THEN
         RESTART = .FALSE.
      ELSE
         RESTART = .TRUE.
      ENDIF

C-------setup eos table for each different reservoir temperature
      NTEMP=0
      IPNT(1)=2
      IPNT(2)=N_TEMPR
      IPNT(3)=N_CTAB
      CALL CALLWORK(TASSIGN,IPNT)
      NRESVTEMP=NTEMP

C-------setup eos table for each different stage temperature
      DO I=1,NSEP
         DO J=1,NSTAGE(I)
            CALL SET_EOS_PARM(K,TSEP(J,I),NFOUT,LEVELC,NERR,DEL_TS)
            ISEPTAB(J,I)=K
         END DO
      END DO            

C-------cpu times
      TIMNAM(20)='TOTAL FLASH TIME FOR GRID BLOCKS'
      TIMKLS(20)=4
      TIMNAM(21)='FLASH ITERATIONS FOR GRID BLOCKS'
      TIMKLS(21)=4
      TIMNAM(23)='RELATIVE PERMEABILITY TIME'
      TIMKLS(23)=4
      TIMNAM(24)='COEFFICIENT GENERATION TIME'
      TIMKLS(24)=4
      TIMNAM(25)='WELL COMMUNICATION TIME'
      TIMKLS(25)=2
      TIMNAM(26)='VARIABLE UPDATE TIME'
      TIMKLS(26)=4
 
C-------shift concentration values and check sum
      I4UTIL=NC
      IPNT(1)=2
      IPNT(2)=N_CONC
      IPNT(3)=N_I4U
      SUMERR = -ONE
      IF(NHC > 0) THEN
         CALL CALLWORK(CMPSHFT,IPNT)
$MANY         CALL MAXIT(1,SUMERR)
      ENDIF
      IF(SUMERR > ZERO) THEN
         NERR = NERR + 1
         IF(LEVELC) THEN
            WRITE(NFOUT,*) ' Grid block compositions must sum to one'
            WRITE(NFOUT,*) ' Value is: ',SUMERR
         ENDIF
      ENDIF
 
C-------determine if any other models are active
      IF(NACTMOD > 1) THEN
         ONLY_COMP = .FALSE.
      ELSE
         ONLY_COMP = .TRUE.
      ENDIF
 
C-------set initial fluid type for fluid pointer 
      IPNT(1)=2
      IPNT(2)=N_FLDPNT
      I4UTIL=IFLINIT
      IPNT(3)=N_I4U
      CALL CALLWORK (SETARYI4,IPNT)
 
C-------calculate reference pore volume and modify rock compressibility
      IPNT(1)=2
      IPNT(2)=N_POR
      IPNT(3)=N_CR
      CALL CALLWORK(XPORE_IN,IPNT)
 
C-------flash fluids to get initial phases
      NEWFLASH = .TRUE.
      IF(.NOT.RESTART) THEN
         CALL EOS_WORK(NCINPH,.TRUE.,NFBUG,NHC,NC,NPH,ICINPH,
     &                 N_TCOFX,N_TCOFY,N_TCOFZ,N_DELC,.FALSE.,
     &                 .FALSE.,.FALSE.,IFTCALC)
         NEWFLASH = .FALSE.
      ENDIF

C-------initialize phase velocity to zero
      ISET(1)=3
      ISET(2)=N_XVEL
      R8UTIL=ZERO
      I4UTIL=NPH*3
      ISET(3)=N_R8U
      ISET(4)=N_I4U
      CALL CALLWORK(SETARYR8N,ISET)

      IF(HYSTERESIS .AND. (((NPH > 2).AND.AQPHSWTCH).OR.(NPH == 2)))
     &THEN
         IHYST(1)=4
         IHYST(2)=N_ROCK
         IHYST(3)=N_SAT
         IHYST(4)=N_SWMIN
         IHYST(5)=N_SGT
         CALL CALLWORK(XHYSINIT,IHYST)
      ENDIF

C-------initialize diffusion-dispersion tensor
      IF((.NOT.XNO_DD).AND.((.NOT.XNO_MD).OR.(.NOT.XNO_LD).OR.
     &   (.NOT.XNO_TD))) THEN
         IPOR(1)=5
         IPOR(2)=N_POR
         IPOR(3)=N_PV
         IPOR(4)=N_PRES
         IPOR(5)=N_CR
         IPOR(6)=N_REFPRES
         CALL CALLWORK(XPORE,IPOR)
$MANY         CALL UPDATE(N_CR,1)

         IF((.NOT.XNO_LD).OR.(.NOT.XNO_TD)) THEN
            IVEL(1)=9
            IVEL(2)=N_TCOFX
            IVEL(3)=N_TCOFY
            IVEL(4)=N_TCOFZ
            IVEL(5)=N_DEPTH
            IVEL(6)=N_PRES
            IVEL(7)=N_PC
            IVEL(8)=N_MDENN
            IVEL(9)=N_MOB
            IVEL(10)=N_XVEL
            CALL CALLWORK(XVELCOMP,IVEL)
         ENDIF

         IDISP(1)=5
         IDISP(2)=N_PV
         IDISP(3)=N_ROCK
         IDISP(4)=N_SAT
         IDISP(5)=N_XVEL
         IDISP(6)=N_XDMAT
         CALL CALLWORK(XGETDISP,IDISP)
$MANY         CALL UPDATE(N_XDMAT,1)
      ENDIF

C-------initialize the fluid phase and rock specific heats and 
C       thermal conductivities
      IF(XTHERMAL) THEN
         IMFR(1)=2
         IMFR(2)=N_PMD
         IMFR(3)=N_KSI
         CALL CALLWORK(XMASSFRAC_ALL,IMFR)
         ICOPY(1)=3
         ICOPY(2)=N_KSI
         ICOPY(3)=N_KSIN
         I4UTIL = NCINPH
         ICOPY(4)=N_I4U
         CALL CALLWORK(CPYARYR8N,ICOPY)
         ICOPY(2)=N_PV
         ICOPY(3)=N_PVN
         I4UTIL = 1
         CALL CALLWORK(CPYARYR8N,ICOPY)
         ICOPY(2)=N_SAT
         ICOPY(3)=N_SATN
         I4UTIL = NPH
         CALL CALLWORK(CPYARYR8N,ICOPY)
         THTFAC=ZERO
         ITHCOND(1)=6
         ITHCOND(2)=N_PV
         ITHCOND(3)=N_PVN
         ITHCOND(4)=N_SAT
         ITHCOND(5)=N_SATN
         ITHCOND(6)=N_TEMPR
         ITHCOND(7)=N_XTCOND
         CALL CALLWORK(XTHCOND,ITHCOND)
         IF(XHEATLOSS) THEN
            R8UTIL=ZERO
            ISET(1)=2
            ISET(2)=N_XHEAT
            ISET(3)=N_R8U
            CALL CALLWORK(SETARYR8,ISET)
            R8UTIL=-TEN_M6
            ISET(2)=N_XTRESID
            CALL CALLWORK(SETARYR8,ISET)
            ITHCOND(1)=5
            ITHCOND(6)=N_XTCOND
            CALL CALLWORK(XTHCONDBD,ITHCOND)
         ENDIF
         ISPHEAT(1)=6
         ISPHEAT(2)=N_TEMPR
         ISPHEAT(3)=N_KSI
         ISPHEAT(4)=N_KSIN
         ISPHEAT(5)=N_XCPL
         ISPHEAT(6)=N_XCVL
         ISPHEAT(7)=N_XCVS
         CALL CALLWORK(XSPHEAT,ISPHEAT)
         ICOPY(2)=N_XVEL
         ICOPY(3)=N_XVELN
         I4UTIL=NPH*3
         IF(XNO_DD) THEN
            IVEL(1)=9
            IVEL(2)=N_TCOFX
            IVEL(3)=N_TCOFY
            IVEL(4)=N_TCOFZ
            IVEL(5)=N_DEPTH
            IVEL(6)=N_PRES
            IVEL(7)=N_PC
            IVEL(8)=N_MDENN
            IVEL(9)=N_MOB
            IVEL(10)=N_XVEL
            CALL CALLWORK(XVELCOMP,IVEL)
         ENDIF
         CALL CALLWORK(CPYARYR8N,ICOPY)
         IPHDENS(1)=2
         IPHDENS(2)=N_PMD
         IPHDENS(3)=N_PMDENN
         CALL CALLWORK(XPHDENS,IPHDENS) 
         IF(XNOFLXLMTR) THEN
            R8UTIL=ZERO
            I4UTIL=NPH*3
            ISET(1)=3
            ISET(2)=N_XSLP
            ISET(3)=N_R8U
            ISET(4)=N_I4U
            CALL CALLWORK(SETARYR8N,ISET)
         ENDIF
      ENDIF

C---- Aqueous phase component
      IF (NAQ>0) THEN
         IPHDENS(1)=2
         IPHDENS(2)=N_PMD
         IPHDENS(3)=N_PMDENN
         CALL CALLWORK(XPHMDENS,IPHDENS) 
      ENDIF
 
      END

C*********************************************************************
      SUBROUTINE CMPSHFT (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                    KL1,KL2,KEYOUT,NBLK,ARRAY,MC)
C*********************************************************************
 
C  SHIFTS COMPOSITIONAL ENTRIES BY AMOUNT 1 OR -1 IN ARRAY
C  THIS IS A WORK ROUTINE.
C  CHECKS SUM IF ISUMERR = -1
C  SETS LAST COMPONENT SO VALUE SUMS TO ONE.

C  ARRAY(I,J,K,N)= ARRAY TO BE SHIFTED (INPUT/OUTPUT, REAL*8)

C*********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'xparam.h'
      REAL*8 COMPSUM,SUMERR
      COMMON/ISUM/COMPSUM,SUMERR

      INTEGER JL1V(KDIM),JL2V(KDIM), KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 ARRAY(IDIM,JDIM,KDIM,*),X,Y

      NC = ABS(MC)
      IF(SUMERR == -ONE) THEN
         DO K=KL1,KL2
         DO J=JL1V(K),JL2V(K)
         DO I=IL1,IL2
            IF (KEYOUT(I,J,K) == 1) THEN
               Y = ZERO
               DO IC = 1,NC-2
                  Y = Y + ARRAY(I,J,K,IC)
               END DO
               X = Y + ARRAY(I,J,K,NC-1)
               ARRAY(I,J,K,NC-1) = ONE - Y
               IF(ABS(ONE-X) > TEN_M6) THEN
                  SUMERR = X
                  EXIT
               ENDIF
            ENDIF
         END DO
         END DO
         END DO
      ELSE
         SUMERR = ZERO
      ENDIF
      IF(MC > 0) THEN
         DO K=KL1,KL2
         DO J=JL1V(K),JL2V(K)
         DO I=IL1,IL2
            IF (KEYOUT(I,J,K) == 1) THEN
               DO IC = NC-1,1,-1
                  ARRAY(I,J,K,IC+1)=ARRAY(I,J,K,IC)
               END DO
            ENDIF
         END DO
         END DO
         END DO
      ELSEIF(MC < 0) THEN
         DO K=KL1,KL2
         DO J=JL1V(K),JL2V(K)
         DO I=IL1,IL2
            IF (KEYOUT(I,J,K) == 1) THEN
               DO IC = 2,NC
                  ARRAY(I,J,K,IC-1)=ARRAY(I,J,K,IC)
               END DO
            ENDIF
         END DO
         END DO
         END DO
      ENDIF

      END

C*********************************************************************
      SUBROUTINE TASSIGN (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &     KL1,KL2,KEYOUT,NBLK,VALUE,ITAB)
C*********************************************************************
 
C  SETS UP EOS PARAMETERS FOR MULTIPLE RESERVOIR TEMPERATURES
C  THIS IS A WORK ROUTINE.

C  VALUE(I,J,K)= TEMPERATURE ARRAY (INPUT, REAL*8)
C  ITAB(I,J,K)= TABLE ASSIGNMENT FOR BLOCKS

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'xmodel.h'
      INCLUDE 'control.h'
      INCLUDE 'xthermal.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM),
     &        ITAB(IDIM,JDIM,KDIM)
      REAL*8 VALUE(IDIM,JDIM,KDIM)

      INTEGER I,J,K,L,NERR
      DATA NERR/0/

      DO K=KL1,KL2
      DO J=JL1V(K),JL2V(K)
      DO I=IL1,IL2

         IF (KEYOUT(I,J,K) == 1) THEN
            CALL SET_EOS_PARM(L,VALUE(I,J,K),NFOUT,LEVELC,NERR,DEL_TR)
            ITAB(I,J,K)=L
         ENDIF

      END DO
      END DO
      END DO

      END

C*********************************************************************
      SUBROUTINE DUMPARRAY8 (N,COMMENT,I)
C*********************************************************************
 
C  DUMPS TOTAL ARRAY.
C  N =       ARRAY POINTER
C  COMMENT = COMMENT TO BE PRINTED
C  I =       SECOND INDEX
C  THIS IS A WORK ROUTINE.

C*********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
$POWER      INCLUDE 'msjunk.h'
      INTEGER N,IARG(3),I
      CHARACTER*(*) COMMENT
      EXTERNAL DUMP2

      WRITE(NFBUG,'(2A)') ' DUMPING ',COMMENT
      IARG(1) = 2
      IARG(2) = N
      IARG(3) = N_I4U
      I4UTIL = I
      CALL CALLWORK(DUMP2,IARG)

      END

C*********************************************************************
      SUBROUTINE DUMP2 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                  KL1,KL2,KEYOUT,NBLK,VALUE,N)
C*********************************************************************
 
C  DUMPS TOTAL ARRAY
C  THIS IS A WORK ROUTINE.

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,N
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 VALUE(IDIM,JDIM,KDIM,N)

      INTEGER I,J,K,L,M

      DO I=1,IDIM
         WRITE(NFBUG,'(A,I3)') ' I =',I
         DO K=1,KDIM
            WRITE(NFBUG,'(A,I3)') '   K =',K
            DO J = 1,JDIM,10
               L = J/10 + 1
               WRITE(NFBUG,'(10X,10G12.4)') 
     &                      (VALUE(I,M,K,N),M=J,MIN(JDIM,J+9))
            END DO
         END DO
      END DO

      END
C*********************************************************************
      SUBROUTINE DUMPARRAY4 (N,COMMENT,I)
C*********************************************************************
 
C  DUMPS TOTAL ARRAY.
C  N =       ARRAY POINTER
C  COMMENT = COMMENT TO BE PRINTED
C  I =       SECOND INDEX
C  THIS IS A WORK ROUTINE.

C*********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
$POWER      INCLUDE 'msjunk.h'
      INTEGER N,IARG(3),I
      CHARACTER*(*) COMMENT
      EXTERNAL DUMP3

      WRITE(NFBUG,'(2A)') ' DUMPING ',COMMENT
      IARG(1) = 2
      IARG(2) = N
      IARG(3) = N_I4U
      I4UTIL = I
      CALL CALLWORK(DUMP3,IARG)

      END

C*********************************************************************
      SUBROUTINE DUMP3 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                  KL1,KL2,KEYOUT,NBLK,VALUE,N)
C*********************************************************************
 
C  DUMPS TOTAL ARRAY
C  THIS IS A WORK ROUTINE.

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,N
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*4 VALUE(IDIM,JDIM,KDIM,N)

      INTEGER I,J,K,L,M

      DO I=1,IDIM
         WRITE(NFBUG,'(A,I3)') ' I =',I
         DO K=1,KDIM
            WRITE(NFBUG,'(A,I3)') '  K =',K
            DO J = 1,JDIM,10
               L = J/10 + 1
               WRITE(NFBUG,'(10X,10G12.4)') 
     &                      (VALUE(I,M,K,N),M=J,MIN(JDIM,J+9))
            END DO
         END DO
      END DO

      END

C*********************************************************************
      SUBROUTINE DUMPKEYOUT
C*********************************************************************
 
C  DUMPS TOTAL ARRAY.
C  N =       ARRAY POINTER
C  COMMENT = COMMENT TO BE PRINTED
C  I =       SECOND INDEX
C  THIS IS A WORK ROUTINE.

C*********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
$POWER      INCLUDE 'msjunk.h'
      INTEGER IARG(1)
      EXTERNAL DUMP5

      WRITE(NFBUG,'(A)') ' DUMPING KEYOUT'
      IARG(1) = 0
      CALL CALLWORK(DUMP5,IARG)

      END

C*********************************************************************
      SUBROUTINE DUMP5 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                  KL1,KL2,KEYOUT,NBLK)
C*********************************************************************
 
C  DUMPS TOTAL ARRAY
C  THIS IS A WORK ROUTINE.

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)

      INTEGER I,J,K,L,M

      WRITE(NFBUG,'(A,I5)') ' MYPRC = ',MYPRC
      WRITE(NFBUG,'(A,I5)') ' NBLK = ',NBLK
      WRITE(NFBUG,'(A,I5)') ' IDIM = ',IDIM
      WRITE(NFBUG,'(A,I5)') ' JDIM = ',JDIM
      WRITE(NFBUG,'(A,I5)') ' KDIM = ',KDIM
      DO I=1,IDIM
         WRITE(NFBUG,'(A,I3)') ' I =',I
         DO K=1,KDIM
            WRITE(NFBUG,'(A,I3)') '  K =',K
            DO J = 1,JDIM,40
               L = J/40 + 1
               WRITE(NFBUG,'(10X,40I3)') 
     &                      (KEYOUT(I,M,K),M=J,MIN(JDIM,J+39))
            END DO
         END DO
      END DO

      END
 
C*********************************************************************
      SUBROUTINE XHYSINIT (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                     KL2,KEYOUT,NBLK,KROCK,SAT,SWMIN,SGT)
C*********************************************************************
 
C  INITIALIZES HYSTERESIS UTILITY VARIABLES. THIS IS A WORK ROUTINE.

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'rock.h'
      INCLUDE 'xmodel.h'
      INCLUDE 'xparam.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM),KL1,KL2,
     &        KEYOUT(IDIM,JDIM,KDIM),KROCK(IDIM,JDIM,KDIM),NBLK,KR
      INTEGER I,J,K
      REAL*8  SAT(IDIM,JDIM,KDIM,NPH),SWMIN(IDIM,JDIM,KDIM),
     &        SGT(IDIM,JDIM,KDIM),SWNORM

      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
               IF (KEYOUT(I,J,K) /= 1) CYCLE
               KR = KROCK(I,J,K)
               IF (RPLMDA(KR) <= TEN_M6) THEN
                  WRITE(0,*) 'ZERO REL. PERM. EXPONENT - TERMINATING...'
                  STOP 13
               ENDIF
               IF (AQPHSWTCH) THEN
                  SWNORM = (SAT(I,J,K,2)-SORES(KR))
     &                   / (ONE-SORES(KR))
               ELSE
                  SWNORM = (SAT(I,J,K,1)-SWRES(KR))
     &                   / (ONE-SWRES(KR))
               ENDIF
               SWNORM = MAX(ZERO,SWNORM)
               SWNORM = MIN(ONE,SWNORM)
               SWMIN(I,J,K) = SWNORM
               SGT(I,J,K) = ZERO
            ENDDO
         ENDDO
      ENDDO

      RETURN
      END
