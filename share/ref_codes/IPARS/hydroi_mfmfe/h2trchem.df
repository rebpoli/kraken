C  H2TRCHEM.F - INTERFACE ROUTINES FOR 
C  HYDROLOGY MODEL (H) --> TRANSPORT-CHEMISTRY MODEL (TR)

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE H2TRVEL_EX ()

C  SUBROUTINE H2TRVEL (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                      KL2,KEYOUT,NBLK,TCOFX,TCOFY,TCOFZ,DEPTH,
C                      PRES,VX,VY,VZ)

C  CODE HISTORY:

C  MPESZYNSKA, 9/00       ADDED H2TRVEL FOR TRANSPORT VELOCITIES
C  SUNIL G THOMAS, 04/09  ADDED MODS FOR EVMFEM COUPLED TO TRCHEM

C **************************************************************
      SUBROUTINE H2TR_PROP (FLAG)
C **************************************************************
C GIVEN MODEL PRIMARY VARIABLES, 
C COMPUTE SATURATIONS, PWAT, DENSITIES
C AND DARCY VELOCITIES FOR BOTH PHASES (USE CALLS TO MOBILITY 
C FUNCTIONS RATHER THAN RELPRM TABLES) 
C **************************************************************
      IMPLICIT NONE 
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'blkary.h'
      INCLUDE 'harydat.h'
      INCLUDE 'trarydat.h'
      INCLUDE 'trmodel.h'

      LOGICAL ONCEONLY
      DATA ONCEONLY /.TRUE./

      INTEGER FLAG

      INTEGER IDEN(6),ISAT(7),NERR,IVELD
      DATA  IDEN/6*0/,ISAT/7*0/
      INTEGER IVEL(15),IV(2)
      DATA  IVEL/15*0/,IV/2*0/

      EXTERNAL HDENSCOMP, PSCOMP, H2TRVELCOMP, H2TRVELD, H2BDTRVEL
C --------------------------------
C SET PARAMETERS TO CALLWORK ARRAYS

      IF(ONCEONLY) THEN
         ONCEONLY = .FALSE.
 
         ISAT(1)=6
         ISAT(2)=N_POIL
         ISAT(3)=N_COIL
         ISAT(5)=N_PWAT
         ISAT(6)=N_ROCK
         ISAT(7)=N_RELPRM

         IDEN(1)=5
         IDEN(2)=N_POIL
         IDEN(3)=N_COIL
         IDEN(4)=N_PWAT
         IDEN(5)=N_DDENS
         IDEN(6)=N_ROCK
         
         IVEL(1)=10
         IVEL(2)=N_TCOFX
         IVEL(3)=N_TCOFY
         IVEL(4)=N_TCOFZ
         IVEL(5)=N_DEPTH
         IVEL(6)=N_POIL
         IVEL(7)=N_PWAT
         IVEL(8)=N_DDENS
         IVEL(10)=N_ROCK

         IV(1) = 1

      ENDIF

C CALLS TO COMPUTE SATURATION, RECOMPUTE PWAT AND COMPUTE DENSITIES

      IF(FLAG.EQ.OLD) THEN
         ISAT(4)=N_SATUN
         IVEL(9)=N_SATUN
         IVEL(11)=N_TRVELN
$DUAL         IVELD=N_TRVELN
      ELSE
         ISAT(4)=N_SATU
         IVEL(9)=N_SATU
         IVEL(11)=N_TRVEL
$DUAL         IVELD=N_TRVEL
      ENDIF

      CALL CALLWORK(PSCOMP,ISAT)

      CALL CALLWORK(HDENSCOMP,IDEN)

C-----------------------------------------------------------
C  EXCHANGE PHYSICAL PARAMETERS WITH NEIGHBORING PROCESSORS
C  THE ONLY POSSIBLE VARIABLES NEED TO UPDATE IS POIL,PWAT,DDENS,SWAT.
C  TCOFX,TCOFY,TCOFZ, DEPTH AND KROCK MUST HAVE CORRECT VALUES ALREADY.
$MANY      CALL TIMON(22)
$MANY      CALL UPDATE(N_POIL,1)
$MANY      CALL UPDATE(N_PWAT,1)
$MANY      CALL UPDATE(N_DDENS,1)
$MANY      IF(FLAG.EQ.OLD) THEN
$MANY         CALL UPDATE(N_SATUN, 1)
$MANY      ELSE
$MANY         CALL UPDATE(N_SATU, 1)
$MANY      ENDIF
$MANY      CALL TIMOFF(22)

      CALL CALLWORK(H2TRVELCOMP,IVEL)

C CONTRIBUTION FROM FAULT-BLOCK INTERFACES

$DUAL      CALL HDUALV(IVELD) 

C COPY BDARY CONTRIBUTIONS TO VELOCITIES ARRAY
      IV(2) = IVEL(11)
      CALL CALLWORK(H2BDTRVEL,IV)

      RETURN
      END

C ==================================================================
      SUBROUTINE H2TRVELCOMP(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                       KL2,KEYOUT,NBLK,TCOFX,TCOFY,TCOFZ,DEPTH,
     &                       POIL,PWAT,DDENS,SWAT,KROCK,VEL)
C ------------------------------------------------------------------
C COMPUTES VELOCITIES (FLUXES) ASSOCIATED WITH FACES 1,2,3 (X,Y,Z) OF
C EACH GRIDBLOCK, FOR EACH PHASE 1,2 (OIL,WATER). PUT THE VALUES INTO 
C THE VEL GRID ARRAY. VEL(I,J,K,IPHASE,1) FOR EXAMPLE CONTAINS THE 
C VALUE OF VELOCITY FOR PHASE IPHASE ON THA FACE OF LOCATION I-1/2,J,K 
C-------------------------------------------------------------------
      IMPLICIT NONE
$POWER       INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'rock.h'
      INCLUDE 'hfluids.h'
      INCLUDE 'hbaldat.h'
      INCLUDE 'layout.h'
      
      INTEGER IL1, IL2, KL1, KL2
      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      INTEGER KROCK(IDIM,JDIM,KDIM)
      REAL*8 TCOFX(IDIM,JDIM,KDIM),       TCOFY(IDIM,JDIM,KDIM),
     &       TCOFZ(IDIM,JDIM,KDIM),       DEPTH(IDIM,JDIM,KDIM),
     &       POIL(IDIM,JDIM,KDIM),        PWAT(IDIM,JDIM,KDIM),
     &       DDENS(IDIM,JDIM,KDIM,2),     SWAT(IDIM,JDIM,KDIM), 
     &       VEL(IDIM,JDIM,KDIM,2,3)

C -------------------------------------------------------------
        INTEGER I,J,K,L,JLP,ILP,KLP,MKEY1,MKEY,I1,J1,K1
        INTEGER JL1
        INTEGER IPHASE, IFACE, MIOFF, MJOFF, MKOFF
        REAL*8 DX,DY,DZ, G2, DD, DGRAV, DP,DENS1, DENS2,SW,REL,DREL
        INTEGER IOFF,JOFF,KOFF,IERR
	REAL*4 VISC_PHASE
C --------------------------------------------------------------
        G2=.5D0*GRAV
C ----------------------------------------------
C     GET THE GLOBAL OFFSETS FOR DX,DY,DZ
      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,IERR)
      IF(IERR.NE.0) RETURN
C --------------------------- MAIN LOOP OVER FACES AND PHASES ---
        DO IFACE=1,3
                MIOFF=0
                MJOFF=0
                MKOFF=0
                IF (IFACE.EQ.1) MIOFF=1
                IF (IFACE.EQ.2) MJOFF=1
                IF (IFACE.EQ.3) MKOFF=1
        DO IPHASE=1,2
           IF(IPHASE.EQ.1) VISC_PHASE = OILVIS
           IF(IPHASE.EQ.2) VISC_PHASE = WATVIS
        DO K=KL1,KL2+MKOFF
           IF (K.EQ.KL1)THEN
              JL1=JL1V(K)
              JLP=JL2V(K)+MJOFF
           ELSE IF( K.LE.KL2) THEN
              JL1=MIN( JL1V(K-1) , JL1V(K) )
              JLP=MAX(JL2V(K-1), JL2V(K))+MJOFF
           ELSE
              JL1=JL1V(KL2)
              JLP=JL2V(KL2)
           ENDIF
        DO J=JL1,JLP
        DO I=IL1,IL2+MIOFF

                I1=I-MIOFF
                J1=J-MJOFF
                K1=K-MKOFF

                MKEY=KEYOUT(I,J,K)
                MKEY1=KEYOUT(I1,J1,K1)

                VEL(I,J,K,IPHASE,IFACE)=0.D0
        
C       INNER FACE
                IF(MKEY.EQ.1.AND.MKEY1.EQ.1) GO TO 4
C       GHOST FACE
                IF ( ( (MKEY.EQ.-1).AND.(MKEY1.EQ.1) ).OR.
     &               ( (MKEY.EQ.1).AND.(MKEY1.EQ.-1) ) ) GO TO 4
C       BDARY FACE: THESE ARE SET TO ZERO AND RECOMPUTED
C       BY BC_VELCOMP
                IF ( (MKEY.EQ.0.AND.MKEY1.EQ.1) .OR. 
     &               (MKEY.EQ.1.AND.MKEY1.EQ.0) )   GO TO 1
C       ELSE: DO NOT COMPUTE 
                GO TO 1
                
C --------------------------
C
C BEGINNING OF ACTUAL COMPUTATION FOR VELOCITY (I,J,K) 
C
C----------------------------
 4              CONTINUE

C DD IS THE DIFFERENCE IN DEPTHS

                DD=(DEPTH(I,J,K)-DEPTH(I1,J1,K1))*G2

C  DP IS DIFFERENCE  OF PRESSURES
C  DP=PPHASE2-PPHASE1
    
                IF (IPHASE.EQ.1) DP=POIL(I,J,K)-POIL(I1,J1,K1)
                IF (IPHASE.EQ.2) DP=PWAT(I,J,K)-PWAT(I1,J1,K1)

                DGRAV=0.D0      

                DENS1=DDENS(I1,J1,K1,IPHASE)
                DENS2=DDENS(I,J,K,IPHASE)
                DGRAV=DD*(DENS1+DENS2)
                DP=DP-DGRAV
                
                DX=DXREC(I+IOFF,NBLK) 
                DY=DYREC(J+JOFF,NBLK)
                DZ=DZREC(K+KOFF,NBLK)

                DP = DP / VISC_PHASE

                IF(IFACE.EQ.1) DP=DP*TCOFX(I,J,K)
                IF(IFACE.EQ.2) DP=DP*TCOFY(I,J,K)
                IF(IFACE.EQ.3) DP=DP*TCOFZ(I,J,K)

C COMPUTE VEL=GRADIENT MULTIPLIED BY LAMBDA USING UPWINDED MOBILITIES

                IF (DP.LT.0.D0) THEN
                   SW=SWAT(I1,J1,K1)
                   L=KROCK(I1,J1,K1)
                ELSE
                   SW=SWAT(I,J,K)
                   L=KROCK(I,J,K)
                ENDIF
                IF(IPHASE.EQ.1)
     &               CALL LOOKUP(NKOSW(L),SW,REL,DREL)
                IF(IPHASE.EQ.2)
     &               CALL LOOKUP(NKWSW(L),SW,REL,DREL)

                VEL(I,J,K,IPHASE,IFACE)=-DP*REL

   1    CONTINUE 

        ENDDO
        ENDDO
        ENDDO
        ENDDO
        ENDDO
C ----------------------------------------------
C END COMPUTATION
C ----------------------------------------------

   3    CONTINUE
        RETURN
        END

C****************************************************************
      SUBROUTINE H2BDTRVEL(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &           KL2,KEYOUT,NBLK,VEL)
C********************************************************************
C COPIES BDARY FLUXES TO VELOCITIES ARRAY
C********************************************************************
      IMPLICIT NONE
$POWER       INCLUDE 'msjunk.h'
      INCLUDE 'boundary.h'

      INTEGER I, J, K, IL1, IL2, JL1, JL2, KL1, KL2
      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8  VEL(IDIM,JDIM,KDIM,2,3)

      INTEGER IV,JV,KV,IS,JS,KS,ILR,NDIR,IB,NFOFF,NT,ND,L
C ----------------------------------------------------------

      IF (NBND_REG.EQ.0.OR.NBEL.EQ.0) RETURN

C  LOOP OVER THE BDARY CONDITION REGIONS

      DO 1 IB=1,NBND_REG

         NT=NBND_TYPE(IB)
         IF(NT.EQ.0) GOTO 1
         IF(NBLK.EQ.1.AND.IB.EQ.1) NFOFF=1
         IF(NBLK.GT.1.AND.IB.EQ.1) NFOFF=LOFFBND(NBND_REG,NBLK-1)+1
         IF(IB.NE.1) NFOFF=LOFFBND(IB-1,NBLK)+1

C LOOP OVER ALL BDARY ELEMENTS IN THIS REGION

         DO 2 L=NFOFF,LOFFBND(IB,NBLK)
            I = LOCBND(1,L)
            J = LOCBND(2,L)
            K = LOCBND(3,L)

            NDIR = LOCBND(4,L)
            ND = (NDIR+1) / 2

            CALL GETSOURCEINDEX(NDIR,I,J,K,IS,JS,KS,IV,JV,KV,ILR)

            VEL(IV,JV,KV,1,ND) = BFLUX(1,L)
            VEL(IV,JV,KV,2,ND) = BFLUX(2,L)

 2       CONTINUE
 1    CONTINUE

      RETURN
      END
