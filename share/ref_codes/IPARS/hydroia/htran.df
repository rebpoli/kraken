C  HTRAN.F - TRANSPORT EVALUATION FOR DIAGONAL TENSOR PERMEABILITY

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE HTRAN(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C     &  KEYOUT,NBLK,POIL,PWAT,DUNK,RELPRM,DPCSW,COF,
C     &  RESID,DEPTH,TCOFX,TCOFY,TCOFZ)

C  SUBROUTINE HCOND(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C     &                   KEYOUT,NBLK,PV,DDENS,COIL,CWAT,COF,RESID,HCOF,
C     &                   HRESID)

C  SUBROUTINE HFLOW(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C     &                 KEYOUT,NBLK,COF,RESID,DUNK,COIL,CWAT,
C     &                 PV,CR,DELC)

C  SUBROUTINE HUPCONC(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
C     &                  KL1,KL2,KEYOUT,NBLK,COIL,CWAT,DELC,PV,PVOLD)

C  CODE HISTORY:

C  JOHN WHEELER     5/10/97    PORT ROUTINES FROM PIERS
C  GURPREET SINGH   10/16      TWO PHASE IMPLICIT BRICKS (APPOX JACOBIAN)

C*********************************************************************
      SUBROUTINE HTRAN(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                   KEYOUT,NBLK,POIL,PWAT,DUNK,RELPRM,DPCSW,COF,
     &                   RESID,DEPTH,TCOFX,TCOFY,TCOFZ)
C*********************************************************************

C  POIL(I,J,K) = OIL PRESSURE, PSI (INPUT, REAL*8)

C  PWAT(I,J,K) = WATER PRESSURE, PSI (INPUT, REAL*8)

C  DUNK(I,J,K,1) = OIL DENSITY, LB/CU-FT (INPUT, REAL*8)
C  DUNK(I,J,K,2) = WATER DENSITY, LB/CU-FT (INPUT, REAL*8)

C  RELPRM(I,J,K,L) = RELATIVE PERMEABILITY DATA (INPUT, REAL*8)

C  DPCSW(I,J,K) = DERIVATIVE OF Pc WRT Sw, PSI (INPUT, REAL*8)

C  COF(I,J,K,7,L) = JACOBIAN COEFFICIENTS (INPUT AND OUTPUT, REAL*4)

C  RESID(I,J,K,L)= RESIDUALS (INPUT AND OUTPUT, REAL*8)

C  DEPTH(I,J,K) = ELEMENT CENTER DEPTH, FT (INPUT, REAL*8)

C  TCOFX,Y,Z(I,J,K) = X,Y,Z TRANSMISIBILITY CONSTANT, CU-FT CP/PSI DAT
C  (INPUT, REAL*8)

C*********************************************************************
      IMPLICIT NONE

      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INCLUDE 'hfluids.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM)
     &      ,KL1,KL2,NBLK,KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 POIL(IDIM,JDIM,KDIM),DEPTH(IDIM,JDIM,KDIM)
     &      ,PWAT(IDIM,JDIM,KDIM),DUNK(IDIM,JDIM,KDIM,2)
     &      ,DPCSW(IDIM,JDIM,KDIM),RELPRM(IDIM,JDIM,KDIM,4)
     &      ,RESID(IDIM,JDIM,KDIM,2)
     &      ,TCOFX(IDIM,JDIM,KDIM),TCOFY(IDIM,JDIM,KDIM)
     &      ,TCOFZ(IDIM,JDIM,KDIM)

      REAL*4 COF(IDIM,JDIM,KDIM,$NUMCOF,2)
 
      INTEGER I,J,K,JL1,JL2,IL2P,JL2P,KL2P
 
C  LOCAL DUMMY VARIABLES
      
      REAL*8 G2,TVW,TVO,DOP,DWP,DD,DUB1,DUB2,DUB3

C IPH = 1 (OIL) , 2 (WATER)

      G2=.5D0*GRAV
      TVW=DELTIM/WATVIS
      TVO=DELTIM/OILVIS

C X DIRECTION TRANSPORT

      IL2P = IL2+1
      DO K = KL1,KL2+1
      JL1 = JL1V(K)
      JL2 = JL2V(K)
      DO J = JL1,JL2
      DO I = IL1,IL2P

      IF (TCOFX(I,J,K).NE.0.D0) THEN
         DD=(DEPTH(I,J,K)-DEPTH(I-1,J,K))*G2

C  OIL EQUATION, X TRANSPORT AT I - 1/2

         DOP=POIL(I,J,K)-POIL(I-1,J,K)-(DUNK(I,J,K,1)+DUNK(I-1,J,K,1))
     &       *DD
         DUB1=TVO*TCOFX(I,J,K)
         IF (DOP.LT.0.0D0) THEN
            DUB2=DUB1*RELPRM(I-1,J,K,1)*DUNK(I-1,J,K,1)
         ELSE
            DUB2=DUB1*RELPRM(I,J,K,1)*DUNK(I,J,K,1)
         ENDIF
         DUB3=DUB2*DOP
         IF (KEYOUT(I,J,K).GT.0) THEN
            COF(I,J,K,2,1)=-DUB2
            COF(I,J,K,1,1)=COF(I,J,K,1,1)+DUB2
            RESID(I,J,K,1)=RESID(I,J,K,1)+DUB3
         ENDIF
         IF (KEYOUT(I-1,J,K).GT.0) THEN
            COF(I-1,J,K,3,1)=-DUB2
            COF(I-1,J,K,1,1)=COF(I-1,J,K,1,1)+DUB2
            RESID(I-1,J,K,1)=RESID(I-1,J,K,1)-DUB3
         ENDIF

C  WATER EQUATION, X TRANSPORT AT I - 1/2

         DWP=PWAT(I,J,K)-PWAT(I-1,J,K)-(DUNK(I,J,K,2)+DUNK(I-1,J,K,2))
     &       *DD
         DUB1=TVW*TCOFX(I,J,K)
         IF (DWP.LT.0.0D0) THEN
            DUB2=DUB1*RELPRM(I-1,J,K,3)*DUNK(I-1,J,K,2)
         ELSE
            DUB2=DUB1*RELPRM(I,J,K,3)*DUNK(I,J,K,2)
         ENDIF
         DUB3=DUB2*DWP
         IF (KEYOUT(I,J,K).GT.0) THEN
            COF(I,J,K,2,2)=-DUB2
            COF(I,J,K,1,2)=COF(I,J,K,1,2)+DUB2
            RESID(I,J,K,2)=RESID(I,J,K,2)+DUB3
         ENDIF
         IF (KEYOUT(I-1,J,K).GT.0) THEN
            COF(I-1,J,K,3,2)=-DUB2
            COF(I-1,J,K,1,2)=COF(I-1,J,K,1,2)+DUB2
            RESID(I-1,J,K,2)=RESID(I-1,J,K,2)-DUB3
         ENDIF

      ELSE

C  NO X TRANSPORT AT I - 1/2

         IF (KEYOUT(I,J,K).GT.0) THEN
            COF(I,J,K,2,1)=0.
            COF(I,J,K,2,2)=0.
         ENDIF
         IF (I.GT.1) THEN
            COF(I-1,J,K,3,1)=0.
            COF(I-1,J,K,3,2)=0.
         ENDIF

      ENDIF
        
      ENDDO
      ENDDO
      ENDDO

C  Y DIRECTION TRANSPORT

      DO K=KL1,KL2
      JL1=JL1V(K)
      JL2P=JL2V(K)+1
      DO J=JL1,JL2P
      DO I=IL1,IL2

      IF (TCOFY(I,J,K).NE.0.D0) THEN
         DD=(DEPTH(I,J,K)-DEPTH(I,J-1,K))*G2
    
C  OIL EQUATION, Y TRANSPORT AT J - 1/2

         DOP=POIL(I,J,K)-POIL(I,J-1,K)-(DUNK(I,J,K,1)+DUNK(I,J-1,K,1))
     &       *DD
         DUB1=TVO*TCOFY(I,J,K)
         IF (DOP.LT.0.0D0) THEN
            DUB2=DUB1*RELPRM(I,J-1,K,1)*DUNK(I,J-1,K,1)
         ELSE
            DUB2=DUB1*RELPRM(I,J,K,1)*DUNK(I,J,K,1)
         ENDIF
         DUB3=DUB2*DOP
         IF (KEYOUT(I,J,K).GT.0) THEN
            COF(I,J,K,4,1)=-DUB2
            COF(I,J,K,1,1)=COF(I,J,K,1,1)+DUB2
            RESID(I,J,K,1)=RESID(I,J,K,1)+DUB3
         ENDIF
         IF (KEYOUT(I,J-1,K).GT.0) THEN
            COF(I,J-1,K,5,1)=-DUB2
            COF(I,J-1,K,1,1)=COF(I,J-1,K,1,1)+DUB2
            RESID(I,J-1,K,1)=RESID(I,J-1,K,1)-DUB3
         ENDIF

C  WATER EQUATION, Y TRANSPORT AT J - 1/2

         DWP=PWAT(I,J,K)-PWAT(I,J-1,K)-(DUNK(I,J,K,2)+DUNK(I,J-1,K,2))
     &       *DD
         DUB1=TVW*TCOFY(I,J,K)
         IF (DWP.LT.0.0D0) THEN
            DUB2=DUB1*RELPRM(I,J-1,K,3)*DUNK(I,J-1,K,2)
         ELSE
            DUB2=DUB1*RELPRM(I,J,K,3)*DUNK(I,J,K,2)
         ENDIF
         DUB3=DUB2*DWP

         IF (KEYOUT(I,J,K).GT.0) THEN
            COF(I,J,K,4,2)=-DUB2
            COF(I,J,K,1,2)=COF(I,J,K,1,2)+DUB2
            RESID(I,J,K,2)=RESID(I,J,K,2)+DUB3
         ENDIF
         IF (KEYOUT(I,J-1,K).GT.0) THEN
            COF(I,J-1,K,5,2)=-DUB2
            COF(I,J-1,K,1,2)=COF(I,J-1,K,1,2)+DUB2
            RESID(I,J-1,K,2)=RESID(I,J-1,K,2)-DUB3
         ENDIF

      ELSE

C  NO Y TRANSPORT AT J - 1/2

         IF (KEYOUT(I,J,K).GT.0) THEN
            COF(I,J,K,4,1)=0.
            COF(I,J,K,4,2)=0.
         ENDIF
         IF (J.GT.1) THEN
            COF(I,J-1,K,5,1)=0.
            COF(I,J-1,K,5,2)=0.
         ENDIF

      ENDIF

      ENDDO
      ENDDO
      ENDDO

C  Z DIRECTION TRANSPORT

      KL2P=KL2+1
      DO K=KL1,KL2P
      IF ( K .eq. KL1 ) then
         JL1=JL1V(K)
         JL2=JL2V(K)
      ELSE IF (K.LT.KL2P) THEN
         JL1=min( JL1V(K-1) , JL1V(K) )
         JL2=max( JL2V(K-1) , JL2V(K) )
      ELSE
         JL1=JL1V(KL2)
         JL2=JL2V(KL2)
      ENDIF
      DO J=JL1,JL2
      DO I=IL1,IL2

      IF (TCOFZ(I,J,K).NE.0.D0) THEN
         DD=(DEPTH(I,J,K)-DEPTH(I,J,K-1))*G2
    
C  OIL EQUATION, Z TRANSPORT AT K - 1/2

         DOP=POIL(I,J,K)-POIL(I,J,K-1)-(DUNK(I,J,K,1)+DUNK(I,J,K-1,1))
     &       *DD
         DUB1=TVO*TCOFZ(I,J,K)
         IF (DOP.LT.0.0D0) THEN
            DUB2=DUB1*RELPRM(I,J,K-1,1)*DUNK(I,J,K-1,1)
         ELSE
            DUB2=DUB1*RELPRM(I,J,K,1)*DUNK(I,J,K,1)
         ENDIF
         DUB3=DUB2*DOP
         IF (KEYOUT(I,J,K).GT.0) THEN
            COF(I,J,K,6,1)=-DUB2
            COF(I,J,K,1,1)=COF(I,J,K,1,1)+DUB2
            RESID(I,J,K,1)=RESID(I,J,K,1)+DUB3
         ENDIF
         IF (KEYOUT(I,J,K-1).GT.0) THEN
            COF(I,J,K-1,7,1)=-DUB2
            COF(I,J,K-1,1,1)=COF(I,J,K-1,1,1)+DUB2
            RESID(I,J,K-1,1)=RESID(I,J,K-1,1)-DUB3
         ENDIF

C  WATER EQUATION, Z TRANSPORT AT K - 1/2

         DWP=PWAT(I,J,K)-PWAT(I,J,K-1)-(DUNK(I,J,K,2)+DUNK(I,J,K-1,2))
     &       *DD
         DUB1=TVW*TCOFZ(I,J,K)
         IF (DWP.LT.0.0D0) THEN
            DUB2=DUB1*RELPRM(I,J,K-1,3)*DUNK(I,J,K-1,2)
         ELSE
            DUB2=DUB1*RELPRM(I,J,K,3)*DUNK(I,J,K,2)
         ENDIF
         DUB3=DUB2*DWP
         IF (KEYOUT(I,J,K).GT.0) THEN
            COF(I,J,K,6,2)=-DUB2
            COF(I,J,K,1,2)=COF(I,J,K,1,2)+DUB2
            RESID(I,J,K,2)=RESID(I,J,K,2)+DUB3
         ENDIF
         IF (KEYOUT(I,J,K-1).GT.0) THEN
            COF(I,J,K-1,7,2)=-DUB2
            COF(I,J,K-1,1,2)=COF(I,J,K-1,1,2)+DUB2
            RESID(I,J,K-1,2)=RESID(I,J,K-1,2)-DUB3
         ENDIF

      ELSE

C  NO Z TRANSPORT AT K - 1/2

         IF (KEYOUT(I,J,K).GT.0) THEN
            COF(I,J,K,6,1)=0.
            COF(I,J,K,6,2)=0.
         ENDIF
         IF (K.GT.1) THEN
            COF(I,J,K-1,7,1)=0.
            COF(I,J,K-1,7,2)=0.
         ENDIF

      ENDIF

      ENDDO
      ENDDO
      ENDDO

      RETURN
      END


C*********************************************************************
      SUBROUTINE HCOND(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                   KEYOUT,NBLK,PV,DDENS,COIL,CWAT,COF,RESID,HCOF,
     &                   HRESID)
C*********************************************************************
      IMPLICIT NONE

      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM),KL1,
     &        KL2,KEYOUT(IDIM,JDIM,KDIM),NBLK

      REAL*8  HRESID(IDIM,JDIM,KDIM),RESID(IDIM,JDIM,KDIM,2),
     &        PV(IDIM,JDIM,KDIM),COIL(IDIM,JDIM,KDIM),
     &        CWAT(IDIM,JDIM,KDIM),DDENS(IDIM,JDIM,KDIM,2)
      REAL*4  HCOF(IDIM,JDIM,KDIM,7),COF(IDIM,JDIM,KDIM,$NUMCOF,2)
      
C-----------------------------------------------------------------------
C     Local Variables
C-----------------------------------------------------------------------
      INTEGER I,J,K,L,IPH,JL1(KDIM),JL2(KDIM),KL2P,IL2P
      INTEGER MAPPING,M,NPH,IERR

      REAL*8, ALLOCATABLE :: SCAL(:,:,:,:)

      ALLOCATE(SCAL(IDIM,JDIM,KDIM,2),STAT=IERR)
      IF (IERR.NE.0) STOP 'Could not allocate SCAL'
       
C
C IPH = 1 (OIL), 2 (WATER)
C
      NPH = 2

C------initialize HRESID, HCOF and SCAL
      HCOF = 0.D0
      HRESID = 0.D0
      SCAL = 0.D0

      IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)'PROC',MYPRC,
     &  ' ENTERING SUBROUTINE XCOND, OLD TAG =',MSGTAG(2+1)
      IL2P=IL2+1
      KL2P=KL2+1

C-------set up JL1 and JL2 vectors
      JL1(KL1)=JL1V(KL1)
      JL2(KL1)=JL2V(KL1)
      DO K = KL1+1,KL2
         JL1(K)=MIN(JL1V(K-1),JL1V(K))
         JL2(K)=MAX(JL2V(K-1),JL2V(K))
      END DO
      JL1(KL2P)=JL1V(KL2)
      JL2(KL2P)=JL2V(KL2)

C-------scale dstdn by pv, use hresid for storage
      DO K = KL1,KL2
      DO J = JL1V(K),JL2V(K)
      DO I = IL1,IL2
         IF(KEYOUT(I,J,K) > 0) THEN
            HRESID(I,J,K) = 1.D0
            DO IPH = 1,NPH
            SCAL(I,J,K,IPH) = 1/(DDENS(I,J,K,IPH)*PV(I,J,K))
            ENDDO
         ENDIF
      END DO
      END DO
      END DO

C     HRESID = (1-SWAT-SOIL)
      DO K = KL1,KL2
      DO J = JL1V(K),JL2V(K)+1
      DO I = IL1,IL2+1
         IF (KEYOUT(I,J,K)>0) THEN
            HRESID(I,J,K) = HRESID(I,J,K)
     &                      -COIL(I,J,K)/DDENS(I,J,K,1)
     &                      -CWAT(I,J,K)/DDENS(I,J,K,2)
         ENDIF
      ENDDO
      ENDDO
      ENDDO

C-------process phases
      DO K = KL1,KL2
      DO J = JL1V(K),JL2V(K)
      DO I = IL1,IL2P
         IF(KEYOUT(I,J,K) > 0) THEN
            DO IPH =1,NPH
                HRESID(I,J,K) = HRESID(I,J,K)
     &                        + SCAL(I,J,K,IPH)*RESID(I,J,K,IPH)
            DO M = 1,7
                HCOF(I,J,K,M) = HCOF(I,J,K,M) - SCAL(I,J,K,IPH)
     &                          *COF(I,J,K,M,IPH)
            ENDDO
            ENDDO
         ENDIF
      END DO
      END DO
      END DO

      DEALLOCATE(SCAL)

      RETURN
      END

C*********************************************************************
      SUBROUTINE HFLOW(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                 KEYOUT,NBLK,COF,RESID,DUNK,COIL,CWAT,
     &                 PV,CR,DELC)
C*********************************************************************

C Calculates mass flux correction for cells from pressure changes

C  INPUT:
C     RESID(I,J,K,L) = RESIDUAL FOR RIGHT HAND SIDE (REAL*8)
C     COF(I,J,K,L) =  FLOW COEFFICIENT FOR P(I,J,K)
C                     IN (I,J,K,7,L) PHASE MASS CONSERVATION 
C                     EQUATIONS (REAL*4)
C     COIL(I,J,K) = OIL CONCENTRATION (REAL*8)
C     CWAT(I,J,K) = WATER CONCENTRATION (REAL*8)
C     PV(I,J,K) = PORE VOLUME (CU-FT) (REAL*8)
C     CR(I,J,K) = CR X PV0E (CU-FT) (REAL*8)
C     DUNK(I,J,K,1) = PRESSURE CHANGE (REAL*8)

C  OUTPUT:
C     DELC(I,J,K,L) = CHANGE IN PHASE CONCENTRATION (REAL*8)
C     L = 1 (OIL), 2 (WATER)

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'hfluids.h'
C-----------------------------------------------------------------------
C     Dummy Arguments
C-----------------------------------------------------------------------
      INTEGER KL1,KL2,IL1,IL2,IDIM,JDIM,KDIM,NBLK,LDIM,
     &        JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 DUNK(IDIM,JDIM,KDIM),RESID(IDIM,JDIM,KDIM,2),
     &       COIL(IDIM,JDIM,KDIM),
     &       CWAT(IDIM,JDIM,KDIM),PV(IDIM,JDIM,KDIM),
     &       DELC(IDIM,JDIM,KDIM,2),CR(IDIM,JDIM,KDIM)

      REAL*4 COF(IDIM,JDIM,KDIM,$NUMCOF,2)
C-----Local Variables
      INTEGER I,J,K,IPH,NPH
      INTEGER MAP(3,7),I1,J1,K1,M
      DATA MAP /0, 0, 0, -1, 0, 0, 1, 0, 0,
     &    0, -1, 0, 0, 1, 0, 0, 0, -1,
     &    0, 0, 1/

      REAL*8 X

      NPH = 2

      DO K = KL1,KL2
      DO J = JL1V(K),JL2V(K)
      DO I = IL1,IL2
        IF (KEYOUT(I,J,K)>0) THEN
          DELC(I,J,K,1) =-RESID(I,J,K,1)-(COF(I,J,K,1,1)
     &                      -(CR(I,J,K)+OILCMP*PV(I,J,K))*COIL(I,J,K)
     &                       )*DUNK(I,J,K)
          DELC(I,J,K,2) =-RESID(I,J,K,2)-(COF(I,J,K,1,2)
     &                      -(CR(I,J,K)+WATCMP*PV(I,J,K))*CWAT(I,J,K)
     &                      )*DUNK(I,J,K)
          DO M = 2,7
            I1 = I + MAP(1,M)
            J1 = J + MAP(2,M)
            K1 = K + MAP(3,M)
            IF (KEYOUT(I1,J1,K1)==1.OR.KEYOUT(I1,J1,K1)==-1)THEN
               DO IPH = 1,NPH
                  X = COF(I,J,K,M,IPH)
                  DELC(I,J,K,IPH) = DELC(I,J,K,IPH)
     &                              -X*DUNK(I1,J1,K1)
               ENDDO
            ENDIF
          ENDDO
        ENDIF
      ENDDO
      ENDDO
      ENDDO

      RETURN
      END

C*********************************************************************
      SUBROUTINE HUPCONC(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                  KL1,KL2,KEYOUT,NBLK,COIL,CWAT,DELC,PV,PVOLD)
C*********************************************************************

C  Updates phase concentrations for cells.
C  THIS IS A WORK ROUTINE.

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,
     &        JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 COIL(IDIM,JDIM,KDIM),DELC(IDIM,JDIM,KDIM,2),
     &       PVOLD(IDIM,JDIM,KDIM),PV(IDIM,JDIM,KDIM),
     &       CWAT(IDIM,JDIM,KDIM)

      INTEGER I,J,K,NPH,IPH
      REAL*8 X,Y

      NPH = 2

      DO K = KL1,KL2
      DO J = JL1V(K),JL2V(K)
      DO I = IL1,IL2
         IF(KEYOUT(I,J,K) > 0) THEN
C-----Update oil concentration
            X = COIL(I,J,K)
            Y = 1.D0/PV(I,J,K)*(DELC(I,J,K,1)+X*PVOLD(I,J,K))
            COIL(I,J,K) = Y
            DELC(I,J,K,1) = COIL(I,J,K) - X
C-----Update water concentration
            X = CWAT(I,J,K)
            Y = 1.D0/PV(I,J,K)*(DELC(I,J,K,2)+X*PVOLD(I,J,K))
            CWAT(I,J,K) = Y
            DELC(I,J,K,2) = CWAT(I,J,K) - X
         ENDIF
      END DO
      END DO
      END DO

      RETURN
      END

C*********************************************************************
      SUBROUTINE HSCAL(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                  KL1,KL2,KEYOUT,NBLK,COIL,CWAT,FLAG)
C*********************************************************************

C  Checks for overshoot on concentrations.
C  THIS IS A WORK ROUTINE.

C*********************************************************************
      IMPLICIT NONE

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,
     &        JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 COIL(IDIM,JDIM,KDIM),CWAT(IDIM,JDIM,KDIM)

      INTEGER I,J,K,FLAG
      FLAG = 0
      DO K = KL1,KL2
      DO J = JL1V(K),JL2V(K)
      DO I = IL1,IL2
         IF(KEYOUT(I,J,K) > 0) THEN
           IF (COIL(I,J,K)<0.D0.OR.CWAT(I,J,K)<0.D0) THEN
              FLAG = 1
              RETURN
           ENDIF
         ENDIF
      END DO
      END DO
      END DO

      RETURN
      END
