// memman4.c - Memory Management Routines in C, part 4 of 3,
// auxiluary, need only in the case of finnish package

// HISTORY:

// YURI VASSILEVSKI   2/18/00  
// SUNIL G THOMAS     -/--/--   MODS FOR 32-64 BIT CONVERSION, ETC. 

// NOTES:

//   1)  ERROR NUMBERS 461-500 ARE RESERVED FOR MEMORY MANAGEMENT

// Once only declaration of global variables

#include "memory.h"

// ROUTINE DECLARATIONS
FORTSUB  $UPPERalcjac$USAN  (PCHAR varynam, PINT4 ifct, PINT4 jfct, PINT4 kfct,
             PINT4 ijfct, PINT4 ikfct, PINT4 jkfct, PINT4 ijkfct,
             PINT4 arynum, PINT4 err);
FORTSUB  $UPPERalcfix$USAN  (PCHAR varynam, PINT4 nn, PINT4 arynum, PINT4 err);
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
FORTSUB $UPPERalcjac$USAN (PCHAR varynam, PINT4 ifct, PINT4 jfct, PINT4 kfct,
        PINT4 ijfct, PINT4 ikfct, PINT4 jkfct, PINT4 ijkfct,
        PINT4 arynum, PINT4 err)
{
// *******************************************************************

// REAL*8 array creation. The length is ifct*IDIM+jfct*JDIM+kfct*KDIM+
// + ijfct*IDIM*JDIM + ikfct*IDIM*KDIM + jkfct*JDIM*KDIM + ijkfct*IDIM*JDIM*KDIM 
// Call this routine after DIVIDE but
// before any other reference to the array.

// varynam = Array name ($MXANAM charcters max) (must be terminated
// with a blank or [ if longer than $MXANAM charcters (input)

// arynum = Array number (output)

// err = Error number (output)
//     = 0 ==> no error
//     = 464 ==> too many arrays
//     = 462 ==> insufficient memory
//     = 465 ==> invalid data type

// *******************************************************************
int i, na, nb;
int nm;
char *cstring;

cstring = $FCD2CPvarynam$PAREND;
for (na = 0; (na < MAXARY) && (arytyp[na] != 0); na++);
if (na == MAXARY)
   {
   *err = 464;
   return;
   }

aryfrm[na] = 2; //REAL*8
varlen[na] = sizeof(double);

arytyp[na] = 2;
for (i = 0; i < MAXANAM; i++)
   {
   arynam[na][i] = ' ';
   if ((cstring[i] == ' ') || (cstring[i] == '[')) break;
   arynam[na][i] = cstring[i];
   }

// mpesz: terminate the string with "\0" so that it can be handled
// from inside of the C code: strings allocated with MAXANAM+1 length 

 if (MAXANAM > 0) arynam[na][MAXANAM]='\0';
 else { *err = 465;return;	}

 // set the aux. model informnation  
 arymodel[na]=CurrentModel;

 for (nb = 0; nb < numblks; nb++) {

   if ( (CurrentModel==0)               // this array is model indep.
	|| (blkmodel_c[nb] == CurrentModel) // or, it needs to be allocated
					// for the given physical model
					// which is active on this block 
	  ) {
     
     // then allocate it for this block
     if (myelem[nb] > 0)                // of course, if there are any 
       // gridblocks on this processor
	 {
	   nm = *ijkfct * idim[nb] * jdim[nb] * kdim[nb] * varlen[na]
	      + *ijfct * idim[nb] * jdim[nb] * varlen[na]
	      + *ikfct * idim[nb] * kdim[nb] * varlen[na]
	      + *jkfct * jdim[nb] * kdim[nb] * varlen[na]
	      + *ifct * idim[nb] * varlen[na]
	      + *jfct * jdim[nb] * varlen[na]
	      + *kfct * kdim[nb] * varlen[na];
	   if ((aryadd[nb][na] = (PADD) malloc(nm)) == NULL)
	     {
	       *err = 462;
	       return;
	     }
	   /*
	     HCE 1/29/98
	     Experienced some floating point exceptions due to 'NAN' in an
	     allocated grid element array.  The most durable solution is
	     to insure that the allocated memory is initialized to zero.
	   */
	   
	   memset((void*)(aryadd[nb][na]), (int) 0, (size_t) nm );
	   
	 }
   } else  {                                   // set the pointer to zero
           aryadd[nb][na] = NULL;
   }
 }   


 if (numarys <= na) numarys++;
 *arynum = na;
 *err = 0;
 return;
}

FORTSUB $UPPERalcfix$USAN (PCHAR varynam, PINT4 nn, PINT4 arynum, PINT4 err)
{
// *******************************************************************

// REAL*8 array creation. The length is nn
// Call this routine 
// before any other reference to the array.

// varynam = Array name ($MXANAM charcters max) (must be terminated
// with a blank or [ if longer than $MXANAM charcters (input)

// arynum = Array number (output)

// err = Error number (output)
//     = 0 ==> no error
//     = 464 ==> too many arrays
//     = 462 ==> insufficient memory
//     = 465 ==> invalid data type

// *******************************************************************
int i, na, nb;
int nm;
char *cstring;

cstring = $FCD2CPvarynam$PAREND;
for (na = 0; (na < MAXARY) && (arytyp[na] != 0); na++);
if (na == MAXARY)
   {
   *err = 464;
   return;
   }

aryfrm[na] = 2; //REAL*8
varlen[na] = sizeof(double);

arytyp[na] = 2;
for (i = 0; i < MAXANAM; i++)
   {
   arynam[na][i] = ' ';
   if ((cstring[i] == ' ') || (cstring[i] == '[')) break;
   arynam[na][i] = cstring[i];
   }

// mpesz: terminate the string with "\0" so that it can be handled
// from inside of the C code: strings allocated with MAXANAM+1 length 

 if (MAXANAM > 0) arynam[na][MAXANAM]='\0';
 else { *err = 465;return;	}

 // set the aux. model informnation  
 arymodel[na]=CurrentModel;

 for (nb = 0; nb < numblks; nb++) {

   if ( (CurrentModel==0)               // this array is model indep.
	|| (blkmodel_c[nb] == CurrentModel) // or, it needs to be allocated
					// for the given physical model
					// which is active on this block 
	  ) {
     
     // then allocate it for this block
     if (myelem[nb] > 0)                // of course, if there are any 
       // gridblocks on this processor
	 {
	   nm = *(nn+nb) * varlen[na];
	   if ((aryadd[nb][na] = (PADD) malloc(nm)) == NULL)
	     {
	       *err = 462;
	       return;
	     }
	   /*
	     HCE 1/29/98
	     Experienced some floating point exceptions due to 'NAN' in an
	     allocated grid element array.  The most durable solution is
	     to insure that the allocated memory is initialized to zero.
	   */
	   
	   memset((void*)(aryadd[nb][na]), (int) 0, (size_t) nm );
	   
	 }
   } else  {                                   // set the pointer to zero
           aryadd[nb][na] = NULL;
   }
 }   


 if (numarys <= na) numarys++;
 *arynum = na;
 *err = 0;
 return;
}
