// memory.h - Include file for memory management routines in C

// HISTORY:

// JOHN WHEELER       9/10/95   ORIGINAL BETA CODE
// JOHN WHEELER       1/11/97   PORT TO VISUAL C
// JOHN WHEELER       6/10/00   MOVED MACHINE TYPE DEFINITIONS TO ctypes.h
// SUNIL G THOMAS     -/--/--   CHANGES FOR 32 to 64 bit AND VTK VIS  

// INCLUDE FILES

#include <stddef.h>
#include <stdlib.h>  // bag8 : for mac os x...changed malloc.h to stdlib.h
#include <string.h>
#include <stdio.h>
#include "ctypes.h"

// Miscellenous defines

#define MAXBLK   $MXBLKS    // Maximum number of grid blocks
#define MAXPRC   $MXPROC    // Maximum number of processors
#define MAXBNAM  $MXBNAM    // Maximum block name length
#define MAXARY   $MXARYS    // Maximum number of arrays
#define MAXANAM  $MXANAM    // Maximum array name length
#define MAXARG   $MXARGS    // Maximum total number of work routine arguments

#define min(a,b) (((a) < (b)) ? (a) : (b))
#define max(a,b) (((a) > (b)) ? (a) : (b))

// EXTERN CONTROL

#if defined(MEX)
   #undef MEX
   #undef MEQ
#endif
#if defined(MEM_GLOBALS)
   #define MEX
   #define MEQ
   #undef MEM_GLOBALS
#else
   #define MEX extern
#endif

// C DATA FOR MEMORY MANAGEMENT

MEX int  numblks;         // Global number of blocks defined 
MEX int  numprcs;         // Global number of processors defined
MEX int  nxg[MAXBLK];     // Global number of elements in the x direction
MEX int  nyg[MAXBLK];     // Global number of elements in the y direction
MEX int  nzg[MAXBLK];     // Global number of elements in the z direction 
MEX CHAR  blknams[MAXBLK][MAXBNAM]; // Block names

MEX int  mynod;           // Active processor number (mod 0) 
MEX PINT4 n0map;          // Pointer to N0MAP() in LAYOUT.H
MEX PINT4 nymap;          // Pointer to NYMAP() in LAYOUT.H
MEX PINT2 prcmap;         // Pointer to PRCMAP() in LAYOUT.H

MEX int  myelem[MAXBLK];          // Proc local flag for ownership in block
MEX int  prcblk[MAXBLK][MAXPRC];  // Proc global flag for ownership in block 
MEX int  idim[MAXBLK];    // Grid-element array dimensions (min 1) (local)
MEX int  jdim[MAXBLK]; 
MEX int  kdim[MAXBLK];  
MEX int  iloc1[MAXBLK];   // I index limits (local) 
MEX int  iloc2[MAXBLK];   
MEX int  kloc1[MAXBLK];   // K index limits (local)
MEX int  kloc2[MAXBLK];  

MEX PINT4 jloc1[MAXBLK];   // Pointers to J index limits (local)
MEX PINT4 jloc2[MAXBLK];      
MEX PINT4 keyout[MAXBLK];  // Pointers to KEYOUT arrays (local)
MEX int  iofflg[MAXBLK];   // Local to global offsets for myprc
MEX int  jofflg[MAXBLK]; 
MEX int  kofflg[MAXBLK];

MEX int  numarys;          // Number of arrays defined 

MEX int   aryfrm[MAXARY];  // = 1 ==> REAL*4
                           // = 2 ==> REAL*8
                           // = 3 ==> INTEGER
                           // = 4 ==> INTEGER
                           // = 5 ==> LOGICAL
                           // = 6 ==> LOGICAL
MEX int  varlen[MAXARY];   // Array word length
MEX int  dimext[MAXARY];   // Product of extra dimensions (min = 1)
MEX int  arypmod[MAXARY];  // Array physical model (0 ==> framework)
MEX int  arytyp[MAXARY];   // 0 ==> number not used
                           // 1 ==> normal variable
                           // 2 ==> grid-element
                           // 3 ==> grid-refinement
MEX PADD  aryadd[MAXBLK][MAXARY];  // Array addresses
MEX CHAR  arynam[MAXARY][MAXANAM+1]; // Array names

MEX int   arymodel[MAXARY];	// which model this array is allocated for
MEX int   blkmodel_c[MAXBLK];   // which model executes in the current block
				// (copy of BLKMODEL from Fortran code)
MEX int   CurrentModel;		// which model is currently active
				// (copy of Current_Model from Fortarn code)

MEX int  layer[3];         // Number of communication layers
MEX int  dimr;             // Grid-refinement array 1st dimension (min 1)

MEX int   nbcw;            // Current block number for CALLWORK (mod 0)
                           // = -1 if not in a work routine

MEX int  allblk;           // = 0 ==> Call work routine even if processor
                           //         has no elements in the fault block
                           // = 1 ==> Call work routine only if processor
                           //         has elements in the fault block

MEX PINT4 modact;          // Pointer to currently active model number
                           // MODACT in CONTROL.H
MEX PINT4 modblk;          // Pointer to MODBLK(nb) in CONTROL.H
MEX PINT4 fmodblk;         // Pointer to FMODBLK(nb) in CONTROL.H
                           // intended when models such as transport chemistry
                           // or multi-model are driving physical models with 
                           // flow coupled. F and C copies are arrays but the  
                           // implementation is just one integer for whole 
                           // reservoir. 
/* following added by Saumik & Ben Ganis */
MEX PCHAR mblock;          // Pointer to flag MBPOROE
MEX PINT4 simfmfevisvar;   // Pointer to # of single phase flow vis. variables
MEX PINT4 cmfmfevisvar;    // Pointer to # of compositional flow vis. variables
MEX PINT4 porohexvisvar;   // Pointer to # of porohex vis. variables
