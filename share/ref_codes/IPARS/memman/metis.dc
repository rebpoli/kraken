// metis.dc - added the following for metis grid-partitioning
// added by saumik, sept 2015

#define  MEM_GLOBALS
#include "memory.h"

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
FORTSUB $UPPERipmetis$USAN (PINT4 vn0map, PINT4 vnymap, PINT2 vprcmap, 
        PINT4 vn0mapn, PINT2 vprcmapn, PINT4 nelems, PINT4 nnodes,
        PINT4 method, PINT4 objval, PINT4 err)
{
// *******************************************************************
//   CALLING METIS TO PARTITION GRID ELEMENTS
//   NOT DESIGED FOR MULTIMODEL CASES  

//  vn0map, vnymap, vprcmap =  Pointers to N0MAP(), NYMAP(), and PRCMAP()
//  vn0mapn, vprcmapn =  Pointers to N0MAPN() and PRCMAPN()

// err = Error number (output)
//     = 0 ==> No error
//     = 462 ==> Insufficient memory available
// *******************************************************************

#include "metis.h"


int nb, n, ne, j, k, j2g, k2g, nm, nn;
int ii,nnproc,newpc,maxnodepc;
int nodeprc[4][2];

int nparts;
int nvtxs;
int ncon; 
int* xadj;
int* adjncy;
int* part;
idx_t options[METIS_NOPTIONS];

int status;
status=METIS_SetDefaultOptions(options);
if (status!=METIS_OK) goto errem;  

nparts=numprcs;   
//set target number of partitions 

ncon=1;
if (numblks>1) 
   { 
   options[METIS_OPTION_CONTIG]=0; 
//do not enforce contiguous partitions
   }
else  
   {
   options[METIS_OPTION_CONTIG]=1; 
//enforce contiguous partitions
   }

options[METIS_OPTION_OBJTYPE]=METIS_OBJTYPE_CUT; 
//minimize edge-cut 

options[METIS_OPTION_NUMBERING]=0; 
//C program numbering starting from 0

options[METIS_OPTION_UFACTOR]=30; 
//load imbalance factor = 1.03

if (*method==5 || *method==6)
   {

   nm= (*nelems+1)*sizeof(int);
   if ((xadj = (PINT4) malloc(nm)) == NULL) goto errex;

   nm= 8*(*nelems)*sizeof(int);
   if ((adjncy = (PINT4) malloc(nm)) == NULL) goto errex;

   nm= (*nelems)*sizeof(int);
   if ((part = (PINT4) malloc(nm)) == NULL) goto errex;

   }

else if (*method==7)

   {

   nm= (*nnodes+1)*sizeof(int);
   if ((xadj = (PINT4) malloc(nm)) == NULL) goto errex;

   nm= 8*(*nnodes)*sizeof(int);
   if ((adjncy = (PINT4) malloc(nm)) == NULL) goto errex;

   nm= (*nnodes)*sizeof(int);
   if ((part = (PINT4) malloc(nm)) == NULL) goto errex;

   }

// For METHOD==5
// start assembling 7pt element graph info for MeTis
if (*method==5) {
   xadj[0]=0;
   for (nb=0; nb < numblks; nb++) {
       j2g = nyg[nb];
       k2g = nzg[nb];
       for (k = 0; k < k2g; k++) {
          for (j = 0; j < j2g; j++) {
             n = vn0map[nb] + vnymap[nb] * (k + 1)+j;
             if (vprcmap[n] > 0) {
                ne=xadj[vprcmap[n]-1];
                if (j>0) {
                   adjncy[ne]=vprcmap[n-1]-1;
                   ne++; 
                }
                if (j<(j2g-1)) {
                   adjncy[ne]=vprcmap[n+1]-1;
                   ne++; 
                }
                if (k>0) {
                   adjncy[ne]=vprcmap[n-j2g]-1;
                   ne++; 
                }
                if (k<(k2g-1)) {
                   adjncy[ne]=vprcmap[n+j2g]-1;
                   ne++; 
                }
                xadj[vprcmap[n]]=ne;
             }
          }
       }
   }
}

// For METHOD==6
// start assembling 27pt element graph info for MeTis
if (*method==6) {
   xadj[0]=0;
   for (nb=0; nb < numblks; nb++) {
       j2g = nyg[nb];
       k2g = nzg[nb];
       for (k = 0; k < k2g; k++) {
          for (j = 0; j < j2g; j++) {
             n = vn0map[nb] + vnymap[nb] * (k + 1)+j;
             if (vprcmap[n] > 0) {
                ne=xadj[vprcmap[n]-1];
                if (j>0) {
                   adjncy[ne]=vprcmap[n-1]-1;
                   ne++; 
                }
                if (j<(j2g-1)) {
                   adjncy[ne]=vprcmap[n+1]-1;
                   ne++; 
                }
                if (k>0) {
                   adjncy[ne]=vprcmap[n-j2g]-1;
                   ne++; 
                }
                if (k<(k2g-1)) {
                   adjncy[ne]=vprcmap[n+j2g]-1;
                   ne++; 
                }
                if (j>0 && k>0) {
                   adjncy[ne]=vprcmap[n-j2g-1]-1;
                   ne++; 
                }
                if (j<(j2g-1) && k>0) {
                   adjncy[ne]=vprcmap[n-j2g+1]-1;
                   ne++; 
                }
                if (j>0 && k<(k2g-1)) {
                   adjncy[ne]=vprcmap[n+j2g-1]-1;
                   ne++; 
                }
                if (j<(j2g-1) && k<(k2g-1)) {
                   adjncy[ne]=vprcmap[n+j2g+1]-1;
                   ne++; 
                }
                xadj[vprcmap[n]]=ne;
             }
          }
       }
   }
}

// For METHOD==7
// start assembling 27pt node graph info for MeTis
if (*method==7) {
   xadj[0]=0;
   for (nb=0; nb < numblks; nb++) {
       j2g = nyg[nb]+1;
       k2g = nzg[nb]+1;
       for (k = 0; k < k2g; k++) {
          for (j = 0; j < j2g; j++) {
             n = vn0mapn[nb] + (vnymap[nb]+1) * (k + 1)+j;
             if (vprcmapn[n] > 0) {
                ne=xadj[vprcmapn[n]-1];
                if (j>0) {
                   adjncy[ne]=vprcmapn[n-1]-1;
                   ne++; 
                }
                if (j<(j2g-1)) {
                   adjncy[ne]=vprcmapn[n+1]-1;
                   ne++; 
                }
                if (k>0) {
                   adjncy[ne]=vprcmapn[n-j2g]-1;
                   ne++; 
                }
                if (k<(k2g-1)) {
                   adjncy[ne]=vprcmapn[n+j2g]-1;
                   ne++; 
                }
                if (j>0 && k>0) {
                   adjncy[ne]=vprcmapn[n-j2g-1]-1;
                   ne++; 
                }
                if (j<(j2g-1) && k>0) {
                   adjncy[ne]=vprcmapn[n-j2g+1]-1;
                   ne++; 
                }
                if (j>0 && k<(k2g-1)) {
                   adjncy[ne]=vprcmapn[n+j2g-1]-1;
                   ne++; 
                }
                if (j<(j2g-1) && k<(k2g-1)) {
                   adjncy[ne]=vprcmapn[n+j2g+1]-1;
                   ne++; 
                }
                xadj[vprcmapn[n]]=ne;
             }
          }
       }
   }
}

if (*method==5 || *method==6)  
//ELEMENT GRAPH PARTITIONING USING METIS
{
   nvtxs=*nelems;    
}
if (*method==7)  
//NODE GRAPH PARTITIONING USING METIS
{
   nvtxs=*nnodes;    
}

status=METIS_PartGraphKway(&nvtxs,&ncon,xadj,adjncy,NULL,NULL,NULL,
                                &nparts,NULL,NULL,options,objval,part);   

if (status!=METIS_OK) goto errem;

// For METHOD==5 or METHOD==6
// Store element partition info back to vprcmap array
if (*method==5 || *method==6)
   {
   for (nb=0; nb < numblks; nb++)
       {
       j2g = nyg[nb];
       k2g = nzg[nb];
       for (k = 0; k < k2g; k++)
          {
          for (j = 0; j < j2g; j++)
             {
             n = vn0map[nb] + vnymap[nb] * (k + 1)+j;
             if (vprcmap[n] > 0)
                {
                vprcmap[n]=part[vprcmap[n]-1];
                }
             }
          }
       }
   }

// For METHOD==7 
// Store node partition info back to vprcmapn array
if (*method==7)
{
   for (nb=0; nb < numblks; nb++)
   {
       j2g = nyg[nb]+1;
       k2g = nzg[nb]+1;
       for (k = 0; k < k2g; k++)
       {
          for (j = 0; j < j2g; j++)
          {
             n = vn0mapn[nb] + (vnymap[nb]+1) * (k + 1)+j;
             if (vprcmapn[n] > 0)
             {
                vprcmapn[n]=part[vprcmapn[n]-1];
             }
          }
       }
   }
// calculate vprcmap based on vprcmapn 
   for (nb=0; nb < numblks; nb++)
   {
       j2g = nyg[nb];
       k2g = nzg[nb];
       for (k = 0; k < k2g; k++)
       {
          for (j = 0; j < j2g; j++)
          {
             ne = vn0map[nb] + vnymap[nb] * (k + 1)+j;
             if (vprcmap[ne] > 0)
             {
                nnproc=0;  
//# of processors sharing nodes of the element
                for (ii=0;ii<4;ii++)
                {
                    nodeprc[ii][0]=-1;         
                    nodeprc[ii][1]=0;       
                }
//node 1:
                nn=vn0mapn[nb]+(vnymap[nb]+1)*(k + 1)+j;
                newpc=1;
                for (ii=1;ii<=nnproc;ii++)
                {
                    if (nodeprc[ii-1][0]==vprcmapn[nn])
                    {
                       newpc=0;
                       nodeprc[ii-1][1]++;
                    }
                }
                if (newpc==1)
                {
                   nnproc++;
                   nodeprc[nnproc-1][0]=vprcmapn[nn];
                   nodeprc[nnproc-1][1]=1;
                }
//node 2:
                nn=vn0mapn[nb]+(vnymap[nb]+1)*(k + 1)+j+1;
                newpc=1;
                for (ii=1;ii<=nnproc;ii++)
                {
                    if (nodeprc[ii-1][0]==vprcmapn[nn])
                    {
                       newpc=0;
                       nodeprc[ii-1][1]++;
                    }
                }
                if (newpc==1)
                {
                   nnproc++;
                   nodeprc[nnproc-1][0]=vprcmapn[nn];
                   nodeprc[nnproc-1][1]=1;
                }
//node 3:
                nn=vn0mapn[nb]+(vnymap[nb]+1)*(k + 2)+j;
                newpc=1;
                for (ii=1;ii<=nnproc;ii++)
                {
                    if (nodeprc[ii-1][0]==vprcmapn[nn])
                    {
                       newpc=0;
                       nodeprc[ii-1][1]++;
                    }
                }
                if (newpc==1)
                {
                   nnproc++;
                   nodeprc[nnproc-1][0]=vprcmapn[nn];
                   nodeprc[nnproc-1][1]=1;
                }
//node 4:
                nn=vn0mapn[nb]+(vnymap[nb]+1)*(k + 2)+j+1;
                newpc=1;
                for (ii=1;ii<=nnproc;ii++)
                {
                    if (nodeprc[ii-1][0]==vprcmapn[nn])
                    {
                       newpc=0;
                       nodeprc[ii-1][1]++;
                    }
                }
                if (newpc==1)
                {
                   nnproc++;
                   nodeprc[nnproc-1][0]=vprcmapn[nn];
                   nodeprc[nnproc-1][1]=1;
                }
                vprcmap[ne]=nodeprc[0][0];
                maxnodepc=nodeprc[0][1];
                for (ii=2;ii<=nnproc;ii++)
                {
                    if (maxnodepc<nodeprc[ii-1][1])
                    {
                       maxnodepc=nodeprc[ii-1][1];
                       vprcmap[ne]=nodeprc[ii-1][0];
		    }
		}
             }
          }
       }
   }
   
}

// deallocate memory 
free(xadj);
free(adjncy);
free(part);

// Exits

*err = 0;
return;
errex: *err = 462;
errem: *err = 500;  
// MeTis functions return with error
return;
}
