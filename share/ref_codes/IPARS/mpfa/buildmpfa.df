C  BUILDMPFA.F - BUILD ARRAYS FOR MPFA MODELS
C
C  ROUTINES IN THIS MODULE:
C SUBROUTINE MPFA_PERMINV(KERR)
C SUBROUTINE CALCPERMINV(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2,
C              KL1,KL2,KEYOUT,NBLK,XC,YC,ZC,XPERM,YPERM,ZPERM,
C              XYPERM,YZPERM,XZPERM,PERMINV,MPFAQU)
C SUBROUTINE MAPTENSORQUAD(X,G,A,QUADTYPE) 
C SUBROUTINE CENTERJAC(DFC,DF)
C SUBROUTINE GETCORNERLOCAL(PN,I,J,K,PRES,IDIM,JDIM,KDIM,VPROP)
C SUBROUTINE GETDOFINDEX(I,J,K,VOLPROP,FACEPROP,PDIM,VDIM,
C     &        PINDEX,VINDEX)
C SUBROUTINE GETA(A,FDIM,I,J,K,FINDEX,IDIM,JDIM,KDIM,PERMINV,
C SUBROUTINE BUILDA(A,XINDEX,YINDEX,I,J,K,IDIM,JDIM,KDIM,
C     &     PERMINV,VPROP)
C SUBROUTINE CALCA(I,J,K,NF1,NF2,NF3,INDEX,
C     &     PERMINV,IDIM,JDIM,KDIM,A,XINDEX,YINDEX)
C SUBROUTINE GETB(B,FDIM,VDIM,FINDEX,VINDEX)
C SUBROUTINE BUILDB(B,ROWF,COLV)
C SUBROUTINE BUILDFGRAV(FGRAV,RHON,I,J,K,VPROP,FINDEX,
C     &        IDIM,JDIM,KDIM,FDIM,XC,YC,ZC,NBLK)
C SUBROUTINE GETFGRAV(I,J,K,TESTFACE,VPROP,IDIM,JDIM,KDIM,
C     &      RHON,XC,YC,ZC,NBLK,VAL)
C SUBROUTINE CALCFGRAV(I,J,K,NF1,NF2,NF3,NODE,
C     &     IDIM,JDIM,KDIM,RHO,TESTFACE,XC,YC,ZC,NBLK,VAL)
C SUBROUTINE COPYLTRAN(WORK,LTRAN,FDIM,VDIM,FINDEX,VINDEX)
C SUBROUTINE COPYLRHS(WORK,LF,FDIM,FINDEX)
C SUBROUTINE VELLOCALUPDATE(VX,VY,VZ,I,J,K,LTRAN,LAINVF1,P,VPROP,
C     &                          VDIM,FPROP,FDIM,IDIM,JDIM,KDIM,KEYOUT)
C SUBROUTINE STOREVEL(VX,VY,VZ,I,J,K,LOCALVEL,WORKFPROP,
C     &                    IDIM,JDIM,KDIM,KEYOUT)
C SUBROUTINE MPFA_POR_VOL(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,
C     &JL2V,KL1,KL2,KEYOUT,NBLK,XC,YC,ZC,POR,CR,CRPHI0,PHI0)
C
C======================================================================
      SUBROUTINE MPFA_PERMINV(KERR)
C======================================================================
      IMPLICIT NONE
      include 'blkary.h'
      include 'mpfaary.h'

      INTEGER KERR,IPERMINV(12)
      LOGICAL ONCEONLY
      DATA IPERMINV/12*0/, ONCEONLY/.TRUE./
      EXTERNAL CALCPERMINV

      IF (ONCEONLY) THEN
         ONCEONLY=.FALSE.

         IPERMINV(1)=11
         IPERMINV(2)=N_XC
         IPERMINV(3)=N_YC
         IPERMINV(4)=N_ZC
         IPERMINV(5)=N_XPERM
         IPERMINV(6)=N_YPERM
         IPERMINV(7)=N_ZPERM
         IPERMINV(8)=N_XYPERM
         IPERMINV(9)=N_YZPERM
         IPERMINV(10)=N_XZPERM
         IPERMINV(11)=N_PERMINV
         IPERMINV(12)=N_MPFAQU

      ENDIF

      CALL CALLWORK(CALCPERMINV,IPERMINV)

      RETURN
      END

C======================================================================
      SUBROUTINE CALCPERMINV(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &     KL1,KL2,KEYOUT,NBLK,XC,YC,ZC,XPERM,YPERM,ZPERM,XYPERM,
     &     YZPERM,XZPERM,PERMINV,MPFAQU)
C======================================================================
      IMPLICIT NONE
      INCLUDE 'layout.h'
C
C
C PERMINV(I,J,K,:,:) = 1/DETB B^T K^{-1} B
C
C
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),
     &     JL2V(KDIM),KL1,KL2,KEYOUT(IDIM,JDIM,KDIM),NBLK,
     &     MPFAQU(IDIM,JDIM,KDIM)
      REAL*8  XC(IDIM+1,JDIM+1,KDIM+1),YC(IDIM+1,JDIM+1,KDIM+1),
     &        ZC(IDIM+1,JDIM+1,KDIM+1)
      REAL*4  XPERM(IDIM,JDIM,KDIM),YPERM(IDIM,JDIM,KDIM),
     &        ZPERM(IDIM,JDIM,KDIM),XYPERM(IDIM,JDIM,KDIM),
     &        YZPERM(IDIM,JDIM,KDIM),XZPERM(IDIM,JDIM,KDIM)
      REAL*8  PERMINV(3,3,8,IDIM,JDIM,KDIM)
C
      INTEGER I,J,K,L,M,N,ROW,COL
      INTEGER OFFSET(3,8),II,JJ,KK,IPIV(3),INFO
      DATA OFFSET/0,0,0, 1,0,0, 1,1,0, 0,1,0,
     &            0,0,1, 1,0,1, 1,1,1, 0,1,1/
      REAL*8  PERM(3,3),PERMI(3,3),X(3,8),A(3,3,8)
      REAL*8 CVC

c bag8
      CVC = CONV_FACTOR
     
C
C------------
C  COMPUTE AND STORE INVERSE PERMEABILITY TENSOR
C     IN PARTICULAR, EVALUATE TENSOR AT THE 8 CORNERS OF EACH
C     SUB-CUBE PARAMETERIZED BY (I,J,K) AND STORE INVERSE PERMEABILITY
C     IN BINV (NOTE, BINV INITIALLY CONTAINS CONTRIBUTIONS FROM
C     PERMEABILITY TENSOR; HERE WE REPLACE ENTRIES WITH CORRESPONDING
C     INVERSE PERMEABILITY VALUES)
C

      PERMINV = 0.D0

CGUS FIX TO WORK IN PARALLEL

      DO 100 K=1,KDIM
      DO 100 J=1,JDIM
      DO 100 I=1,IDIM

CGUS FIX TO WORK IN PARALLEL
        IF((KEYOUT(I,J,K).NE.1).AND.(KEYOUT(I,J,K).NE.-1)) CYCLE
        DO 11 N = 1,8
           II = I + OFFSET(1,N)
           JJ = J + OFFSET(2,N)
           KK = K + OFFSET(3,N)
           X(1,N) = XC(II,JJ,KK)
           X(2,N) = YC(II,JJ,KK)
           X(3,N) = ZC(II,JJ,KK)
 11     CONTINUE

! bag8 - fix to allow zero perm in some cells
        IF (XPERM(I,J,K)*YPERM(I,J,K)*ZPERM(I,J,K).EQ.0.D0) CYCLE

        PERM(1,1) = XPERM(I,J,K)
        PERM(2,2) = YPERM(I,J,K)
        PERM(3,3) = ZPERM(I,J,K)
        PERM(2,1) = XYPERM(I,J,K)
        PERM(3,1) = XZPERM(I,J,K)
        PERM(2,3) = YZPERM(I,J,K)
        PERM(1,2) = PERM(2,1)
        PERM(1,3) = PERM(3,1)
        PERM(3,2) = PERM(2,3)

CGUS    BLAS ROUTINE FOR INVERSION (PERM^(-1) = PERMI)
        CALL GETEYE(PERMI,3,3)
        CALL DGESV(3,3,PERM,3,IPIV,PERMI,3,INFO)
        IF (INFO.NE.0) THEN 
           WRITE(*,*)'CALCPERMINV: ERROR BLAS CANNOT INVERT PERM^(-1)'
           STOP
        ENDIF

        CALL MAPTENSORQUAD(X,PERMI,A,MPFAQU(I,J,K))

        DO 12 M=1,8
        DO 12 COL=1,3
        DO 12 ROW=1,3
           PERMINV(ROW,COL,M,I,J,K)=A(ROW,COL,M)
 12     CONTINUE

 100  CONTINUE

      PERMINV=PERMINV/CVC

      RETURN
      END

C======================================================================
      SUBROUTINE UPDATE_MPFA_FRAMEWORK (KERR)
C======================================================================
C bag8, gus : use bin wangs update for XC,YC,ZC using PERMINV as buffer
      IMPLICIT NONE
      include 'control.h' ! SAUMIK,BGANIS
      include 'blkary.h'
      include 'mpfaary.h'

      INTEGER KERR,JZERO(4),JUPDATE(5)
      LOGICAL ONCEONLY
      DATA JZERO/4*0/, JUPDATE/5*0/, ONCEONLY/.TRUE./
      EXTERNAL SETARYR8N,COORD2PERM,PERM2COORD

      IF (ONCEONLY) THEN
         ONCEONLY=.FALSE.

         JZERO(1)=3
         JZERO(2)=N_PERMINV
         JZERO(3)=N_R8U
         JZERO(4)=N_I4U
   
         JUPDATE(1)=4
         JUPDATE(2)=N_PERMINV
         JUPDATE(3)=N_XC
         JUPDATE(4)=N_YC
         JUPDATE(5)=N_ZC

      ENDIF

      CALL UPDATE(N_XPERM,2)
      CALL UPDATE(N_YPERM,2)
      CALL UPDATE(N_ZPERM,2)

$SIMFMFE      MODACT=$TMMODEL
$CMFMFE      MODACT=$XMMODEL
      ! SAUMIK,BGANIS
      ! SINCE OFF DIAGONAL PERM IS DEFINED ONLY FOR FLOW BLOCK
      CALL UPDATE(N_XYPERM,2)
      CALL UPDATE(N_YZPERM,2)
      CALL UPDATE(N_XZPERM,2)

      MODACT=0 ! SAUMIK,BGANIS

!BW PERMINV USED AS A TEMPORARY SPACE TO UPDATE N_XC, ETC
!   SO THAT N_XC, ETC INFORMATION IS COMPLETE FOR GHOST ELEMENTS
!   THEREFORE, NO NEED TO UPDATE N_PERMINV
      R8UTIL = 0.D0
      I4UTIL = 72
      CALL CALLWORK(SETARYR8N,JZERO)
      CALL CALLWORK(COORD2PERM,JUPDATE)
! Requires stencil 2 because XC,YZ,ZC is corner point
! saumik - 02/15/17 - the argument ``2`` is only to specify real*8 
      CALL UPDATE(N_PERMINV,2)
      CALL CALLWORK(PERM2COORD,JUPDATE)

      RETURN
      END


C======================================================================
      SUBROUTINE COORD2PERM(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &     KL1,KL2,KEYOUT,NBLK,PERMINV,XC,YC,ZC)
C======================================================================
      IMPLICIT NONE

      INCLUDE 'control.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),
     &     JL2V(KDIM),KL1,KL2,KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*8  XC(IDIM+1,JDIM+1,KDIM+1),YC(IDIM+1,JDIM+1,KDIM+1),
     &        ZC(IDIM+1,JDIM+1,KDIM+1)
      REAL*8  PERMINV(IDIM,JDIM,KDIM,3,3,8)
      INTEGER I,J,K,NODE,II,JJ,KK,OFFSET(3,8)
      DATA OFFSET/0,0,0, 1,0,0, 1,1,0, 0,1,0,
     &            0,0,1, 1,0,1, 1,1,1, 0,1,1/

      DO K=1,KDIM
         DO J=1,JDIM
            DO I=1,IDIM
               IF (KEYOUT(I,J,K).NE.1) CYCLE
               DO NODE=1,8
                  II=I+OFFSET(1,NODE) 
                  JJ=J+OFFSET(2,NODE) 
                  KK=K+OFFSET(3,NODE)
                  PERMINV(I,J,K,1,1,NODE)=XC(II,JJ,KK) 
                  PERMINV(I,J,K,1,2,NODE)=YC(II,JJ,KK) 
                  PERMINV(I,J,K,1,3,NODE)=ZC(II,JJ,KK) 
               ENDDO
            ENDDO
         ENDDO
      ENDDO

      END

C======================================================================
      SUBROUTINE PERM2COORD(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &     KL1,KL2,KEYOUT,NBLK,PERMINV,XC,YC,ZC)
C======================================================================
      IMPLICIT NONE

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),
     &     JL2V(KDIM),KL1,KL2,KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*8  XC(IDIM+1,JDIM+1,KDIM+1),YC(IDIM+1,JDIM+1,KDIM+1),
     &        ZC(IDIM+1,JDIM+1,KDIM+1),PERMINV(IDIM,JDIM,KDIM,3,3,8)
      INTEGER I,J,K,NODE,II,JJ,KK,OFFSET(3,8)
      REAL*8  P1,P2
      DATA OFFSET/0,0,0, 1,0,0, 1,1,0, 0,1,0,
     &            0,0,1, 1,0,1, 1,1,1, 0,1,1/

      DO K=1,KDIM
         DO J=1,JDIM
            DO I=1,IDIM
               IF (KEYOUT(I,J,K).NE.1 .AND. KEYOUT(I,J,K).NE.-1) CYCLE
               DO NODE=1,8
                  II=I+OFFSET(1,NODE) 
                  JJ=J+OFFSET(2,NODE) 
                  KK=K+OFFSET(3,NODE)

! bag8 - added this if-statement to fix apparent error with -O3 optimization
                  P1=XC(II,JJ,KK)*YC(II,JJ,KK)*ZC(II,JJ,KK)
                  P2=PERMINV(I,J,K,1,1,NODE)*PERMINV(I,J,K,1,2,NODE)*
     &               PERMINV(I,J,K,1,3,NODE)
                  IF ((P1.EQ.0.D0).AND.(P2.NE.0.D0)) THEN
                    XC(II,JJ,KK)=PERMINV(I,J,K,1,1,NODE)
                    YC(II,JJ,KK)=PERMINV(I,J,K,1,2,NODE)
                    ZC(II,JJ,KK)=PERMINV(I,J,K,1,3,NODE)
                  ENDIF
               ENDDO
            ENDDO
         ENDDO
      ENDDO

      END

C======================================================================
      SUBROUTINE MAPTENSORQUAD(X,G,A,QUADTYPE) 
C======================================================================
      IMPLICIT NONE
C
C  A= 1/DETB B^T G B
C
C
      REAL*8 X(3,8),G(3,3),A(3,3,8)
      INTEGER QUADTYPE
C
      INTEGER NODE, ROW,COL
      REAL*8 HATX(3),JMAT(3,3,8),DETJ,KK(3,3),TEMP(3,3),JMATC(3,3)

      DO 100 NODE = 1,8
         IF (NODE.EQ.1)THEN
            HATX(1)=0.0D0
            HATX(2)=0.0D0
            HATX(3)=0.0D0
         ELSEIF (NODE.EQ.2)THEN
            HATX(1)=1.0D0
            HATX(2)=0.0D0
            HATX(3)=0.0D0
         ELSEIF (NODE.EQ.3)THEN
            HATX(1)=1.0D0
            HATX(2)=1.0D0
            HATX(3)=0.0D0
         ELSEIF (NODE.EQ.4)THEN
            HATX(1)=0.0D0
            HATX(2)=1.0D0
            HATX(3)=0.0D0
         ELSEIF (NODE.EQ.5)THEN
            HATX(1)=0.0D0
            HATX(2)=0.0D0
            HATX(3)=1.0D0
         ELSEIF (NODE.EQ.6)THEN
            HATX(1)=1.0D0
            HATX(2)=0.0D0
            HATX(3)=1.0D0
         ELSEIF (NODE.EQ.7)THEN
            HATX(1)=1.0D0
            HATX(2)=1.0D0
            HATX(3)=1.0D0
         ELSE
            HATX(1)=0.0D0
            HATX(2)=1.0D0
            HATX(3)=1.0D0
         ENDIF

         CALL JACMAT(X,HATX,JMAT(1,1,NODE))
 100  CONTINUE

      IF (QUADTYPE.EQ.2) CALL CENTERJAC(JMATC,JMAT)

      DO 200 NODE = 1,8
         CALL DETMAT(JMAT(1,1,NODE),DETJ)

         DETJ = 1.0/DETJ

C TEMP = G* B
CGUS
C     BLAS ROUTINE FOR MATRIX MULT
            CALL DGEMM('N','N',3,3,3,1.D0,G,3,JMAT(1,1,NODE),3,0.D0,
     &                 TEMP,3)

C TEMP = B^T *G* B
         IF (QUADTYPE.EQ.1) THEN

CGUS     BLAS ROUTINE FOR MATRIX MULT (KK = TRANSPOSE(JMAT(1,1,NODE))*TEMP
            CALL DGEMM('T','N',3,3,3,1.D0,JMAT(1,1,NODE),3,TEMP,3,0.D0,
     &                 KK,3)

         ELSEIF (QUADTYPE.EQ.2) THEN

CGUS     BLAS ROUTINE FOR MATRIX MULT (KK = TRANSPOSE(JMATC)*TEMP
            CALL DGEMM('T','N',3,3,3,1.D0,JMATC,3,TEMP,3,0.D0,
     &                 KK,3)

         ELSE
            WRITE(0,*)'BUILDMPFA.F: INVALID MPFAQU'
            STOP
         ENDIF

C TEMP = 1/DETB B^T G B    
         DO COL = 1,3
         DO ROW = 1,3
            A(ROW,COL,NODE) = KK(ROW,COL)*DETJ
         ENDDO
         ENDDO         
         
 200  CONTINUE

      RETURN
      END

C=======================================================================
      SUBROUTINE CENTERJAC(DFC,DF)
C=======================================================================
      IMPLICIT NONE
C
C FROM CORNER POINT JACOBIAN MATRIX, COMPUTE JACBOAIN MATRIX AT
C CELL CENTER.
C
C
      REAL*8 DFC(3,3),DF(3,3,8)
C
      INTEGER PT,ROW,COL
C

      DO 100 COL = 1,3
      DO 100 ROW = 1,3
         DFC(ROW,COL) = 0.0D0
         DO PT = 1,8
            DFC(ROW,COL) = DFC(ROW,COL) + DF(ROW,COL,PT)
         ENDDO
         DFC(ROW,COL) = 0.125D0*DFC(ROW,COL)
 100  CONTINUE

      RETURN
      END


C======================================================================
      SUBROUTINE GETCORNERLOCAL(PN,I,J,K,PRES,IDIM,JDIM,KDIM,VPROP)      
C======================================================================
      IMPLICIT NONE
      INCLUDE 'mpfaary.h'
C
      INTEGER I,J,K,IDIM,JDIM,KDIM,VPROP(8),IVAL
      REAL*8 PN(8),PRES(IDIM,JDIM,KDIM)
C
C
C P1: (I-1,J-1,K-1)  
C P2: (I  ,J-1,K-1)  
C P3: (I  ,J  ,K-1)  
C P4: (I-1,J  ,K-1)  
C P5: (I-1,J-1,K)
C P6: (I  ,J-1,K)   
C P7: (I  ,J  ,K)
C P8: (I-1,J  ,K)

      PN(:) = 0.D0

! bag8
      IF (.NOT.DO_INTF) THEN
        IVAL=0
      ELSE
        IVAL=5
      ENDIF

      IF (VPROP(1).EQ.IVAL) PN(1) = PRES(I-1,J-1,K-1)  
      IF (VPROP(2).EQ.IVAL) PN(2) = PRES(I  ,J-1,K-1)  
      IF (VPROP(3).EQ.IVAL) PN(3) = PRES(I  ,J  ,K-1)  
      IF (VPROP(4).EQ.IVAL) PN(4) = PRES(I-1,J  ,K-1)  
      IF (VPROP(5).EQ.IVAL) PN(5) = PRES(I-1,J-1,K)
      IF (VPROP(6).EQ.IVAL) PN(6) = PRES(I  ,J-1,K)   
      IF (VPROP(7).EQ.IVAL) PN(7) = PRES(I  ,J  ,K)
      IF (VPROP(8).EQ.IVAL) PN(8) = PRES(I-1,J  ,K)

      RETURN
      END

c======================================================================
      SUBROUTINE getCornerPInv(PINV,I,J,K,PERMINV,IDIM,JDIM,KDIM,VPROP)
c======================================================================
      IMPLICIT NONE
      INCLUDE 'mpfaary.h'
      INTEGER I,J,K,IDIM,JDIM,KDIM,VPROP(8)
      REAL*8 PINV(3,3,8),PERMINV(3,3,8,IDIM,JDIM,KDIM)

      INTEGER ival

      PINV(:,:,:)=0.D0

! bag8
      IF (.NOT.DO_INTF) THEN
        IVAL=0
      ELSE
        IVAL=5
      ENDIF

      IF (VPROP(1).EQ.ival) PINV(:,:,1) = PERMINV(:,:,7,I-1,J-1,K-1)
      IF (VPROP(2).EQ.ival) PINV(:,:,2) = PERMINV(:,:,8,I  ,J-1,K-1)
      IF (VPROP(3).EQ.ival) PINV(:,:,3) = PERMINV(:,:,5,I  ,J  ,K-1)
      IF (VPROP(4).EQ.ival) PINV(:,:,4) = PERMINV(:,:,6,I-1,J  ,K-1)
      IF (VPROP(5).EQ.ival) PINV(:,:,5) = PERMINV(:,:,3,I-1,J-1,K)
      IF (VPROP(6).EQ.ival) PINV(:,:,6) = PERMINV(:,:,4,I  ,J-1,K)
      IF (VPROP(7).EQ.ival) PINV(:,:,7) = PERMINV(:,:,1,I  ,J  ,K)
      IF (VPROP(8).EQ.ival) PINV(:,:,8) = PERMINV(:,:,2,I-1,J  ,K)

      RETURN
      END

c======================================================================
      SUBROUTINE getCornerHex(X,IC,JC,KC,XC,YC,ZC,IDIM,JDIM,KDIM,VPROP)
c======================================================================
      IMPLICIT NONE
      INCLUDE 'mpfaary.h'
      INTEGER IC,JC,KC,IDIM,JDIM,KDIM,VPROP(8)
      REAL*8  X(3,8,8),XC(IDIM+1,JDIM+1,KDIM+1),
     &        YC(IDIM+1,JDIM+1,KDIM+1),ZC(IDIM+1,JDIM+1,KDIM+1)

      INTEGER OFFSET1(3,8),OFFSET2(3,8),II,JJ,KK,I,J,K,N,V

! Offset for cell center to 8 hex vertices
      DATA OFFSET1/0,0,0, 1,0,0, 1,1,0, 0,1,0,
     &             0,0,1, 1,0,1, 1,1,1, 0,1,1/

! Offset for node to 8 surrounding volumes
      DATA OFFSET2/-1,-1,-1,  0,-1,-1,  0, 0,-1, -1, 0,-1,
     &             -1,-1, 0,  0,-1, 0,  0, 0, 0, -1, 0, 0/

      INTEGER IVAL

      X(:,:,:)=0.D0

! bag8
      IF (.NOT.DO_INTF) THEN
        IVAL=0
      ELSE
        IVAL=5
      ENDIF

      DO V=1,8
        IF (VPROP(V).EQ.IVAL) THEN
          I = IC + OFFSET2(1,V)
          J = JC + OFFSET2(2,V)
          K = KC + OFFSET2(3,V)
          DO N = 1,8
            II = I + OFFSET1(1,N)
            JJ = J + OFFSET1(2,N)
            KK = K + OFFSET1(3,N)
            X(1,N,V) = XC(II,JJ,KK)
            X(2,N,V) = YC(II,JJ,KK)
            X(3,N,V) = ZC(II,JJ,KK)
          ENDDO
        ENDIF
      ENDDO

      RETURN
      END

C=====================================================================
      SUBROUTINE GETDOFINDEX(I,J,K,VOLPROP,FACEPROP,PDIM,VDIM,
     &        PINDEX,VINDEX)
C======================================================================
C
C  THIS SUBROUTINE GET PINDEX AND VINDEX FROM VOLPROP AND FACEPROP
C  ASSOCIATED TO VERTEX (I,J,K)
C
C   INPUTS:
C     I,J,K    : VERTEX INDEX (I,J,K)
C     VOLPROP  : VOLUME PROPERTY COUPLED TO VERTEX (I,J,K)
C     FACEPROP : FACE PROPERTY COUPLED TO VERTEX (I,J,K)
C     PDIM      : DIMENSION OF PRESSURE DOF COUPLED TO VERTEX (I,J,K) 
C     VDIM      : DIMENSION OF VEL NON-NEUMAN DOF COUPLED TO 
C                 VERTEX (I,J,K) 
C
C   OUTPUTS:
C     PINDEX    : INDEX OF PRESSURE DOF COUPLED TO VERTEX (I,J,K)
C     VINDEX    : INDEX OF NON-NEUMAN VELOCITY DOF COUPLED TO 
C                 VERTEX (I,J,K)
C
      IMPLICIT NONE
      INCLUDE 'mpfaary.h'
      INTEGER I,J,K,VOLPROP(8),FACEPROP(12),PDIM,VDIM
      INTEGER PINDEX(PDIM),VINDEX(VDIM)
      INTEGER FACEL,VOLM,NUMFACE,NUMVOL

! bag8
      PINDEX(:) = 0
      VINDEX(:) = 0
      IF ((VDIM.EQ.0).OR.(PDIM.EQ.0)) RETURN

! bag8
      IF (.NOT.DO_INTF) THEN

      NUMFACE = 0
      DO FACEL = 1,12
        IF ((FACEPROP(FACEL).EQ.0).OR.
     &      (FACEPROP(FACEL).EQ.BCDIRICHLET).OR.
     &      (FACEPROP(FACEL).EQ.DUALFACE)) THEN
          NUMFACE = NUMFACE + 1
          IF (FACEPROP(FACEL).NE.DUALFACE)
     &      VINDEX(NUMFACE)  = FACEL
        ENDIF
      ENDDO
      
      NUMVOL = 0
      DO VOLM = 1,8
        IF ((VOLPROP(VOLM).EQ.0).OR.(VOLPROP(VOLM).EQ.5)) THEN
          NUMVOL = NUMVOL + 1
          IF (VOLPROP(VOLM).EQ.0)
     &      PINDEX(NUMVOL) = VOLM
        ENDIF
      ENDDO

! bag8
      ELSE    ! DO_INTF = .TRUE.

      NUMFACE = 0
      DO FACEL = 1,12
        IF ((FACEPROP(FACEL).EQ.0).OR.
     &      (FACEPROP(FACEL).EQ.BCDIRICHLET).OR.
     &      (FACEPROP(FACEL).EQ.DUALFACE)) THEN
          NUMFACE = NUMFACE + 1
          VINDEX(NUMFACE) = FACEL
        ENDIF
      ENDDO

      NUMVOL = 0
      DO VOLM = 1,8
        IF ((VOLPROP(VOLM).EQ.0).OR.(VOLPROP(VOLM).EQ.5)) THEN
          NUMVOL = NUMVOL + 1
          PINDEX(NUMVOL) = VOLM
        ENDIF
      ENDDO

      ENDIF

      RETURN
      END

C======================================================================
      SUBROUTINE GETA(A,FDIM,I,J,K,FINDEX,IDIM,JDIM,KDIM,PERMINV,
     &                VPROP)
C======================================================================
      IMPLICIT NONE
C
C
      INTEGER FDIM,I,J,K,FINDEX(FDIM),IDIM,JDIM,KDIM,VPROP(8)
      REAL*8 A(FDIM,FDIM),PERMINV(3,3,8,IDIM,JDIM,KDIM)
C
      INTEGER M,L
C
      DO 300 M = 1,FDIM
      DO 300 L = 1,FDIM
         CALL BUILDA(A(L,M),FINDEX(L),FINDEX(M),
     &        I,J,K,IDIM,JDIM,KDIM,PERMINV,VPROP)
 300  CONTINUE

      RETURN
      END

C======================================================================
      SUBROUTINE BUILDA(A,XINDEX,YINDEX,I,J,K,IDIM,JDIM,KDIM,
     &     PERMINV,VPROP)
C======================================================================
      IMPLICIT NONE
      INCLUDE 'mpfaary.h'
C
C     BUILDA COMPUTES THE (XINDEX,YINDEX) ENTRY FOR THE LOCAL
C     CONTRIBUTION OF THE STIFFNESS MATRIX ASSOCIATED WITH THE
C     INNER PRODUCT (K^{-1}U,V)_T,E AND NODE (I,J,K)
C
C
      INTEGER I,J,K,XINDEX,YINDEX,IDIM,JDIM,KDIM,VPROP(8),IVAL
      REAL*8  A,PERMINV(3,3,8,IDIM,JDIM,KDIM)

      A = 0.0D0
C                    NORMAL DIRECTION    QUAD POINT
C                        I  J  K           INDEX 
C P1: (I-1,J-1,K-1)      1  4  5             7
C P2: (I  ,J-1,K-1)      1  2  6             8
C P3: (I  ,J  ,K-1)      3  2  7             5
C P4: (I-1,J  ,K-1)      3  4  8             6
C P5: (I-1,J-1,K)        9  12 5             3
C P6: (I  ,J-1,K)        9  10 6             4
C P7: (I  ,J  ,K)        11 10 7             1 
C P8: (I-1,J  ,K)        11 12 8             2

! bag8
      IF (.NOT.DO_INTF) THEN
        IVAL=0
      ELSE
        IVAL=5
      ENDIF

      IF (VPROP(1).EQ.IVAL)  CALL CALCA(I-1,J-1,K-1, 1,4,5, 7,
     &        PERMINV,IDIM,JDIM,KDIM,A,XINDEX,YINDEX)
                 
      IF (VPROP(2).EQ.IVAL)  CALL CALCA(I,J-1,K-1, 1,2,6, 8,
     &        PERMINV,IDIM,JDIM,KDIM,A,XINDEX,YINDEX)
      
      IF (VPROP(3).EQ.IVAL)  CALL CALCA(I,J,K-1, 3,2,7, 5,
     &        PERMINV,IDIM,JDIM,KDIM,A,XINDEX,YINDEX)
      
      IF (VPROP(4).EQ.IVAL)  CALL CALCA(I-1,J,K-1, 3,4,8, 6,
     &        PERMINV,IDIM,JDIM,KDIM,A,XINDEX,YINDEX)
      
      IF (VPROP(5).EQ.IVAL)  CALL CALCA(I-1,J-1,K, 9,12,5, 3,
     &        PERMINV,IDIM,JDIM,KDIM,A,XINDEX,YINDEX)
      
      IF (VPROP(6).EQ.IVAL)  CALL CALCA(I,J-1,K, 9,10,6, 4,
     &        PERMINV,IDIM,JDIM,KDIM,A,XINDEX,YINDEX)
      
      IF (VPROP(7).EQ.IVAL)  CALL CALCA(I,J,K, 11,10,7, 1,
     &        PERMINV,IDIM,JDIM,KDIM,A,XINDEX,YINDEX)
      
      IF (VPROP(8).EQ.IVAL)  CALL CALCA(I-1,J,K, 11,12,8, 2,
     &        PERMINV,IDIM,JDIM,KDIM,A,XINDEX,YINDEX)

      RETURN
      END


C======================================================================
      SUBROUTINE CALCA(I,J,K,NF1,NF2,NF3,INDEX,
     &     PERMINV,IDIM,JDIM,KDIM,A,XINDEX,YINDEX)
C======================================================================
      IMPLICIT NONE
C
C
      INTEGER I,J,K,NF1,NF2,NF3,INDEX,IDIM,JDIM,KDIM,XINDEX,YINDEX
      REAL*8 PERMINV(3,3,8,IDIM,JDIM,KDIM),A
C
      REAL*8 INTFACTOR
C
      INTFACTOR = 0.125D0

      IF (XINDEX.EQ.NF1) THEN
         IF (YINDEX.EQ.NF1)THEN
            A = A + PERMINV(1,1,INDEX,I,J,K)*INTFACTOR      
         ELSEIF (YINDEX.EQ.NF2)THEN
            A = PERMINV(1,2,INDEX,I,J,K)*INTFACTOR
         ELSEIF (YINDEX.EQ.NF3)THEN
            A = PERMINV(1,3,INDEX,I,J,K)*INTFACTOR
         ENDIF
      ELSEIF (XINDEX.EQ.NF2)THEN
         IF (YINDEX.EQ.NF1)THEN
            A = PERMINV(2,1,INDEX,I,J,K)*INTFACTOR
         ELSEIF (YINDEX.EQ.NF2)THEN
            A = A + PERMINV(2,2,INDEX,I,J,K)*INTFACTOR
         ELSEIF (YINDEX.EQ.NF3)THEN
            A = PERMINV(2,3,INDEX,I,J,K)*INTFACTOR
         ENDIF
      ELSEIF (XINDEX.EQ.NF3)THEN
         IF (YINDEX.EQ.NF1)THEN
            A = PERMINV(3,1,INDEX,I,J,K)*INTFACTOR
         ELSEIF (YINDEX.EQ.NF2)THEN
            A = PERMINV(3,2,INDEX,I,J,K)*INTFACTOR
         ELSEIF (YINDEX.EQ.NF3)THEN
            A = A + PERMINV(3,3,INDEX,I,J,K)*INTFACTOR
         ENDIF
      ENDIF

      RETURN 
      END
C======================================================================
      SUBROUTINE GETB(B,FDIM,VDIM,FINDEX,VINDEX)
C======================================================================
      IMPLICIT NONE
C
C
      INTEGER FDIM,VDIM,FINDEX(FDIM),VINDEX(VDIM)
      REAL*8 B(FDIM,VDIM)
C
      INTEGER L,M
C    
      DO 400 L = 1,VDIM
      DO 400 M = 1,FDIM
         CALL BUILDB(B(M,L),FINDEX(M),VINDEX(L))
 400  CONTINUE

      RETURN
      END



C======================================================================
      SUBROUTINE BUILDB(B,ROWF,COLV)
C======================================================================
      IMPLICIT NONE
C
C     BUILDB COMPUTES THE (ROWF,COLV) ENTRY FOR THE LOCAL
C     CONTRIBUTION OF THE PRESSURE DIFFERENCE MATRIX ASSOCIATED WITH
C     THE INNER PRODUCT (DIV V,Q)_E AND NODE (I,J,K) (TRAPEZOIDAL
C     QUADRATURE USED TO COMPUTE INT_DE{ V.N }
C
C
      INTEGER COLV,ROWF,I,J,K
      REAL*8  B
C
      REAL*8 INTFACTOR

C     INTFACTOR IS THE INTEGRATING FACTOR THAT ARISES IN THE TRAPEZOIDAL
C     QUADRATURE RULE TO APPROXIMATE THE INNER PRODUCT USE TO FORM B

      INTFACTOR = 0.25D0

      B = 0.0D0

C     (DIV V1, P) = 1/4 (P1-P2)|F1|
C
C FACES 1, 3, 11, 9 FOLLOW COUNTER CLOCK WISE DIRECTION Y-Z PLANE
C
      IF (ROWF.EQ.1)THEN
         IF (COLV.EQ.1) B =  INTFACTOR
         IF (COLV.EQ.2) B = -INTFACTOR
C
      ELSEIF (ROWF.EQ.3) THEN
         IF (COLV.EQ.4) B =  INTFACTOR
         IF (COLV.EQ.3) B = -INTFACTOR
C
      ELSEIF (ROWF.EQ.11) THEN
         IF (COLV.EQ.8) B =  INTFACTOR
         IF (COLV.EQ.7) B = -INTFACTOR
C
      ELSEIF (ROWF.EQ.9) THEN
         IF (COLV.EQ.5) B =  INTFACTOR
         IF (COLV.EQ.6) B = -INTFACTOR
C
C FACES 4, 2, 10, 12 FOLLOW COUNTER CLOCK WISE DIRECTION X-Z PLANE
C
      ELSEIF (ROWF.EQ.4) THEN
         IF (COLV.EQ.1) B =  INTFACTOR
         IF (COLV.EQ.4) B = -INTFACTOR
C
      ELSEIF (ROWF.EQ.2) THEN
         IF (COLV.EQ.2) B =  INTFACTOR
         IF (COLV.EQ.3) B = -INTFACTOR
C
      ELSEIF (ROWF.EQ.10) THEN
         IF (COLV.EQ.6) B =  INTFACTOR
         IF (COLV.EQ.7) B = -INTFACTOR
C
      ELSEIF (ROWF.EQ.12) THEN
         IF (COLV.EQ.5) B =  INTFACTOR
         IF (COLV.EQ.8) B = -INTFACTOR
C
C FACES 5, 6, 7, 8 FOLLOW COUNTER CLOCK WISE DIRECTION X-Y PLANE
C
      ELSEIF (ROWF.EQ.5) THEN
         IF (COLV.EQ.1) B =  INTFACTOR
         IF (COLV.EQ.5) B = -INTFACTOR
C
      ELSEIF (ROWF.EQ.6) THEN
         IF (COLV.EQ.2) B =  INTFACTOR
         IF (COLV.EQ.6) B = -INTFACTOR
C
      ELSEIF (ROWF.EQ.7) THEN
         IF (COLV.EQ.3) B =  INTFACTOR
         IF (COLV.EQ.7) B = -INTFACTOR
C
      ELSEIF (ROWF.EQ.8) THEN
         IF (COLV.EQ.4) B =  INTFACTOR
         IF (COLV.EQ.8) B = -INTFACTOR
C
      ELSE
         WRITE(0,*)'BUILDMPFA.F: BAD INDEX FOR ROWF'
         STOP
         RETURN
      ENDIF

      RETURN
      END

C======================================================================
      SUBROUTINE BUILDFGRAV(FGRAV,RHON,I,J,K,VPROP,FINDEX,
     &        IDIM,JDIM,KDIM,FDIM,XC,YC,ZC,NBLK)
C====================================================================== 
      IMPLICIT NONE
C
      include 'layout.h'

      INTEGER FDIM,I,J,K,IDIM,JDIM,KDIM,FINDEX(FDIM),VPROP(8),NBLK
      REAL*8 FGRAV(FDIM),RHON(8)
      REAL*8  XC(IDIM+1,JDIM+1,KDIM+1),YC(IDIM+1,JDIM+1,KDIM+1),
     &        ZC(IDIM+1,JDIM+1,KDIM+1)

C
      INTEGER FACEL,FACEM
C
      FGRAV = 0.D0

      IF (GMAG(NBLK).GT.0.0D0) THEN
        DO FACEL = 1, FDIM
          FACEM = FINDEX(FACEL)
          CALL GETFGRAV(I,J,K,FACEM,VPROP,IDIM,JDIM,KDIM,
     &        RHON,XC,YC,ZC,NBLK,FGRAV(FACEL))
        ENDDO

        CALL SCAMULMAT(-1.0D0,FGRAV,FDIM,1)
      ENDIF

      RETURN
      END



C======================================================================
      SUBROUTINE GETFGRAV(I,J,K,TESTFACE,VPROP,IDIM,JDIM,KDIM,
     &      RHON,XC,YC,ZC,NBLK,VAL)
C======================================================================
      IMPLICIT NONE
      INCLUDE 'mpfaary.h'
      INCLUDE 'layout.h'
C
C
      INTEGER I,J,K,TESTFACE,VPROP(8),IDIM,JDIM,KDIM,NBLK,IVAL
      REAL*8  RHON(8),VAL
      REAL*8  XC(IDIM+1,JDIM+1,KDIM+1),YC(IDIM+1,JDIM+1,KDIM+1),
     &        ZC(IDIM+1,JDIM+1,KDIM+1)
C
C                    NORMAL DIRECTION    QUAD POINT
C                        I  J  K           INDEX 
C P1: (I-1,J-1,K-1)      1  4  5             7
C P2: (I  ,J-1,K-1)      1  2  6             8
C P3: (I  ,J  ,K-1)      3  2  7             5
C P4: (I-1,J  ,K-1)      3  4  8             6
C P5: (I-1,J-1,K)        9  12 5             3
C P6: (I  ,J-1,K)        9  10 6             4
C P7: (I  ,J  ,K)        11 10 7             1 
C P8: (I-1,J  ,K)        11 12 8             2
C
      VAL = 0.0D0
      if (GMAG(NBLK).EQ.0.D0) RETURN

! bag8
      IF (.NOT.DO_INTF) THEN
        IVAL=0
      ELSE
        IVAL=5
      ENDIF

      IF (VPROP(1).EQ.IVAL)  CALL CALCFGRAV(I-1,J-1,K-1, 1,4,5, 7,
     &     IDIM,JDIM,KDIM,RHON(1),TESTFACE,XC,YC,ZC,NBLK,VAL)
                 
      IF (VPROP(2).EQ.IVAL)  CALL CALCFGRAV(I,J-1,K-1, 1,2,6, 8,
     &     IDIM,JDIM,KDIM,RHON(2),TESTFACE,XC,YC,ZC,NBLK,VAL)
      
      IF (VPROP(3).EQ.IVAL)  CALL CALCFGRAV(I,J,K-1, 3,2,7, 5,
     &     IDIM,JDIM,KDIM,RHON(3),TESTFACE,XC,YC,ZC,NBLK,VAL)
      
      IF (VPROP(4).EQ.IVAL)  CALL CALCFGRAV(I-1,J,K-1, 3,4,8, 6,
     &     IDIM,JDIM,KDIM,RHON(4),TESTFACE,XC,YC,ZC,NBLK,VAL)      

      IF (VPROP(5).EQ.IVAL)  CALL CALCFGRAV(I-1,J-1,K, 9,12,5, 3,
     &     IDIM,JDIM,KDIM,RHON(5),TESTFACE,XC,YC,ZC,NBLK,VAL)
      
      IF (VPROP(6).EQ.IVAL)  CALL CALCFGRAV(I,J-1,K, 9,10,6, 4,
     &     IDIM,JDIM,KDIM,RHON(6),TESTFACE,XC,YC,ZC,NBLK,VAL)      

      IF (VPROP(7).EQ.IVAL)  CALL CALCFGRAV(I,J,K, 11,10,7, 1,
     &     IDIM,JDIM,KDIM,RHON(7),TESTFACE,XC,YC,ZC,NBLK,VAL)      

      IF (VPROP(8).EQ.IVAL)  CALL CALCFGRAV(I-1,J,K, 11,12,8, 2,
     &     IDIM,JDIM,KDIM,RHON(8),TESTFACE,XC,YC,ZC,NBLK,VAL)

      RETURN
      END



C======================================================================
      SUBROUTINE CALCFGRAV(I,J,K,NF1,NF2,NF3,NODE,
     &     IDIM,JDIM,KDIM,RHO,TESTFACE,XC,YC,ZC,NBLK,VAL)
C======================================================================
      IMPLICIT NONE
C
      include 'layout.h'
C
C
C (RHO G, V)_E  ~ 1/8 SUM_{I=1}^8 RHO G(R_I) DOT DF \HAT V(\HAT R_I)
C
C
      INTEGER I,J,K,NF1,NF2,NF3,NODE,IDIM,JDIM,KDIM,TESTFACE,NBLK
      REAL*8  RHO,VAL
      REAL*8  XC(IDIM+1,JDIM+1,KDIM+1),YC(IDIM+1,JDIM+1,KDIM+1),
     &        ZC(IDIM+1,JDIM+1,KDIM+1)

C
      INTEGER N
      INTEGER OFFSET(3,8),II,JJ,KK
      DATA OFFSET/0,0,0, 1,0,0, 1,1,0, 0,1,0,
     &            0,0,1, 1,0,1, 1,1,1, 0,1,1/

      REAL*8 INTFACTOR,HATX(3),JMAT(3,3),X(3,8)

C
      INTFACTOR = 0.125D0

      DO 11 N = 1,8
         II = I + OFFSET(1,N)
         JJ = J + OFFSET(2,N)
         KK = K + OFFSET(3,N)
         X(1,N) = XC(II,JJ,KK)
         X(2,N) = YC(II,JJ,KK)
         X(3,N) = ZC(II,JJ,KK)
 11   CONTINUE

      IF (NODE.EQ.1)THEN
          HATX(1)=0.0D0
          HATX(2)=0.0D0
          HATX(3)=0.0D0
      ELSEIF (NODE.EQ.2)THEN
          HATX(1)=1.0D0
          HATX(2)=0.0D0
          HATX(3)=0.0D0
      ELSEIF (NODE.EQ.3)THEN
          HATX(1)=1.0D0
          HATX(2)=1.0D0
          HATX(3)=0.0D0
      ELSEIF (NODE.EQ.4)THEN
          HATX(1)=0.0D0
          HATX(2)=1.0D0
          HATX(3)=0.0D0
      ELSEIF (NODE.EQ.5)THEN
          HATX(1)=0.0D0
          HATX(2)=0.0D0
          HATX(3)=1.0D0
      ELSEIF (NODE.EQ.6)THEN
          HATX(1)=1.0D0
          HATX(2)=0.0D0
          HATX(3)=1.0D0
      ELSEIF (NODE.EQ.7)THEN
          HATX(1)=1.0D0
          HATX(2)=1.0D0
          HATX(3)=1.0D0
      ELSEIF (NODE.EQ.8) THEN
          HATX(1)=0.0D0
          HATX(2)=1.0D0
          HATX(3)=1.0D0
      ELSE
          WRITE(0,*)'BUILDMPFA.DF:NODE IS WRONG'
          STOP
      ENDIF

      CALL JACMAT(X,HATX,JMAT)

 
      IF (TESTFACE.EQ.NF1)THEN
           VAL = VAL + INTFACTOR*RHO*GRAV*
     &            (DOWN(1,NBLK)*JMAT(1,1)
     &            +DOWN(2,NBLK)*JMAT(2,1)
     &            +DOWN(3,NBLK)*JMAT(3,1))
      ENDIF
 
      IF (TESTFACE.EQ.NF2)THEN
           VAL = VAL + INTFACTOR*RHO*GRAV*
     &            (DOWN(1,NBLK)*JMAT(1,2)
     &            +DOWN(2,NBLK)*JMAT(2,2)
     &            +DOWN(3,NBLK)*JMAT(3,2))
      ENDIF
 
      IF (TESTFACE.EQ.NF3)THEN
           VAL = VAL + INTFACTOR*RHO*GRAV*
     &            (DOWN(1,NBLK)*JMAT(1,3)
     &            +DOWN(2,NBLK)*JMAT(2,3)
     &            +DOWN(3,NBLK)*JMAT(3,3))
      ENDIF
  
      RETURN
      END

C======================================================================
      SUBROUTINE COPYLTRAN(WORK,LTRAN,FDIM,VDIM,FINDEX,VINDEX)
C======================================================================
      IMPLICIT NONE
C
C
C  COPY WORK(FDIM,VDIM) TO LTRAN(12,8)
C
C

      INTEGER FDIM,VDIM,FINDEX(FDIM),VINDEX(VDIM)
      REAL*8 WORK(FDIM,VDIM),LTRAN(12,8)
C
      INTEGER ROW,COL
C

      LTRAN = 0.D0

      DO 100 COL = 1, VDIM
      DO 100 ROW = 1, FDIM
        LTRAN(FINDEX(ROW),VINDEX(COL)) = WORK(ROW,COL)
 100  CONTINUE     

      RETURN
      END

C======================================================================
      SUBROUTINE COPYLRHS(WORK,LF,FDIM,FINDEX)
C======================================================================
      IMPLICIT NONE
C
C
C  COPY WORK(FDIM) TO LF(12)
C
C
      INTEGER FDIM,FINDEX(FDIM)
      REAL*8 WORK(FDIM),LF(12)
C
      INTEGER ROW
C
      
      LF = 0.D0

      DO ROW = 1, FDIM
        LF(FINDEX(ROW)) = WORK(ROW)
      ENDDO

      RETURN
      END

C======================================================================
      SUBROUTINE VELLOCALUPDATE(VX,VY,VZ,I,J,K,LTRAN,LAINVF1,P,VPROP,
     &                          VDIM,FPROP,FDIM,IDIM,JDIM,KDIM,KEYOUT)
C======================================================================
      IMPLICIT NONE
C
C  SOLVE FOR U:  U = (AINV*B)*P - (AINV*F1)   
C                F1 = FDIR + F1NEUM  - FGRAV
C  LTRAN = AINV*B
C  LAINVF1 = AINV*F1
C
C  THE FIRST FDIM*VDIM ENTRIES STORE AINV*B
C  THE FIRST FDIM ENTRIES STORE AINV*F1
C
C
      INTEGER IDIM,JDIM,KDIM, I,J,K,VPROP(8),VDIM,FPROP(12),FDIM,
     &        KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 VX(IDIM,JDIM,KDIM),VY(IDIM,JDIM,KDIM),VZ(IDIM,JDIM,KDIM),
     &       LTRAN(12,8),LAINVF1(12),P(8)
C
      INTEGER L,M,VINDEX(VDIM),FINDEX(FDIM),WORKFPROP(12)
      REAL*8 LOCALVEL(12)
C

      CALL GETDOFINDEX(I,J,K,VPROP,FPROP,VDIM,FDIM,VINDEX,FINDEX)

      LOCALVEL = 0.D0

      DO 100 L=1,FDIM
        DO M=1,VDIM
          LOCALVEL(FINDEX(L)) = LOCALVEL(FINDEX(L)) 
     &             + LTRAN(FINDEX(L),VINDEX(M))*P(VINDEX(M))
        ENDDO
        LOCALVEL(FINDEX(L)) = LOCALVEL(FINDEX(L))-LAINVF1(FINDEX(L))

 100  CONTINUE

      WORKFPROP = 0

      DO L =1,12
        IF ((FPROP(L).EQ.0).OR.(FPROP(L).EQ.2)) WORKFPROP(L)=1
      ENDDO
      CALL STOREVEL(VX,VY,VZ,I,J,K,LOCALVEL,WORKFPROP,IDIM,JDIM,KDIM,
     &              KEYOUT)

      RETURN
      END

C======================================================================
      SUBROUTINE STOREVEL(VX,VY,VZ,I,J,K,LOCALVEL,WORKFPROP,
     &                    IDIM,JDIM,KDIM,KEYOUT)
C======================================================================
      IMPLICIT NONE
C
C
      INTEGER I,J,K,WORKFPROP(12),IDIM,JDIM,KDIM,
     &        KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 VX(IDIM,JDIM,KDIM),VY(IDIM,JDIM,KDIM),VZ(IDIM,JDIM,KDIM),
     &       LOCALVEL(12)
C
      REAL*8 FACTOR
      FACTOR = 0.25
C
C VELOCITY DOFS CORRESPOND TO GLOBAL VELOCITY VX,VY,VZ
C

C P1: (I-1,J-1,K-1)  
C P2: (I  ,J-1,K-1)  
C P3: (I  ,J  ,K-1)  
C P4: (I-1,J  ,K-1)  
C P5: (I-1,J-1,K)
C P6: (I  ,J-1,K)   
C P7: (I  ,J  ,K)
C P8: (I-1,J  ,K)

C YZ PLANE
C U1  : P2
C U3  : P3
C U11 : P7
C U9  : P6

C      IF (WORKFPROP(1).EQ.1)
      IF  ((WORKFPROP(1).EQ.1).AND.
     &  ((KEYOUT(I-1,J-1,K-1).GT.0).OR.(KEYOUT(I,J-1,K-1).GT.0)))
     &   VX(I,J-1,K-1) = VX(I,J-1,K-1) + LOCALVEL(1)*FACTOR

C      IF (WORKFPROP(3).EQ.1)  
      IF ((WORKFPROP(3).EQ.1).AND.
     &   ((KEYOUT(I-1,J,K-1).GT.0).OR.(KEYOUT(I,J,K-1).GT.0)))
     &   VX(I,J,K-1)   = VX(I,J,K-1)   + LOCALVEL(3)*FACTOR

C      IF (WORKFPROP(11).EQ.1)
      IF ((WORKFPROP(11).EQ.1).AND.
     &   ((KEYOUT(I-1,J,K).GT.0).OR.(KEYOUT(I,J,K).GT.0)))
     &   VX(I,J,K)     = VX(I,J,K)     + LOCALVEL(11)*FACTOR

C      IF (WORKFPROP(9).EQ.1)
      IF ((WORKFPROP(9).EQ.1).AND.
     &   ((KEYOUT(I-1,J-1,K).GT.0).OR.(KEYOUT(I,J-1,K).GT.0)))
     &   VX(I,J-1,K)   = VX(I,J-1,K)   + LOCALVEL(9)*FACTOR

C XZ PLANE
C U4  : P4
C U2  : P3
C U10 : P7
C U12 : P8

C      IF (WORKFPROP(4).EQ.1)
      IF ((WORKFPROP(4).EQ.1).AND.
     &   ((KEYOUT(I-1,J-1,K-1).GT.0).OR.(KEYOUT(I-1,J,K-1).GT.0)))
     &   VY(I-1,J,K-1) = VY(I-1,J,K-1) + LOCALVEL(4)*FACTOR

C      IF (WORKFPROP(2).EQ.1)
      IF ((WORKFPROP(2).EQ.1).AND.
     &   ((KEYOUT(I,J-1,K-1).GT.0).OR.(KEYOUT(I,J,K-1).GT.0)))
     &   VY(I,J,K-1)   = VY(I,J,K-1)   + LOCALVEL(2)*FACTOR

C      IF (WORKFPROP(10).EQ.1)
      IF ((WORKFPROP(10).EQ.1).AND.
     &   ((KEYOUT(I,J-1,K).GT.0).OR.(KEYOUT(I,J,K).GT.0)))
     &   VY(I,J,K)     = VY(I,J,K)     + LOCALVEL(10)*FACTOR

C      IF (WORKFPROP(12).EQ.1)
      IF ((WORKFPROP(12).EQ.1).AND.
     &  ((KEYOUT(I-1,J-1,K).GT.0).OR.(KEYOUT(I-1,J,K).GT.0)))
     &   VY(I-1,J,K)   = VY(I-1,J,K)   + LOCALVEL(12)*FACTOR

C XY PLANE
C U5 : P5
C U6 : P6
C U7 : P7
C U8 : P8

C      IF (WORKFPROP(5).EQ.1)
      IF ((WORKFPROP(5).EQ.1).AND.
     &   ((KEYOUT(I-1,J-1,K-1).GT.0).OR.(KEYOUT(I-1,J-1,K).GT.0)))
     &   VZ(I-1,J-1,K) = VZ(I-1,J-1,K) + LOCALVEL(5)*FACTOR

C      IF (WORKFPROP(6).EQ.1)
      IF ((WORKFPROP(6).EQ.1).AND.
     &   ((KEYOUT(I,J-1,K-1).GT.0).OR.(KEYOUT(I,J-1,K).GT.0)))
     &   VZ(I,J-1,K)   = VZ(I,J-1,K)   + LOCALVEL(6)*FACTOR

C      IF (WORKFPROP(7).EQ.1)
      IF ((WORKFPROP(7).EQ.1).AND.
     &   ((KEYOUT(I,J,K-1).GT.0).OR.(KEYOUT(I,J,K).GT.0)))
     &   VZ(I,J,K)     = VZ(I,J,K)     + LOCALVEL(7)*FACTOR

C      IF (WORKFPROP(8).EQ.1)
      IF ((WORKFPROP(8).EQ.1).AND.
     &   ((KEYOUT(I-1,J,K-1).GT.0).OR.(KEYOUT(I-1,J,K).GT.0)))
     &   VZ(I-1,J,K)   = VZ(I-1,J,K)   + LOCALVEL(8)*FACTOR

      RETURN
      END

c======================================================================
      SUBROUTINE MPFA_POR_VOL(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                KL1,KL2,KEYOUT,NBLK,XC,YC,ZC,POR,CR)
c======================================================================
      IMPLICIT NONE
C
C  SETS UP INITIAL PORE VOLUME. REPLACES POROSITY BY PORE VOLUME.
C  SETS UP COMPRESSIBILITY TO BE D(PV)/DP
C  THIS IS A WORK ROUTINE.

C  POR(I,J,K)= REFERENCE POROSITY/PORE VOLUME ARRAY (INPUT/OUTPUT, REAL*8)
C
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM)
      INTEGER KL1,KL2,NBLK,KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 CR(IDIM,JDIM,KDIM),POR(IDIM,JDIM,KDIM)
      
      REAL*8  XC(IDIM+1,JDIM+1,KDIM+1),YC(IDIM+1,JDIM+1,KDIM+1),
     &      ZC(IDIM+1,JDIM+1,KDIM+1)
C
      INTEGER I,J,K, OFFSET(3,8),II,JJ,KK,N
      REAL*8  X(3,8),VOLH
      DATA OFFSET/0,0,0, 1,0,0, 1,1,0, 0,1,0,
     &            0,0,1, 1,0,1, 1,1,1, 0,1,1/
C
      DO 100 K = KL1,KL2
      DO 100 J = JL1V(K),JL2V(K)
      DO 100 I = IL1,IL2
        IF(KEYOUT(I,J,K).LE.0) CYCLE
        DO 11 N = 1,8
           II = I + OFFSET(1,N)
           JJ = J + OFFSET(2,N)
           KK = K + OFFSET(3,N)

           X(1,N) = XC(II,JJ,KK)
           X(2,N) = YC(II,JJ,KK)
           X(3,N) = ZC(II,JJ,KK)
 11     CONTINUE
        POR(I,J,K) = POR(I,J,K) * VOLH(X)
        CR(I,J,K) = CR(I,J,K) * POR(I,J,K)

 100  CONTINUE

      RETURN

      END


c======================================================================
      SUBROUTINE MPFA_POR_REF(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                KL1,KL2,KEYOUT,NBLK,POR,CR,
     &                CRPHI0,PHI0)
c======================================================================
      IMPLICIT NONE
C
C  SETS UP INITIAL PORE VOLUME. REPLACES POROSITY BY PORE VOLUME.
C  SETS UP COMPRESSIBILITY TO BE D(PV)/DP
C  THIS IS A WORK ROUTINE.

C  POR(I,J,K)= REFERENCE POROSITY/PORE VOLUME ARRAY (INPUT/OUTPUT, REAL*8)
C
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM)
      INTEGER KL1,KL2,NBLK,KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 CR(IDIM,JDIM,KDIM),CRPHI0(IDIM,JDIM,KDIM),
     &       PHI0(IDIM,JDIM,KDIM),POR(IDIM,JDIM,KDIM)
      
      INTEGER I,J,K
C
      DO 100 K = KL1,KL2
      DO 100 J = JL1V(K),JL2V(K)
      DO 100 I = IL1,IL2
        IF(KEYOUT(I,J,K).LE.0) CYCLE
        PHI0(I,J,K) = POR(I,J,K)
        CRPHI0(I,J,K) = CR(I,J,K)*POR(I,J,K)

 100  CONTINUE

      RETURN

      END

