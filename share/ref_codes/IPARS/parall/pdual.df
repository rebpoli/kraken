C  PDUAL.F - MESSAGE PASSING FOR DUAL APPROXIMATION MULTIBLOCK

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE XPIDAT  (IB,NERR)
C  SUBROUTINE IPIDAT  (IB,NERR)
C  SUBROUTINE PIFBUF4 (NBTM,NERR)
C  SUBROUTINE SRIBUF4 (BUFIF4,NBUFDIM,NBTM)
C  SUBROUTINE PIFBUF8 (NBTM,NERR)
C  SUBROUTINE SRIBUF8 (BUFIF8,NBUFDIM,NBTM)

C  CODE HISTORY:

C  JOHN WHEELER     3/25/99     ALPHA CODE
C  JOHN WHEELER     6/20/99     ADD GENERIC MULTI-MODEL CAPABILITY
C  SUNIL G THOMAS   -/--/09     TAG BUG-FIX FOR PIFBUF4,PIFBUF8

C*********************************************************************
      SUBROUTINE XPIDAT (IB,NERR)
C*********************************************************************

C  Sends another processor the data sequence in a interface buffer message

C  IB() = DATA BUFFER (INPUT, INTEGER)

C  IB(1,1) = SOURCE BLOCK
C  IB(2,1) = TARGET BLOCK
C  IB(3,1) = NUMBER ELEMENTS IN THE MESSAGE
C  IB(1,2) = SOURCE PROCESSOR
C  IB(2,2) = TARGET PROCESSOR
C  IB(3,2) = SOURCE OFFSET OF FIRST ELEMENT
C  IB( ,n+2) = IJK OF MESSAGE ELEMENT n IN TARGET BLOCK (GLOBAL)

C  NERR = Error number steped by 1 on error (input & output, INTEGER)

C*********************************************************************
      INCLUDE 'control.h'

$MPI      INCLUDE 'mpif.h'

      INTEGER IB(3,*),request

      MTM=1

      IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)' PROC',MYPRC,
     & ' ENTERING SUBROUTINE XPIDAT',', TAG =',MSGTAG(MTM)

      NTP=IB(2,2)
      ML=3*IB(3,1)+6

C  ALL INTERBLOCK MESSAGES ARE SENT WITH A FRAMEWORK TAG

C-RT
C$MPI      CALL MPI_SEND(IB,ML,MPI_INTEGER,NTP,MSGTAG(MTM),
C$MPI     & MPI_COMM_WORLD,IERR)
$MPI      CALL MPI_ISEND(IB,ML,MPI_INTEGER,NTP,MSGTAG(MTM),
$MPI     & MPI_COMM_WORLD,request,IERR)
C-RT
      IF (IERR.EQ.0) RETURN

      NERR=NERR+1
      WRITE (*,1)
    1 FORMAT (/' ERROR # 202: XPIDAT ROUTINE SEND FAILED')

      END
C*********************************************************************
      SUBROUTINE IPIDAT (IB,NERR)
C*********************************************************************

C  Receives the data sequence for a buffer message

C  IB() = DATA BUFFER (OUTPUT, INTEGER)

C  NERR = ERROR NUMBER STEPED BY 1 ON ERROR (INPUT & OUTPUT, INTEGER)

C*********************************************************************
      INCLUDE 'control.h'

$MPI      INCLUDE 'mpif.h'
$MPI      INTEGER ISTAT(MPI_STATUS_SIZE)

      INTEGER IB(3,*)

      MTM=1

      IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)' PROC',MYPRC,
     & ' ENTERING SUBROUTINE IPIDAT',', TAG =',MSGTAG(MTM)

      ML=3*($MXFELE+2)

$MPI      CALL MPI_RECV(IB,ML,MPI_INTEGER,MPI_ANY_SOURCE,
$MPI     & MSGTAG(MTM),MPI_COMM_WORLD,ISTAT,IERR)

      IF (IERR.EQ.0) RETURN

      NERR=NERR+1
      WRITE (*,1)
    1 FORMAT (/' ERROR # 202: IPIDAT ROUTINE RECEIVE FAILED')

      END
C*********************************************************************
      SUBROUTINE PIFBUF4 (NBTM,NERR)
C*********************************************************************

C  Exchanges REAL*4 interface buffers between processors

C  NBTM(m) = Number of buffers (1 to NBTM) to be transmitted to physical
C            model m

C  NERR = ERROR NUMBER STEPED BY 1 ON ERROR (INPUT & OUTPUT, INTEGER)

C  NOTE: If one processor calls this routine then all processors must call it.

C  NOTE: Only the framework can call this routine

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INCLUDE 'sblkc.h'

      INTEGER NBTM(*)

      IF (NFACES.EQ.0) RETURN

      MTM=1

      IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)' PROC',MYPRC,
     & ' ENTERING SUBROUTINE PIFBUF4',', OLD TAG =',MSGTAG(MTM)

C  TAG = MSGTAG + NUMBLK * (BUF - 1) + BLK        BLK ==> SENDING BLOCK

C-RT
CC      M=MSGTAG(MTM)+NUMBLK*($MXIBUF-1)+NUMBLK
CC      M=MSGTAG(MTM)+NUMBLK*($MXIBUF-1)+NUMBLK*2
        M=MSGTAG(MTM)+NUMBLK*NUMBLK*($MXIBUF-1)+
     &    NUMBLK*(NUMBLK-1)+NUMBLK
C-RT
CBW
C      M=MSGTAG(MTM)+NUMBLK*(MAXBUFC-1)+NUMBLK
CBW
      IF (M.GT.MSGTAG2(MTM)) THEN
         MSGTAG(MTM)=MSGTAG1(MTM)
C-RT
CC         M=MSGTAG(MTM)+NUMBLK*($MXIBUF-1)+NUMBLK
CC         M=MSGTAG(MTM)+NUMBLK*($MXIBUF-1)+NUMBLK*2
         M=MSGTAG(MTM)
C-RT
CBW
C         M=MSGTAG(MTM)+NUMBLK*(MAXBUFC-1)+NUMBLK
CBW
      ENDIF

C  SENDS AND RECEIVES VIA A C ROUTINE TO ACCESS BUFFERS

      NERRI=NERR
      CALL PNTIBUF4(N_BUFIF,N_BUFDIM,NBTM)
      NERR=NERRI

      MSGTAG(MTM)=M

      END
C*********************************************************************
      SUBROUTINE SRIBUF4 (BUFIF4,NBUFDIM,NBTM)
C*********************************************************************

C  Sends and receives REAL*4 interface buffer messages between processors
C  Called only by PNTIBUF4()

C  NBUFDIM = 1/2 the first dimension of BUFIF4() (input, INTEGER)

C  BUFIF4(,) = Buffer (input and output, REAL*4)

C  NBTM(m) = Number of buffers (1 to NBTM) to be transmitted to physical
C            model m

C*********************************************************************
      PARAMETER (NSB=$MXMPP*$MXBLKS*$MXIBUF)

$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INCLUDE 'sblkc.h'

$MPI      INCLUDE 'mpif.h'
$MPI      INTEGER IREQ(NSB),ISTAT(MPI_STATUS_SIZE,NSB)
$MPI      INTEGER ISTATR(MPI_STATUS_SIZE)

      INTEGER NBTM(*)

      REAL*4 BUFIF4(2*NBUFDIM,*)

      MTM=1

      IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)' PROC',MYPRC,
     & ' ENTERING SUBROUTINE SRIBUF4',', OLD TAG =',MSGTAG(MTM)

C  NON-BLOCKING SENDS

      IR=0
      DO 1 NBS=1,NUMBLK
      DO 1 NM=1,NPAI(NBS)
      NP=NPSRI(NM,NBS)
      IF (MYPRC.EQ.NP) GO TO 1

      NBT=NBSRI(NM,NBS)
      NMT=MODBLK(NBT)
      L=NESNDI(NM,NBS)
      LOFF=IESNDI(NM,NBS)

      DO 2 NBF=1,NBTM(NMT)
      IR=IR+1
C-RT
CC      M=MSGTAG(MTM)+NUMBLK*(NBF-1)+NBS
CC      M=MSGTAG(MTM)+NUMBLK*(NBF-1)+NBS+NBT
      M=MSGTAG(MTM)+NUMBLK*NUMBLK*(NBF-1)+NUMBLK*(NBT-1)+NBS
C-RT
CBW
C      M=MSGTAG(MTM)+NUMBLK*(NBF-1)+NBS
CBW

$MPI      CALL MPI_ISEND(BUFIF4(LOFF,NBF),L,MPI_REAL,NP,M,
$MPI     & MPI_COMM_WORLD,IREQ(IR),IERR)

      IF (IERR.GT.0) THEN
         NERRI=NERRI+1
         WRITE(*,*) ' SEND ERROR',IERR,' IN SRIBUF4'
         RETURN
      ENDIF

    2 CONTINUE
    1 CONTINUE

C  BLOCKING RECEIVES

      DO 3 NBT=1,NUMBLK
      DO 3 NM=1,NPAI(NBT)
      NP=NPSRI(NM,NBT)
      IF (MYPRC.EQ.NP) GO TO 3

      NBS=NBSRI(NM,NBT)
      NMT=MODBLK(NBT)
      L=NERECI(NM,NBT)
      LOFF=IERECI(NM,NBT)

      DO 4 NBF=1,NBTM(NMT)
C-RT
CC      M=MSGTAG(MTM)+NUMBLK*(NBF-1)+NBS
CC      M=MSGTAG(MTM)+NUMBLK*(NBF-1)+NBS+NBT
      M=MSGTAG(MTM)+NUMBLK*NUMBLK*(NBF-1)+NUMBLK*(NBT-1)+NBS
C-RT
CBW
C      M=MSGTAG(MTM)+NUMBLK*(NBF-1)+NBS
CBW

$MPI      CALL MPI_RECV(BUFIF4(LOFF,NBF),L,MPI_REAL,NP,M,
$MPI     & MPI_COMM_WORLD,ISTATR,IERR)

      IF (IERR.GT.0) THEN
         NERRI=NERRI+1
         WRITE(*,*) ' RECEIVE ERROR',IERR,' IN SRIBUF4'
         RETURN
      ENDIF
    4 CONTINUE
    3 CONTINUE

C  WAIT FOR SEND COMPLETIONS

$MPI      CALL MPI_WAITALL (IR,IREQ,ISTAT,IERR)

      END
C*********************************************************************
      SUBROUTINE PIFBUF8 (NBTM,NERR)
C*********************************************************************

C  Exchanges REAL*8 interface buffers between processors

C  NBTM(m) = Number of buffers (1 to NBTM) to be transmitted to physical
C            model m

C  NERR = ERROR NUMBER STEPED BY 1 ON ERROR (INPUT & OUTPUT, INTEGER)

C  NOTE: If one processor calls this routine then all processors must call it.

C  NOTE: Only the framework can call this routine

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INCLUDE 'sblkc.h'

      INTEGER NBTM(*)

      IF (NFACES.EQ.0) RETURN

      MTM=1
      IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)' PROC',MYPRC,
     & ' ENTERING SUBROUTINE PIFBUF8',', OLD TAG =',MSGTAG(MTM)

C  TAG = MSGTAG + NUMBLK * (BUF - 1) + BLK        BLK ==> SENDING BLOCK

C-RT
CC      M=MSGTAG(MTM)+NUMBLK*($MXIBUF-1)+NUMBLK
CC      M=MSGTAG(MTM)+NUMBLK*($MXIBUF-1)+NUMBLK*2
      M=MSGTAG(MTM)+NUMBLK*NUMBLK*($MXIBUF-1)+NUMBLK*(NUMBLK-1)+NUMBLK
C-RT
CBW
C      M=MSGTAG(MTM)+NUMBLK*(MAXBUFC-1)+NUMBLK
CBW

      IF (M.GT.MSGTAG2(MTM)) THEN
         MSGTAG(MTM)=MSGTAG1(MTM)
C-RT
CC         M=MSGTAG(MTM)+NUMBLK*($MXIBUF-1)+NUMBLK
CC         M=MSGTAG(MTM)+NUMBLK*($MXIBUF-1)+NUMBLK*2
         M=MSGTAG(MTM)
C-RT
C         M=MSGTAG(MTM)+NUMBLK*(MAXBUFC-1)+NUMBLK
      ENDIF

C  SENDS AND RECEIVES VIA A C ROUTINE TO ACCESS BUFFERS

      NERRI=NERR
      CALL PNTIBUF8(N_BUFIF,N_BUFDIM,NBTM)
      NERR=NERRI

      MSGTAG(MTM)=M

      END
C*********************************************************************
      SUBROUTINE SRIBUF8 (BUFIF8,NBUFDIM,NBTM)
C*********************************************************************

C  Sends and receives REAL*8 interface buffer messages between processors
C  Called only by PNTIBUF8()

C  NBUFDIM = First dimension of BUFIF8() (input, INTEGER)

C  BUFIF8(,) = Buffer (input and output, REAL*8)

C*********************************************************************
      PARAMETER (NSB=$MXMPP*$MXBLKS*$MXIBUF)

$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INCLUDE 'sblkc.h'

$MPI      INCLUDE 'mpif.h'
$MPI      INTEGER IREQ(NSB),ISTAT(MPI_STATUS_SIZE,NSB)
$MPI      INTEGER ISTATR(MPI_STATUS_SIZE)

      INTEGER NBTM(*)

      REAL*8 BUFIF8(NBUFDIM,*)

      MTM=1

      IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)' PROC',MYPRC,
     & ' ENTERING SUBROUTINE SRIBUF8',', OLD TAG =',MSGTAG(MTM)

C  NON-BLOCKING SENDS

      IR=0
      DO 1 NBS=1,NUMBLK
      DO 1 NM=1,NPAI(NBS)
      NP=NPSRI(NM,NBS)
      IF (MYPRC.EQ.NP) GO TO 1

      NBT=NBSRI(NM,NBS)
      NMT=MODBLK(NBT)
      L=NESNDI(NM,NBS)
      LOFF=IESNDI(NM,NBS)

      DO 2 NBF=1,NBTM(NMT)
      IR=IR+1
C-RT
CC      M=MSGTAG(MTM)+NUMBLK*(NBF-1)+NBS
CC      M=MSGTAG(MTM)+NUMBLK*(NBF-1)+NBS+NBT
      M=MSGTAG(MTM)+NUMBLK*NUMBLK*(NBF-1)+NUMBLK*(NBT-1)+NBS
C-RT
CBW
C       M=MSGTAG(MTM)+NUMBLK*(NBF-1)+NBS
CBW

$MPI      CALL MPI_ISEND(BUFIF8(LOFF,NBF),L,MPI_DOUBLE_PRECISION,NP,M,
$MPI     & MPI_COMM_WORLD,IREQ(IR),IERR)

      IF (IERR.GT.0) THEN
         NERRI=NERRI+1
         WRITE(*,*) ' SEND ERROR',IERR,' IN SRIBUF8'
         RETURN
      ENDIF

    2 CONTINUE
    1 CONTINUE

C  BLOCKING RECEIVES

      DO 3 NBT=1,NUMBLK
      DO 3 NM=1,NPAI(NBT)
      NP=NPSRI(NM,NBT)
      IF (MYPRC.EQ.NP) GO TO 3

      NBS=NBSRI(NM,NBT)
      NMT=MODBLK(NBT)
      L=NERECI(NM,NBT)
      LOFF=IERECI(NM,NBT)

      DO 4 NBF=1,NBTM(NMT)
C-RT BY REZA TAVACOLI
CC      M=MSGTAG(MTM)+NUMBLK*(NBF-1)+NBS
CC      M=MSGTAG(MTM)+NUMBLK*(NBF-1)+NBS+NBT
      M=MSGTAG(MTM)+NUMBLK*NUMBLK*(NBF-1)+NUMBLK*(NBT-1)+NBS
C-RT
CBW
C       M=MSGTAG(MTM)+NUMBLK*(NBF-1)+NBS
CBW

$MPI      CALL MPI_RECV(BUFIF8(LOFF,NBF),L,MPI_DOUBLE_PRECISION,NP,M,
$MPI     & MPI_COMM_WORLD,ISTATR,IERR)

      IF (IERR.GT.0) THEN
         NERRI=NERRI+1
         WRITE(*,*) ' RECEIVE ERROR',IERR,' IN SRIBUF8'
         RETURN
      ENDIF
    4 CONTINUE
    3 CONTINUE

C  WAIT FOR SEND COMPLETIONS

$MPI      CALL MPI_WAITALL (IR,IREQ,ISTAT,IERR)

      END
