C COMPUTE.F 
C ROUTINES IN THIS FILE:
C     SUBROUTINE STRAIN_INIT(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                KL2,KEYOUT,NBLK,EPCONN,EDISP,INIT_STRAIN)  
C
C     SUBROUTINE PEPORE_VOL(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                KL2,KEYOUT,NBLK,EPCONN,BIOTM,INIT_STRAIN,EDISP,PV0,
C                PV,PREFC,PRESS)
C
C     SUBROUTINE EMASS_3NC(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                KL2,KEYOUT,NBLK,PV,DISP_COMP,DP,M1,M2,CON1,CON2)
C
C     SUBROUTINE SCALE_3NC(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                KL2,KEYOUT,NBLK,EPV,M1,M2,CON1,CON2)
C
C     SUBROUTINE PEFLOWCR(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
C                KL1,KL2,KEYOUT,NBLK,DISP_COMP,PV,ECR)
C
C     SUBROUTINE PERATEW(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                KL2,KEYOUT,NBLK,KEYCR,RATE1,EDISP,EDISPN,RATE2,EPV,EPVN)
C
C     SUBROUTINE PEEXTRAPW(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                KL2,KEYOUT,NBLK,KEYCR,FACTOR,RATE1,EDISP,RATE2,EPV)
C
C     SUBROUTINE PEPV_ERR(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                KL2,KEYOUT,NBLK,EPV,PV_FLOW,MXPVERR)
C
C CODE HISTORY:
C     XIULI GAI 05/12/2001
C
C*********************************************************************
      SUBROUTINE STRAIN_INIT(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                       KL2,KEYOUT,NBLK,EPCONN,EDISP,INIT_STRAIN,
     &                       BIOTA)
C*********************************************************************
C Setups initial volumetric strain contribution to PV
C
C INPUT:
C   EPCONN(L,K,I1,I2,I3) = INTEGRATION COEFFICIENTS FOR VOL. STRAINS
C   EDISP(L,I1,I2,I3) = NODAL DISPLACEMENTS (IN)
C
C OUTPUT:
C   INIT_STRAIN(I1,I2,I3) = INITIAL VOL. STRAIN CONTRIBUTION TO PV (BBL)
C*********************************************************************
      INCLUDE 'control.h'
     
      INCLUDE 'pemodel.h'
      
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),       KEYOUT(IDIM,JDIM,KDIM)
      REAL*8  EPCONN(3,8,IDIM,JDIM,KDIM),  EDISP(IDIM,JDIM,KDIM,3)
      REAL*8  INIT_STRAIN(IDIM,JDIM,KDIM), BIOTA(IDIM,JDIM,KDIM)
      
      INTEGER I1,I2,I3,I,J,K,M,JL1,JL2
      REAL*8  ZERO,ONE,CONV,SUM
      PARAMETER(ZERO = 0.D0, ONE = 1.D0)
      
      CONV = CONV_INCHES**3 / CONV_RESVOL
      
      IF(NDIM_ELASTIC.EQ.3) THEN
         DO I3 = KL1,KL2
            JL1 = JL1V(I3)
            JL2 = JL2V(I3)
            DO I2 = JL1,JL2
               DO I1 = IL1,IL2
                  IF(KEYOUT(I1,I2,I3).NE.1) GOTO 1
                  I = I1 + 1
                  J = I2 + 1
                  K = I3 + 1
                  SUM =  EPCONN(1,1,I1,I2,I3) * EDISP(I1,I2,I3,1)
     &                 + EPCONN(2,1,I1,I2,I3) * EDISP(I1,I2,I3,2)
     &                 + EPCONN(3,1,I1,I2,I3) * EDISP(I1,I2,I3,3)
                
                  SUM = SUM + EPCONN(1,2,I1,I2,I3) * EDISP(I,I2,I3,1)
     &                      + EPCONN(2,2,I1,I2,I3) * EDISP(I,I2,I3,2)
     &                      + EPCONN(3,2,I1,I2,I3) * EDISP(I,I2,I3,3)
               
                  SUM = SUM + EPCONN(1,3,I1,I2,I3) * EDISP(I1,J,I3,1)
     &                      + EPCONN(2,3,I1,I2,I3) * EDISP(I1,J,I3,2)
     &                      + EPCONN(3,3,I1,I2,I3) * EDISP(I1,J,I3,3)
          
                  SUM = SUM + EPCONN(1,4,I1,I2,I3) * EDISP(I,J,I3,1)
     &                      + EPCONN(2,4,I1,I2,I3) * EDISP(I,J,I3,2)
     &                      + EPCONN(3,4,I1,I2,I3) * EDISP(I,J,I3,3)
              
                  SUM = SUM + EPCONN(1,5,I1,I2,I3) * EDISP(I1,I2,K,1)
     &                      + EPCONN(2,5,I1,I2,I3) * EDISP(I1,I2,K,2)
     &                      + EPCONN(3,5,I1,I2,I3) * EDISP(I1,I2,K,3)
             
                  SUM = SUM + EPCONN(1,6,I1,I2,I3) * EDISP(I,I2,K,1)
     &                      + EPCONN(2,6,I1,I2,I3) * EDISP(I,I2,K,2)
     &                      + EPCONN(3,6,I1,I2,I3) * EDISP(I,I2,K,3)  
                 
                  SUM = SUM + EPCONN(1,7,I1,I2,I3) * EDISP(I1,J,K,1)
     &                      + EPCONN(2,7,I1,I2,I3) * EDISP(I1,J,K,2)
     &                      + EPCONN(3,7,I1,I2,I3) * EDISP(I1,J,K,3)
              
                  SUM = SUM + EPCONN(1,8,I1,I2,I3) * EDISP(I,J,K,1)
     &                      + EPCONN(2,8,I1,I2,I3) * EDISP(I,J,K,2)
     &                      + EPCONN(3,8,I1,I2,I3) * EDISP(I,J,K,3)
                  INIT_STRAIN(I1,I2,I3) = -SUM*CONV*BIOTA(I1,I2,I3)
   1              CONTINUE
               ENDDO
            ENDDO
         ENDDO
      ELSE 
         IF(LEVELC) THEN
            WRITE(NFOUT,10) 
            NERRC = NERRC + 1
            RETURN
         ENDIF
      ENDIF

  10  FORMAT(/'ERROR(#STRAIN_INIT): POROELASTIC ONLY SETUP FOR 3D')     
      END

C*********************************************************************
      SUBROUTINE PEPORE_VOL(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &           KL2,KEYOUT,NBLK,EPCONN,BIOTM,INIT_STRAIN,EDISP,PV0,
     &           PV,PREFC,PRESS,ROCKTHEXP,TEMPR,TEMPREF,BIOTA,VISPOR)
C*********************************************************************
C Compute new pore volume based on pressure and volumetric strain change
C
C INPUT:
C   EPCONN(L,K,I1,I2,I3) = INTEGRATION COEFFICIENTS FOR VOL. STRAIN.
C   BIOTM(I1,I2,I3) = BIOT''S CONSTANT 1/M
C   INIT_STRAIN(I1,I2,I3) = INITIAL VOL. STRAIN CONTRIBUTION TO PV (BBL)
C   EDISP(I1,I2,I3,L) = NODAL DISPLACEMENTS (IN)
C   PV0(I1,I2,I3) = INITIAL PORE VOLUME (BBL)
C   PREFC(I1,I2,I3) = REFERENCE PORE VOLUME (PSI)
C   PRESS(I1,I2,I3) = PORE PRESSURE (PSI)
C
C OUTPUT:
C   PV(I1,I2,I3) = GRID ELEMENT PORE VOLUME (BBL)
C*********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'layout.h' 
      INCLUDE 'pemodel.h'
$COMP      INCLUDE 'xthermal.h'
      
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),       KEYOUT(IDIM,JDIM,KDIM) 
      REAL*8  EPCONN(3,8,IDIM,JDIM,KDIM),  EDISP(IDIM,JDIM,KDIM,3)  
      REAL*8  INIT_STRAIN(IDIM,JDIM,KDIM), PRESS(IDIM,JDIM,KDIM)
      REAL*8  PREFC(IDIM,JDIM,KDIM),       BIOTM(IDIM,JDIM,KDIM)
      REAL*8  PV(IDIM,JDIM,KDIM),          BIOTA(IDIM,JDIM,KDIM)
      REAL*8  TEMPR(IDIM,JDIM,KDIM),       TEMPREF(IDIM,JDIM,KDIM)
      REAL*8  ROCKTHEXP(IDIM,JDIM,KDIM),   VISPOR(IDIM,JDIM,KDIM)
      
cbw      REAL*4  PV0(IDIM,JDIM,KDIM)
      REAL*8  PV0(IDIM,JDIM,KDIM)
     
      INTEGER IOFF,JOFF,KOFF,KERR
      REAL*8  DX1,DX2,DX3,VOLUME
      INTEGER I1,I2,I3,I,J,K,JL1,JL2
      REAL*8  ZERO,ONE,CONV,VOL,VOL0,VOL1,VOL2,VOL3,VOL4
      PARAMETER(ZERO = 0.0D0, ONE = 1.0D0)

      CONV = CONV_INCHES ** 3.0D0 / CONV_RESVOL

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,KERR)
      IF(NDIM_ELASTIC.EQ.3) THEN
         DO I3 = KL1,KL2
            JL1 = JL1V(I3)
            JL2 = JL2V(I3)
            DO I2 = JL1,JL2
               DO I1 = IL1,IL2
                  IF(KEYOUT(I1,I2,I3).NE.1) GOTO 1                 
                  IF(PV0(I1,I2,I3).LE.ZERO) THEN
                     PV(I1,I2,I3)=ZERO
                     GOTO 1
                  ENDIF
                  DX1 = DXREC(I1+IOFF,NBLK)
                  DX2 = DYREC(I2+JOFF,NBLK)
                  DX3 = DZREC(I3+KOFF,NBLK)
                  VOLUME = DX1*DX2*DX3

                  I = I1 + 1
                  J = I2 + 1
                  K = I3 + 1 
                  VOL =  EPCONN(1,1,I1,I2,I3) * EDISP(I1,I2,I3,1)
     &                 + EPCONN(2,1,I1,I2,I3) * EDISP(I1,I2,I3,2)
     &                 + EPCONN(3,1,I1,I2,I3) * EDISP(I1,I2,I3,3)
           
                  VOL = VOL + EPCONN(1,2,I1,I2,I3) * EDISP(I,I2,I3,1)
     &                      + EPCONN(2,2,I1,I2,I3) * EDISP(I,I2,I3,2)
     &                      + EPCONN(3,2,I1,I2,I3) * EDISP(I,I2,I3,3)
          
                  VOL = VOL + EPCONN(1,3,I1,I2,I3) * EDISP(I1,J,I3,1)
     &                      + EPCONN(2,3,I1,I2,I3) * EDISP(I1,J,I3,2)
     &                      + EPCONN(3,3,I1,I2,I3) * EDISP(I1,J,I3,3)
                  
                  VOL = VOL + EPCONN(1,4,I1,I2,I3) * EDISP(I,J,I3,1)
     &                      + EPCONN(2,4,I1,I2,I3) * EDISP(I,J,I3,2)
     &                      + EPCONN(3,4,I1,I2,I3) * EDISP(I,J,I3,3)
         
                  VOL = VOL + EPCONN(1,5,I1,I2,I3) * EDISP(I1,I2,K,1)
     &                      + EPCONN(2,5,I1,I2,I3) * EDISP(I1,I2,K,2)
     &                      + EPCONN(3,5,I1,I2,I3) * EDISP(I1,I2,K,3)
                
                  VOL = VOL + EPCONN(1,6,I1,I2,I3) * EDISP(I,I2,K,1)
     &                      + EPCONN(2,6,I1,I2,I3) * EDISP(I,I2,K,2)
     &                      + EPCONN(3,6,I1,I2,I3) * EDISP(I,I2,K,3)
             
                  VOL = VOL + EPCONN(1,7,I1,I2,I3) * EDISP(I1,J,K,1)
     &                      + EPCONN(2,7,I1,I2,I3) * EDISP(I1,J,K,2)
     &                      + EPCONN(3,7,I1,I2,I3) * EDISP(I1,J,K,3)
                  
                  VOL = VOL + EPCONN(1,8,I1,I2,I3) * EDISP(I,J,K,1)
     &                      + EPCONN(2,8,I1,I2,I3) * EDISP(I,J,K,2)
     &                      + EPCONN(3,8,I1,I2,I3) * EDISP(I,J,K,3)

                  VOL1 = VOL*CONV*BIOTA(I1,I2,I3) 
                  VOL2 = BIOTM(I1,I2,I3)
     &                * (PRESS(I1,I2,I3)-PREFC(I1,I2,I3))
                  VOL3 = INIT_STRAIN(I1,I2,I3)
                  VOL4 = 0.D0
$COMP                  IF (PEFLOW.EQ.$XMODEL .AND. XTHERMAL) THEN
$COMP                    VOL4 = 3.D0*(PV0(I1,I3,I3)-BIOTA(I1,I2,I3)*VOLUME)
$COMP     &                         *ROCKTHEXP(I1,I2,I3)
$COMP     &                         *(TEMPR(I1,I2,I3)-TEMPREF(I1,I2,I3))
$COMP                  ENDIF
                  VOL = VOL1 + VOL2 + VOL3 + VOL4 + PV0(I1,I2,I3)
                  VOL0 = 0.001D0 * PV0(I1,I2,I3)
                  IF(VOL.GT.VOL0) THEN
                     PV(I1,I2,I3) = VOL
                  ELSE
                     PV(I1,I2,I3) = VOL0
                  ENDIF
                  VISPOR(I1,I2,I3)=PV(I1,I2,I3)/VOLUME
   1              CONTINUE
               ENDDO
            ENDDO
         ENDDO
      ELSE
         IF(LEVELC) THEN
            WRITE(NFOUT,10)
            NERRC = NERRC + 1
            RETURN
         ENDIF
      ENDIF
  10  FORMAT(/'ERROR(#STRAIN_INIT): POROELASTIC ONLY SETUP FOR 3D')
      END
C********************************************************************
      SUBROUTINE EMASS_3NC(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &               KL2,KEYOUT,NBLK,PV,CONC)
C********************************************************************
C Component mass calculation for black oil model
C
C INPUT:
C   PV(I,J,K) = GRID ELEMENT PORE VOLUME (BBL)
C   CON1(I,J,K) = OIL CONCENTRATION 
C               = (OIL STOCK TANK VOLUME/UNIT PORE VOLUME, STB/BBL)
C   CON2(I,J,K) = GAS CONCENTRATION 
C               = (GAS STOCK TANK VOLUME/UNIT PORE VOLUME, MSCF/BBL)
C OUTPUT:
C   M1(I,J,K) = GRID ELEMENT MASS OF OIL COMPONENT (STB)
C   M2(I,J,K) = GRID ELEMENT MASS OF GAS COMPONENT (MSCF)
C********************************************************************

      INCLUDE 'xmodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM), KEYOUT(IDIM,JDIM,KDIM)
      REAL*8  PV(IDIM,JDIM,KDIM)
      REAL*8  CONC(IDIM,JDIM,KDIM,NC),PVOL

      INTEGER I,J,K,IC

      DO K=KL1,KL2
         DO J=JL1V(K),JL2V(K)
            DO I=IL1,IL2
               IF(KEYOUT(I,J,K).GT.0) THEN
                  PVOL = PV(I,J,K)
                  IF (PVOL.GT.0) THEN
                     DO IC = 1,NC     
                        CONC(I,J,K,IC)=PVOL*CONC(I,J,K,IC)
                     ENDDO
                  ENDIF
               ENDIF
            ENDDO
         ENDDO
      ENDDO

      END
 
C******************************************************************** 
      SUBROUTINE SCALE_3NC(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                     KL2,KEYOUT,NBLK,EPV,CONC,PVFLOW)
C********************************************************************
C Scale concentrations according to pore volume change to conserve mass 
C
C INPUT:
C   EPV(I,J,K) = GRID ELEMENT PORE VOLUME (BBL)
C   M1(I,J,K) = GRID ELEMENT MASS OF OIL COMPONENT (STB)
C   M2(I,J,K) = GRID ELEMENT MASS OF GAS COMPONENT (MSCF)
C
C OUTPUT:
C   CON1(I,J,K) = OIL CONCENTRATION
C               = (OIL STOCK TANK VOLUME/UNIT PORE VOLUME, STB/BBL)
C   CON2(I,J,K) = GAS CONCENTRATION
C               = (GAS STOCK TANK VOLUME/UNIT PORE VOLUME, MSCF/BBL)
C********************************************************************     
      INCLUDE 'xmodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8  CONC(IDIM,JDIM,KDIM,NC)
      REAL*8  EPV(IDIM,JDIM,KDIM),PVOL
      REAL*8  PVFLOW(IDIM,JDIM,KDIM)

      INTEGER I,J,K,IC
      
      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
               IF(KEYOUT(I,J,K).GT.0) THEN
                  IF (EPV(I,J,K).GT.0) THEN
                     PVOL = EPV(I,J,K)
                  ELSEIF (PVFLOW(I,J,K).GT.0) THEN
                     PVOL = PVFLOW(I,J,K)
                  ELSE 
                     GO TO 8
                  ENDIF
                  DO IC = 1,NC
                     CONC(I,J,K,IC) = CONC(I,J,K,IC) / PVOL
                  ENDDO
               ENDIF
    8          CONTINUE
            ENDDO
         ENDDO
      ENDDO

      END

C*********************************************************************
      SUBROUTINE PEFLOWCR(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &              KL1,KL2,KEYOUT,NBLK,DISP_COMP,PV,CR)
C*********************************************************************
C Calculate effective rock compressibility 
C
C INPUT:
C   DISP_COMP(I,J,K) = GRID ELEMENT ROCK COMPRESSIBILITY (1/PSI)
C   PV(I,J,K) = PORE VOLUME (FT^3)
C
C OUTPUT:
C   CR(I,J,K) = EFFECTIVE ROCK COMPRESSIBILITY FOR FLOW (1/PSI)
C*********************************************************************
$POWER      'mjsunk.h'
      INCLUDE 'layout.h'

      INCLUDE 'pemodel.h'
     
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),   KEYOUT(IDIM,JDIM,KDIM)
      REAL*8  PV(IDIM,JDIM,KDIM),      CR(IDIM,JDIM,KDIM)
      REAL*8  DISP_COMP(IDIM,JDIM,KDIM)
       
      DO K = KL1,KL2
         JL1 = JL1V(K)
         JL2 = JL2V(K)
         DO J = JL1,JL2
            DO I = IL1,IL2
               IF(PV(I,J,K).GT.0.D0) 
     &            CR(I,J,K)=DISP_COMP(I,J,K)/PV(I,J,K)
            ENDDO
         ENDDO
      ENDDO
    
      END               
C*********************************************************************
      SUBROUTINE PERATEW(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &              KL2,KEYOUT,NBLK,KEYCR,RATE1,EDISP,EDISPN,
     &              RATE2,EPV,EPVN)
C*********************************************************************
C Displacement and pore volume changing rate within a time step
C
C INPUT:
C   EDISP(I,J,K,3) = GRID ELEMENT DISPLACEMENTS AT TIME LEVEL N+1 (IN.)
C   EDISPN(I,J,K,3) = GRID ELEMENT DISPLACEMENTS AT TIME LEVEL N (IN.)
C   EPV(I,J,K,3) = GRID ELEMENT PORE VOLUME AT TIME LEVEL N+1 (CU-FT)
C   EPVN(I,J,K,3) = GRID ELEMENT PORE VOLUME AT TIME LEVEL N (CU-FT)

C OUTPUT:
C   RATE1(I,J,K,3) = DISPLACEMENT CHANGING RATES (IN/DAY)
C   RATE2(I,J,K) = PORE VOLUME CHANGING RATE (CU-FT/DAY)
C*********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'pemodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      INTEGER KEYCR(IDIM,JDIM,KDIM)
      REAL*8  EDISP(IDIM,JDIM,KDIM,3),  EDISPN(IDIM,JDIM,KDIM,3)
      REAL*8  EPV(IDIM,JDIM,KDIM),      EPVN(IDIM,JDIM,KDIM)
      REAL*8  RATE1(IDIM,JDIM,KDIM,3),  RATE2(IDIM,JDIM,KDIM)

      INTEGER I,J,K

C CALCULATE DISPLACEMENT CHANGING RATE

      DO L=1,NDIM_ELASTIC
         DO K=KL1,KL2+1
            DO J=JL1V(K),JL2V(K)+1
               DO I=IL1,IL2+1
                  IF(KEYCR(I,J,K).GT.0)
     &            RATE1(I,J,K,L)=(EDISP(I,J,K,L)-EDISPN(I,J,K,L))/DELTIM
               ENDDO
            ENDDO
         ENDDO
      ENDDO

C CALCULATE PORE VOLUME CHANGING RATE

      DO K=KL1,KL2
         DO J=JL1V(K),JL2V(K)
            DO I=IL1,IL2
               IF(KEYOUT(I,J,K).GT.0.AND.EPV(I,J,K).GT.0) THEN
                  RATE2(I,J,K)=(EPV(I,J,K)-EPVN(I,J,K))/DELTIM
               ELSE
                  RATE2(I,J,K)=0.D0
               ENDIF 
            ENDDO
         ENDDO
      ENDDO

      END

C*********************************************************************
      SUBROUTINE PEEXTRAPW(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                   KL2,KEYOUT,NBLK,KEYCR,FACTOR,RATE1,EDISP,
     &                   RATE2,EPV)
C*********************************************************************
C Perform linear extrapolation for displacements and pore voluems
C
C INPUT:
C   EDISP(I,J,K,3) = GRID ELEMENT DISPLACEMENTS AT TIME LEVEL N (IN.)
C   RATE1(I,J,K,3) = DISPLACEMENT CHANGING RATES (IN./DAY)
C   EPV(I,J,K) = GRID ELEMENT PORE VOLUME AT TIME LEVEL N (CU-FT)
C   RATE2(I,J,K) = PORE VOLUME CHANGING RATE (CU-FT/DAY)
C   FACTOR = EXTRAPOLATION FACTOR (IN.)
C
C OUTPUT:
C   EDISP(I,J,K,3) = EXTRAPOLATED DISPLACEMENTS AT TIME LEVEL N+1 (IN.)
C   EPV(I,J,K) = EXTRAPOLATED PORE VOLUME AT TIME LEVEL N+1  (CU-FT)
C*********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'pemodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      INTEGER KEYCR(IDIM,JDIM,KDIM)
      REAL*8  EDISP(IDIM,JDIM,KDIM,3),  RATE1(IDIM,JDIM,KDIM,3)
      REAL*8  EPV(IDIM,JDIM,KDIM),      RATE2(IDIM,JDIM,KDIM)     
      REAL*4  FACTOR
      INTEGER I,J,K

C DISPLACEMENT EXTRAPOLATION

      DO L=1,NDIM_ELASTIC
         DO K=KL1,KL2+1
            DO J=JL1V(K),JL2V(K)+1
               DO I=IL1,IL2+1
                  IF(KEYCR(I,J,K).GT.0)
     &            EDISP(I,J,K,L)=EDISP(I,J,K,L)
     &                          +FACTOR*RATE1(I,J,K,L)*DELTIM
               ENDDO
            ENDDO
         ENDDO
      ENDDO

C PORE VOLUME EXTRAPOLATION
      
      DO K=KL1,KL2
         DO J=JL1V(K),JL2V(K)
            DO I=IL1,IL2
               IF(KEYOUT(I,J,K).GT.0) THEN
                  EPV(I,J,K)=EPV(I,J,K)
     &                          +FACTOR*RATE2(I,J,K)*DELTIM
               ENDIF
            ENDDO
         ENDDO
      ENDDO

      END
C*********************************************************************
      SUBROUTINE PEPV_ERR(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                  KL2,KEYOUT,NBLK,EPV,PV_FLOW,MXPVERR)
C*********************************************************************
C compute the maximum relative pore voluem error between the flow model
C calculation and the poroelastic model calculation
C
C INPUT:
C   EPV(I,J,K) = PORE VOLUME COMPUTED IN THE POROELASTIC MODEL (BBL)
C   PV_FLOW(I,J,K) = PORE VOLUME COMPUTED IN THE FLOW MODEL (BBL)
C
C OUTPUT:
C   MXPVERR = MAXIMUM RELATIVEL PORE VOLUME ERROR IN THE CURRENT BLOCK
C*********************************************************************
      INCLUDE 'pemodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER KEYOUT(IDIM,JDIM,KDIM),JL1V(KDIM),JL2V(KDIM)
      REAL*8  PV_FLOW(IDIM,JDIM,KDIM),EPV(IDIM,JDIM,KDIM)
      REAL*8  MXPVERR

      INTEGER I,J,K
      REAL*8  ERR,MXERR

      ERR=0.D0
      MXERR=0.D0
      DO K=KL1,KL2
         DO J=JL1V(K),JL2V(K)
            DO I=IL1,IL2
               IF(KEYOUT(I,J,K).GT.0) THEN
                  ERR=ABS((EPV(I,J,K)-PV_FLOW(I,J,K))/PV_FLOW(I,J,K))
                  IF(ERR.GT.MXERR) MXERR=ERR
               ENDIF
            ENDDO
         ENDDO
      ENDDO
      MXPVERR=MXERR

      END
C*********************************************************************
      SUBROUTINE PESETARYR8N(N_ARY,VAL,N)
C*********************************************************************
C CALL A WORK ROUTINE TO SET GRID ELEMENT ARRAY OF DIMENSION N TO VAL
C 
C INPUT:
C   N_ARY = GRID ELEMENT ARRAY NUMBER
C   VAL = VALUE TO SET
C   N = 4TH DIMENSION OF THE GRID ELEMENT ARRAY
C*********************************************************************
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'

      INTEGER N_ARY,N
      REAL*8 VAL
      EXTERNAL SETARYR8N

      INTEGER JZERO(4)

      JZERO(1) = 3
      JZERO(2) = N_ARY
      JZERO(3) = N_R8U
      JZERO(4) = N_I4U
cbw      I4UTIL = 3
      I4UTIL = N
      R8UTIL = VAL
      CALL CALLWORK(SETARYR8N,JZERO)

      END

C********************************************************************
C                     END OF COMPUTE.F
C********************************************************************
