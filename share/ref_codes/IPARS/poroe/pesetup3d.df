C  PESETUP3D.F - POROELASTIC MODEL SET UP ROUTINES 
C
C  ROUTINES IN THIS MODULE:
C     SUBROUTINE SETUP_CONNETIONS_3D(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,
C                                JL2V,KL1,KL2,KEYOUT,NBLK)
C
C     SUBROUTINE SETUP_ELASTIC_MAP3D(DIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,
C                                JL2V,KL1,KL2,KEYOUT,NBLK)
C
C     SUBFOUTINE ELASTIC_SETUP_3D(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,
C                                JL2V,KL1,KL2,KEYOUT,NBLK,MODUL,POISS,
C                                BIOTA,EDIAG,EBEFORE,EPCONN,ZERO_NODE)
C  CODE HISTORY:
C     XIULI GAI      05/10/2001
C*********************************************************************
      SUBROUTINE PESETUP_KEYOUT(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,
     &           JL2V,KL1,KL2,KEYOUT,NBLK,KEYOUT_CR)
C*********************************************************************
C Setup keyout values for corner points. It's a workroutine 
C
C INPUT:
C   KEYOUT_CR = CORNER POINT KEYOUT (OUTPUT, INTEGER)
C*********************************************************************
      INCLUDE 'control.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM),
     &        KEYOUT_CR(IDIM,JDIM,KDIM)
     
      INTEGER I,J,K,KEY
c debuggin
      INTEGER CTR1,CTR2

      JL1V(KL1-1)=JL1V(KL1)
      JL2V(KL1-1)=JL2V(KL1)
      JL1V(KL2+1)=JL1V(KL2)
      JL2V(KL2+1)=JL2V(KL2)
      JL1V(KL1-2)=JL1V(KL1)
      JL2V(KL1-2)=JL2V(KL1)
      JL1V(KL2+2)=JL1V(KL2)
      JL2V(KL2+2)=JL2V(KL2)
      DO K=1,KDIM
         DO J=1,JDIM
            DO I=1,IDIM
               KEYOUT_CR(I,J,K)=KEYOUT(I,J,K)
             ENDDO
         ENDDO
      ENDDO
      DO K=1,KDIM       
         DO J=1,JDIM                      
            DO I=IL1,IL2
               KEY=KEYOUT(I,J,K)     
               IF(KEY.NE.0) THEN       
                  KEYOUT_CR(I,J,K)=KEY
                  IF (J.LT.JDIM) KEYOUT_CR(I,J+1,K)=KEY
                  IF (K.LT.KDIM) KEYOUT_CR(I,J,K+1)=KEY
                  IF (J.LT.JDIM.AND.K.LT.KDIM) KEYOUT_CR(I,J+1,K+1)=KEY
                  IF (I.LT.IDIM) THEN
                     KEYOUT_CR(I+1,J,K)=KEY
                     IF(J.LT.JDIM) KEYOUT_CR(I+1,J+1,K)=KEY
                     IF(K.LT.KDIM) KEYOUT_CR(I+1,J,K+1)=KEY
                     IF(J.LT.JDIM.AND.K.LT.KDIM) 
     &                  KEYOUT_CR(I+1,J+1,K+1)=KEY
                  ENDIF
               ENDIF
            ENDDO
         ENDDO
      ENDDO

c debugging
      CTR1 = 0
      CTR2 = 0
      DO K=1,KDIM
         DO J=1,JDIM
            DO I=1,IDIM
               IF(KEYOUT_CR(I,J,K).EQ.1) CTR1=CTR1+1
               IF(KEYOUT(I,J,K).EQ.1) CTR2=CTR2+1
            ENDDO
         ENDDO
      ENDDO
      WRITE(*,*) 'PROCESS',MYPRC,'TOTAL # OF ACTIVE NODES=',CTR1
      WRITE(*,*) 'PROCESS',MYPRC,'TOTAL # OF ACTIVE ELEMS=',CTR2
!      WRITE(*,*) 'IDIM,JDIM,KDIM=',idim,jdim,kdim
!      WRITE(*,*) 'KEYOUT=',KEYOUT
!      WRITE(*,*) 'KEYOUTCR_CR=',KEYOUT_CR

      END
C*********************************************************************
      SUBROUTINE SETUP_CONNETIONS_3D(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,
     &                               JL2V,KL1,KL2,KEYOUT,NBLK) 
C*********************************************************************
C  Routine setup offset vector for displacements for global stiffness
C  matrix. 
C 
C  EBEFORE Numbers:
C                    1-------4--------7
C                   /!      /!       /!
C                  / !     / !      / ! 
C                 /  2----/--5-----/--8
C                10------13-------/  /!
C                 ! /!    ! /!    ! / !
C                 !/ 3--- !/-6----!/  9
C                11-------*-------!  /
C                 !       !       ! /
C                 !       !       !/
C                12-------!-------!             
C*********************************************************************'
      INCLUDE 'control.h'
      
      INCLUDE 'pemodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)

      INTEGER N1P,N12P
     
      N1P = IDIM
      N12P = N1P * JDIM
      IOFFSET(13,NBLK) = 1
      IOFFSET(12,NBLK) = N1P - 1
      IOFFSET(11,NBLK) = N1P 
      IOFFSET(10,NBLK) = N1P + 1
      IOFFSET(9,NBLK) = N12P - N1P -1
      IOFFSET(8,NBLK) = N12P - N1P 
      IOFFSET(7,NBLK) = N12P - N1P +1
      IOFFSET(6,NBLK) = N12P - 1
      IOFFSET(5,NBLK) = N12P
      IOFFSET(4,NBLK) = N12P + 1 
      IOFFSET(3,NBLK) = N12P + N1P - 1
      IOFFSET(2,NBLK) = N12P + N1P 
      IOFFSET(1,NBLK) = N12P + N1P + 1 

      NBAND(NBLK) = IOFFSET(1,NBLK)      
      IF(NBAND(NBLK).GT.MXBAND) MXBAND=NBAND(NBLK)
      END

C*********************************************************************
      SUBROUTINE SETUP_ELASTIC_MAP3D(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,
     &                               JL2V,KL1,KL2,KEYOUT,NBLK)
C*********************************************************************
C  Routine set up mapping from local element to global stiffness matrix
C  Condense IOFFSET if necessary and resets noffset        
C
C  EBEFORE Numbers:                   Local Numbers: 
C                 1-------4--------7                 1-------3             
C                /!      /!       /!                /!      /!
C               / !     / !      / !               / !     / !
C              /  2----/--5-----/--8              /  2----/--4
C             10------13-------/  /!              5------7  /
C              ! /!    ! /!    ! / !              ! /    ! /
C              !/ 3--- !/-6----!/  9              !/     !/
C             11-------*-------!  /               6------8
C              !       !       ! /
C              !       !       !/
C             12-------!-------!
C*********************************************************************'
      INCLUDE 'control.h'

      INCLUDE 'pemodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
    
      INTEGER NOFF,NMAP,N1P,N12P,I,J,K,LFLAG
      PARAMETER(NOFF=13,NMAP=8)
      INTEGER KOFFSET(NOFF)

      DO I = 1, 8
         DO J = 1, 8
            IMAP(I,J,NBLK) = 0
         ENDDO
      ENDDO

      N1P = IDIM
      N12P = N1P * JDIM 

      IMAP(1,1,NBLK) = 0
      IMAP(2,2,NBLK) = 1
      IMAP(2,1,NBLK) = 13
      IMAP(3,3,NBLK) = N1P
      IMAP(3,2,NBLK) = 12
      IMAP(3,1,NBLK) = 11
      IMAP(4,4,NBLK) = N1P + 1
      IMAP(4,3,NBLK) = 13
      IMAP(4,2,NBLK) = 11
      IMAP(4,1,NBLK) = 10
      IMAP(5,5,NBLK) = N12P
      IMAP(5,4,NBLK) = 9
      IMAP(5,3,NBLK) = 8
      IMAP(5,2,NBLK) = 6
      IMAP(5,1,NBLK) = 5
      IMAP(6,6,NBLK) = N12P + 1
      IMAP(6,5,NBLK) = 13
      IMAP(6,4,NBLK) = 8
      IMAP(6,3,NBLK) = 7
      IMAP(6,2,NBLK) = 5
      IMAP(6,1,NBLK) = 4
      IMAP(7,7,NBLK) = N12P + N1P
      IMAP(7,6,NBLK) = 12
      IMAP(7,5,NBLK) = 11
      IMAP(7,4,NBLK) = 6
      IMAP(7,3,NBLK) = 5
      IMAP(7,2,NBLK) = 3
      IMAP(7,1,NBLK) = 2
      IMAP(8,8,NBLK) = N12P + N1P + 1
      IMAP(8,7,NBLK) = 13
      IMAP(8,6,NBLK) = 11
      IMAP(8,5,NBLK) = 10
      IMAP(8,4,NBLK) = 5
      IMAP(8,3,NBLK) = 4
      IMAP(8,2,NBLK) = 2
      IMAP(8,1,NBLK) = 1      

C CHECK IOFFSET FOR REDUNCANCIES 
      
      DO I = 1,NOFF
         KOFFSET(I) = 0
      ENDDO
      LFLAG = 0

      DO I = 1,NOFF
         K = IOFFSET(I,NBLK)
         DO J = 1,I-1
            IF(K.EQ.IOFFSET(J,NBLK)) THEN
               KOFFSET(I) = J
               LFLAG = 1
               GOTO 1
            ENDIF
         ENDDO
  1      CONTINUE
      ENDDO
      IF(LFLAG.EQ.0) RETURN
 
C CONDENSE IOFFSET AND RESET NDIM_BEFORE 
 
      K = 0
      DO I = 1,NOFF
         IF(KOFFSET(I).EQ.0) THEN
           K = K +1
           IOFFSET(K,NBLK) = IOFFSET(I,NBLK)
         ENDIF
      ENDDO
      DO I = K+1,NDIM_BEFORE
         IOFFSET(I,NBLK) = 0
      ENDDO
      NDIM_BEFORE = K   
 
C RESET VALUES FOR IMAP    

      K = 0
      DO I = 1,NOFF
         J = KOFFSET(I)
         IF(J.EQ.0) THEN
            K = K +1
            KOFFSET(I) = K
         ELSE 
            KOFFSET(I) = KOFFSET(J)
         ENDIF
      ENDDO
      DO J = 1,NMAP
         DO I = J+1,NMAP
            K = IMAP(I,J,NBLK)
            IMAP(I,J,NBLK) = KOFFSET(K)
         ENDDO
      ENDDO
 
      END 

C*********************************************************************
      SUBROUTINE ELASTIC_SETUP_3D(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &           KL1,KL2,KEYOUT,NBLK,KEYOUT_CR,MODUL,POISS,BIOTA,
     &           EDIAG,EBEFORE,EPCONN,ZERO_NODE,INTEG)
C**********************************************************************
C Routine sets up global elastic stiffness matrix for 3-D rectanglar grid
C
C INPUT:
C   KEYOUT_CR(J) = KEYOUT VALUE FOR A CORNER POINT
C   MODUL(J) = LAME'S CONSTANT LAMBDA (PSI)
C   POISS(J) = LAME'S CONSTANT MU (PSI)
C   BIOTA(J) = BIOT'S CONSTANT ALPHA
C   INTEG = INTEGRATION POINTS

C OUTPUT:
C   EDIAG(L,J) = DIAGONAL COEF. OF GLOBAL STIFFNESS MATRIX
C   EBEFORE(L,K,J) = OFF DIAGONAL COEF. OF GLOBAL STIFFNESS MATRIX
C   EPCONN(L,K,J)=INTEGRATION COEFFICIENTS FOR VOLUMETRIC STRAINS 
C   ZERO_NODE(J) = FLAG TO TURN ON/OFF POROELASTIC CALCULATION
C**********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INCLUDE 'pemodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,INTEG
      INTEGER JL1V(KDIM),JL2V(KDIM), KEYOUT(*), KEYOUT_CR(*)
      REAL*8  MODUL(IDIM,JDIM,KDIM), POISS(IDIM,JDIM,KDIM)
      REAL*8  BIOTA(IDIM,JDIM,KDIM), EBEFORE(9,13,*)
      REAL*8  EDIAG(6,*), EPCONN(3,8,*)
      LOGICAL ZERO_NODE(*)

      INTEGER NODES,IOFF,JOFF,KOFF,NPOINTS,I1,I2,I3,I,J,K,JL1,JL2
      INTEGER KOF,JOF,N1P,N12P,N123P,KL1P,JL1P,IM,JM,L,NERR,ID
      INTEGER NPCONN,NBEFORE
      REAL*8  POINTS(2),WEIGHT,U1,A1,A2,A3,B12,B13,B23,C12,C13,C23
      REAL*8  B1,B2,B3,LAMBDA,MU,DX1,DX2,DX3,X1,X2,X3
      REAL*8  VOL,ALPHA1,ALPHA2,ALPHA3,ZERO,HALF,ONE,TWO,THREE
     
      PARAMETER(NODES=8)
      REAL*8  DHDX(NODES,INTEG,3), DHDHT(NODES,NODES,3,3)
      REAL*8  DHDX_INTEGRATED(3,NODES)

      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.D0,TWO=2.D0,THREE=3.D0) 

      INTEG = INTEGRATION_NODES
      NPCONN = NDIM_PCONN
      NBEFORE = NDIM_BEFORE
      N1P = IDIM
      N12P = N1P * JDIM
      N123P = N12P * KDIM

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,NERR)

      IF (INTEG.EQ.1) THEN
         POINTS(1) = HALF
         WEIGHT = ONE
         NPOINTS = 1
      ELSE
         POINTS(1) = HALF * (ONE - ONE/SQRT(THREE))
         POINTS(2) = HALF * (ONE + ONE/SQRT(THREE))
         WEIGHT = ONE/INTEG
         NPOINTS = 2
      ENDIF

C SETUP (DH/DX1),(DH/DX2), AND (DH/DX3) AT INTEGRATION POINTS 
      I = 0
      DO I1 = 1,NPOINTS
         DO I2 = 1,NPOINTS
            DO I3 = 1,NPOINTS
               I = I + 1
               DHDX(1,I,1) = - (ONE - POINTS(I2)) * (ONE - POINTS(I3))  
               DHDX(2,I,1) = - DHDX(1,I,1)
               DHDX(3,I,1) = - POINTS(I2) * (ONE - POINTS(I3))
               DHDX(4,I,1) = - DHDX(3,I,1)
               DHDX(5,I,1) = - (ONE - POINTS(I2)) * POINTS(I3)
               DHDX(6,I,1) = - DHDX(5,I,1)
               DHDX(7,I,1) = - POINTS(I2) * POINTS(I3)
               DHDX(8,I,1) = - DHDX(7,I,1)
               
               DHDX(1,I,2) = - (ONE - POINTS(I1)) * (ONE - POINTS(I3))
               DHDX(2,I,2) = - POINTS(I1) * (ONE - POINTS(I3))
               DHDX(3,I,2) = - DHDX(1,I,2)
               DHDX(4,I,2) = - DHDX(2,I,2)
               DHDX(5,I,2) = - (ONE - POINTS(I1)) * POINTS(I3)
               DHDX(6,I,2) = - POINTS(I1) * POINTS(I3)
               DHDX(7,I,2) = - DHDX(5,I,2)
               DHDX(8,I,2) = - DHDX(6,I,2)

               DHDX(1,I,3) = - (ONE - POINTS(I1)) * (ONE - POINTS(I2))
               DHDX(2,I,3) = - POINTS(I1) * (ONE - POINTS(I2))
               DHDX(3,I,3) = - (ONE - POINTS(I1)) * POINTS(I2)
               DHDX(4,I,3) = - POINTS(I1) * POINTS(I2)
               DHDX(5,I,3) = - DHDX(1,I,3)
               DHDX(6,I,3) = - DHDX(2,I,3)
               DHDX(7,I,3) = - DHDX(3,I,3)
               DHDX(8,I,3) = - DHDX(4,I,3)
            ENDDO
         ENDDO
      ENDDO
 
C SETUP (DH/DXI)*TRANSPOSE(DH/DXJ) MATRIX SUMMED OVER GAUSS POINTS

      DO I2 = 1,3
         DO I1 = 1,3
            DO K = 1,NODES                
               DO J = 1,NODES
                  DHDHT(J,K,I1,I2) = ZERO                
               ENDDO
            ENDDO
         ENDDO
      ENDDO    
      DO I2 = 1,3
         DO I1 = 1,3
            DO I = 1,INTEG
               DO J = 1,NODES
                  DO K = 1,J
                     DHDHT(J,K,I1,I2) = DHDHT(J,K,I1,I2) 
     &                          + WEIGHT*DHDX(J,I,I1) * DHDX(K,I,I2)
                  ENDDO
               ENDDO
            ENDDO
         ENDDO
      ENDDO       

C SUM (DH/DXI) OVER INTEGRATION POINTS    
C     DHDX_INTEGRATED = ZERO
      DO I1 = 1,3    
         DO I = 1,NODES
            DHDX_INTEGRATED(I1,I) = ZERO
         ENDDO
      ENDDO
      DO I1 = 1,3
         DO I = 1,INTEG
            DO K = 1,NODES
               DHDX_INTEGRATED(I1,K) = DHDX_INTEGRATED(I1,K) 
     &                          + WEIGHT*DHDX(K,I,I1)
            ENDDO
         ENDDO
      ENDDO

C ADD LOCAL ELEMENT STIFFNESS TO GLOBAL STIFFNESS MATRIX

      DO J = 1,N123P
         ZERO_NODE(J) = .TRUE.
         DO K = 1,6
            EDIAG(K,J) = ZERO
         ENDDO
         DO L = 1,NBEFORE
            DO K = 1,9
               EBEFORE(K,L,J) = ZERO
            ENDDO
         ENDDO
         DO L = 1,NPCONN
            DO K = 1,3
               EPCONN(K,L,J) = ZERO
            ENDDO
         ENDDO
      ENDDO

      KL1P=KL1-1
      KOF = (KL1 - 3) * N12P
      DO I3 = KL1P,KL2+1
         IF(I3.EQ.(KL1-1)) THEN
            JL1=JL1V(KL1)
cbw            JL2=JL2V(KL1)
            JL2=JL2V(KL1)+1
         ELSE IF(I3.LT.KL2) THEN
cbw            JL1=MIN(JL1V(I3),JL1V(I3+1))
cbw            JL2=MAX(JL2V(I3),JL2V(I3+1))
            JL1=MIN(JL1V(I3-1),JL1V(I3),JL1V(I3+1))
            JL2=MAX(JL2V(I3-1),JL2V(I3),JL2V(I3+1))+1
         ELSE
cbw            JL1=JL1V(KL2)
cbw            JL2=JL2V(KL2)
            JL1=MIN(JL1V(KL2-1),JL1V(KL2))
            JL2=MAX(JL2V(KL2-1),JL2V(KL2))+1
         ENDIF
         JL1P=JL1-1
         KOF = KOF + N12P
         JOF = KOF + (JL1P - 2) * N1P
cbw         X3 = DZREC(I3+KOFF,NBLK) / CONV_INCHES
         DO I2 = JL1P,JL2
            JOF = JOF + N1P
            I = JOF + IL1 - 1
cbw            X2 = DYREC(I2+JOFF,NBLK) / CONV_INCHES
            DO I1 = IL1,IL2
               I = I + 1
               IF (KEYOUT(I).EQ.0) GO TO 1
               X3 = DZREC(I3+KOFF,NBLK) / CONV_INCHES
               X2 = DYREC(I2+JOFF,NBLK) / CONV_INCHES
               X1 = DXREC(I1+IOFF,NBLK) / CONV_INCHES
               LAMBDA = MODUL(I1,I2,I3)
               IF (LAMBDA.LT.ZERO) GO TO 1 
               VOL = X1 * X2 * X3
               LAMBDA = LAMBDA * VOL 
               MU = POISS(I1,I2,I3) * VOL
               U1 = LAMBDA + TWO * MU
               DX1 = ONE / X1
               DX2 = ONE / X2
               DX3 = ONE / X3
               A1 = U1 * DX1*DX1
               A2 = U1 * DX2*DX2
               A3 = U1 * DX3*DX3
               B1 = MU * DX1*DX1
               B2 = MU * DX2*DX2
               B3 = MU * DX3*DX3
               B12 = LAMBDA * DX1 * DX2
               C12 = MU * DX1 * DX2
               B13 = LAMBDA * DX1 * DX3
               C13 = MU * DX1 * DX3
               B23 = LAMBDA * DX2 * DX3
               C23 = MU * DX2 * DX3
!bw add thermal contribution to the stress equilibrium equation
!bw               ALPHA1 = BIOTA(I1,I2,I3) * VOL * DX1
!bw               ALPHA2 = BIOTA(I1,I2,I3) * VOL * DX2
!bw               ALPHA3 = BIOTA(I1,I2,I3) * VOL * DX3
               ALPHA1 =  VOL * DX1
               ALPHA2 =  VOL * DX2
               ALPHA3 =  VOL * DX3
               DO K = 1,NODES
                  IM = I + IMAP(K,K,NBLK)
                  IF(KEYOUT_CR(IM).EQ.0) GOTO 2
                  EDIAG(1,IM) = EDIAG(1,IM) + A1 * DHDHT(K,K,1,1)
     &                + B2 * DHDHT(K,K,2,2) + B3 * DHDHT(K,K,3,3)
                  EDIAG(2,IM) = EDIAG(2,IM) + B12 * DHDHT(K,K,2,1)
     &                + C12 * DHDHT(K,K,1,2)
                  EDIAG(3,IM) = EDIAG(3,IM) + B13 * DHDHT(K,K,3,1)
     &                + C13 * DHDHT(K,K,1,3)
                  EDIAG(4,IM) = EDIAG(4,IM) + A2 * DHDHT(K,K,2,2)
     &                + B1 * DHDHT(K,K,1,1) + B3 * DHDHT(K,K,3,3)
                  EDIAG(5,IM) = EDIAG(5,IM) + B23 * DHDHT(K,K,3,2)
     &                + C23 * DHDHT(K,K,2,3)
                  EDIAG(6,IM) = EDIAG(6,IM) + A3 * DHDHT(K,K,3,3)
     &                + B1 * DHDHT(K,K,1,1) + B2 * DHDHT(K,K,2,2)
                  EPCONN(1,K,I) = ALPHA1 * DHDX_INTEGRATED(1,K)
                  EPCONN(2,K,I) = ALPHA2 * DHDX_INTEGRATED(2,K)
                  EPCONN(3,K,I) = ALPHA3 * DHDX_INTEGRATED(3,K)

                  DO L = 1,K-1
                     JM = IMAP(K,L,NBLK)
                     EBEFORE(1,JM,IM) = EBEFORE(1,JM,IM) 
     &                + A1 * DHDHT(K,L,1,1) + B2 * DHDHT(K,L,2,2)
     &                + B3 * DHDHT(K,L,3,3)
                     EBEFORE(2,JM,IM) = EBEFORE(2,JM,IM)
     &                + B12 * DHDHT(K,L,2,1) + C12 * DHDHT(K,L,1,2)
                     EBEFORE(3,JM,IM) = EBEFORE(3,JM,IM)
     &                + B13 * DHDHT(K,L,3,1) + C13 * DHDHT(K,L,1,3)
                     EBEFORE(4,JM,IM) = EBEFORE(4,JM,IM)
     &                + B12 * DHDHT(K,L,1,2) + C12 * DHDHT(K,L,2,1)
                     EBEFORE(5,JM,IM) = EBEFORE(5,JM,IM)
     &                + A2 * DHDHT(K,L,2,2) + B1 * DHDHT(K,L,1,1)
     &                + B3 * DHDHT(K,L,3,3)
                     EBEFORE(6,JM,IM) = EBEFORE(6,JM,IM)
     &                + B23 * DHDHT(K,L,3,2) + C23 * DHDHT(K,L,2,3)
                     EBEFORE(7,JM,IM) = EBEFORE(7,JM,IM)
     &                + B13 * DHDHT(K,L,1,3) + C13 * DHDHT(K,L,3,1)
                     EBEFORE(8,JM,IM) = EBEFORE(8,JM,IM)
     &                + B23 * DHDHT(K,L,2,3) + C23 * DHDHT(K,L,3,2)
                     EBEFORE(9,JM,IM) = EBEFORE(9,JM,IM)
     &                + A3 * DHDHT(K,L,3,3) + B1 * DHDHT(K,L,1,1) 
     &                + B2 * DHDHT(K,L,2,2)
                  ENDDO
  2               CONTINUE
               ENDDO
  1            CONTINUE
            ENDDO
         ENDDO
      ENDDO 
 
C SETUP LOGICAL FOR INACTIVE NODES
      
      KOF = (KL1 - 2) * N12P
      DO I3 = KL1,KL2 + 1
         JL1 = JL1V(I3)
         JL2 = JL2V(I3)
         KOF = KOF + N12P
         JOF = KOF + (JL1 - 2) * N1P
         DO I2 = JL1,JL2 + 1
            JOF = JOF + N1P
            J = JOF + IL1 - 1
            DO I1 = IL1,IL2 + 1
               J = J + 1 
               IF (KEYOUT_CR(J).GT.0.AND.EDIAG(1,J).NE.ZERO)
     &         ZERO_NODE(J) = .FALSE.
            ENDDO
         ENDDO
      ENDDO 

      END         

C*********************************************************************
C                              END OF PESETUP.DF
C*********************************************************************


C*********************************************************************
      SUBROUTINE ELASTIC_RESETUP(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &           KL1,KL2,KEYOUT,NBLK,KEYOUT_CR,MODUL,POISS,BIOTA,
     &           EDIAG,EBEFORE,INTEG)
C**********************************************************************
C Routine sets up global elastic stiffness matrix for 3-D rectanglar grid
C
C INPUT:
C   KEYOUT_CR(J) = KEYOUT VALUE FOR A CORNER POINT
C   MODUL(J) = LAME'S CONSTANT LAMBDA (PSI)
C   POISS(J) = LAME'S CONSTANT MU (PSI)
C   BIOTA(J) = BIOT'S CONSTANT ALPHA
C   INTEG = INTEGRATION POINTS

C OUTPUT:
C   EDIAG(L,J) = DIAGONAL COEF. OF GLOBAL STIFFNESS MATRIX
C   EBEFORE(L,K,J) = OFF DIAGONAL COEF. OF GLOBAL STIFFNESS MATRIX
C   EPCONN(L,K,J)=INTEGRATION COEFFICIENTS FOR VOLUMETRIC STRAINS 
C   ZERO_NODE(J) = FLAG TO TURN ON/OFF POROELASTIC CALCULATION
C**********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INCLUDE 'pemodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,INTEG
      INTEGER JL1V(KDIM),JL2V(KDIM), KEYOUT(*), KEYOUT_CR(*)
      REAL*8  MODUL(IDIM,JDIM,KDIM), POISS(IDIM,JDIM,KDIM)
      REAL*8  BIOTA(IDIM,JDIM,KDIM), EBEFORE(9,13,*)
      REAL*8  EDIAG(6,*)

      INTEGER NODES,IOFF,JOFF,KOFF,NPOINTS,I1,I2,I3,I,J,K,JL1,JL2
      INTEGER KOF,JOF,N1P,N12P,N123P,KL1P,JL1P,IM,JM,L,NERR,ID
      INTEGER NPCONN,NBEFORE
      REAL*8  POINTS(2),WEIGHT,U1,A1,A2,A3,B12,B13,B23,C12,C13,C23
      REAL*8  B1,B2,B3,LAMBDA,MU,DX1,DX2,DX3,X1,X2,X3
      REAL*8  VOL,ALPHA1,ALPHA2,ALPHA3,ZERO,HALF,ONE,TWO,THREE
     
      PARAMETER(NODES=8)
      REAL*8  DHDX(NODES,INTEG,3), DHDHT(NODES,NODES,3,3)
      REAL*8  DHDX_INTEGRATED(3,NODES)

      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.D0,TWO=2.D0,THREE=3.D0) 

      INTEG = INTEGRATION_NODES
      NPCONN = NDIM_PCONN
      NBEFORE = NDIM_BEFORE
      N1P = IDIM
      N12P = N1P * JDIM
      N123P = N12P * KDIM

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,NERR)

      IF (INTEG.EQ.1) THEN
         POINTS(1) = HALF
         WEIGHT = ONE
         NPOINTS = 1
      ELSE
         POINTS(1) = HALF * (ONE - ONE/SQRT(THREE))
         POINTS(2) = HALF * (ONE + ONE/SQRT(THREE))
         WEIGHT = ONE/INTEG
         NPOINTS = 2
      ENDIF

C SETUP (DH/DX1),(DH/DX2), AND (DH/DX3) AT INTEGRATION POINTS 
      I = 0
      DO I1 = 1,NPOINTS
         DO I2 = 1,NPOINTS
            DO I3 = 1,NPOINTS
               I = I + 1
               DHDX(1,I,1) = - (ONE - POINTS(I2)) * (ONE - POINTS(I3))    
               DHDX(2,I,1) = - DHDX(1,I,1)
               DHDX(3,I,1) = - POINTS(I2) * (ONE - POINTS(I3))
               DHDX(4,I,1) = - DHDX(3,I,1)
               DHDX(5,I,1) = - (ONE - POINTS(I2)) * POINTS(I3)
               DHDX(6,I,1) = - DHDX(5,I,1)
               DHDX(7,I,1) = - POINTS(I2) * POINTS(I3)
               DHDX(8,I,1) = - DHDX(7,I,1)
               
               DHDX(1,I,2) = - (ONE - POINTS(I1)) * (ONE - POINTS(I3))
               DHDX(2,I,2) = - POINTS(I1) * (ONE - POINTS(I3))
               DHDX(3,I,2) = - DHDX(1,I,2)
               DHDX(4,I,2) = - DHDX(2,I,2)
               DHDX(5,I,2) = - (ONE - POINTS(I1)) * POINTS(I3)
               DHDX(6,I,2) = - POINTS(I1) * POINTS(I3)
               DHDX(7,I,2) = - DHDX(5,I,2)
               DHDX(8,I,2) = - DHDX(6,I,2)

               DHDX(1,I,3) = - (ONE - POINTS(I1)) * (ONE - POINTS(I2))
               DHDX(2,I,3) = - POINTS(I1) * (ONE - POINTS(I2))
               DHDX(3,I,3) = - (ONE - POINTS(I1)) * POINTS(I2)
               DHDX(4,I,3) = - POINTS(I1) * POINTS(I2)
               DHDX(5,I,3) = - DHDX(1,I,3)
               DHDX(6,I,3) = - DHDX(2,I,3)
               DHDX(7,I,3) = - DHDX(3,I,3)
               DHDX(8,I,3) = - DHDX(4,I,3)
            ENDDO
         ENDDO
      ENDDO
 
C SETUP (DH/DXI)*TRANSPOSE(DH/DXJ) MATRIX SUMMED OVER GAUSS POINTS

      DO I2 = 1,3
         DO I1 = 1,3
            DO K = 1,NODES                
               DO J = 1,NODES
                  DHDHT(J,K,I1,I2) = ZERO                
               ENDDO
            ENDDO
         ENDDO
      ENDDO    
      DO I2 = 1,3
         DO I1 = 1,3
            DO I = 1,INTEG
               DO J = 1,NODES
                  DO K = 1,J
                     DHDHT(J,K,I1,I2) = DHDHT(J,K,I1,I2) 
     &                          + WEIGHT*DHDX(J,I,I1) * DHDX(K,I,I2)
                  ENDDO
               ENDDO
            ENDDO
         ENDDO
      ENDDO       

C SUM (DH/DXI) OVER INTEGRATION POINTS    
C     DHDX_INTEGRATED = ZERO
      DO I1 = 1,3    
         DO I = 1,NODES
            DHDX_INTEGRATED(I1,I) = ZERO
         ENDDO
      ENDDO
      DO I1 = 1,3
         DO I = 1,INTEG
            DO K = 1,NODES
               DHDX_INTEGRATED(I1,K) = DHDX_INTEGRATED(I1,K) 
     &                          + WEIGHT*DHDX(K,I,I1)
            ENDDO
         ENDDO
      ENDDO

C ADD LOCAL ELEMENT STIFFNESS TO GLOBAL STIFFNESS MATRIX

      DO J = 1,N123P
         DO K = 1,6
            EDIAG(K,J) = ZERO
         ENDDO
         DO L = 1,NBEFORE
            DO K = 1,9
               EBEFORE(K,L,J) = ZERO
            ENDDO
         ENDDO
      ENDDO

      KL1P=KL1-1
      KOF = (KL1 - 3) * N12P
      DO I3 = KL1P,KL2+1
         IF(I3.EQ.(KL1-1)) THEN
            JL1=JL1V(KL1)
cbw            JL2=JL2V(KL1)
            JL2=JL2V(KL1)+1
         ELSE IF(I3.LT.KL2) THEN
cbw            JL1=MIN(JL1V(I3),JL1V(I3+1))
cbw            JL2=MAX(JL2V(I3),JL2V(I3+1))
            JL1=MIN(JL1V(I3-1),JL1V(I3),JL1V(I3+1))
            JL2=MAX(JL2V(I3-1),JL2V(I3),JL2V(I3+1))+1
         ELSE
cbw            JL1=JL1V(KL2)
cbw            JL2=JL2V(KL2)
            JL1=MIN(JL1V(KL2-1),JL1V(KL2))
            JL2=MAX(JL2V(KL2-1),JL2V(KL2))+1
         ENDIF
         JL1P=JL1-1
         KOF = KOF + N12P
         JOF = KOF + (JL1P - 2) * N1P
cbw         X3 = DZREC(I3+KOFF,NBLK) / CONV_INCHES
         DO I2 = JL1P,JL2
            JOF = JOF + N1P
            I = JOF + IL1 - 1
cbw            X2 = DYREC(I2+JOFF,NBLK) / CONV_INCHES
            DO I1 = IL1,IL2
               I = I + 1
               IF (KEYOUT(I).EQ.0) GO TO 1
               X3 = DZREC(I3+KOFF,NBLK) / CONV_INCHES
               X2 = DYREC(I2+JOFF,NBLK) / CONV_INCHES
               X1 = DXREC(I1+IOFF,NBLK) / CONV_INCHES
               LAMBDA = MODUL(I1,I2,I3)
               IF (LAMBDA.LT.ZERO) GO TO 1 
               VOL = X1 * X2 * X3
               LAMBDA = LAMBDA * VOL 
               MU = POISS(I1,I2,I3) * VOL
               U1 = LAMBDA + TWO * MU
               DX1 = ONE / X1
               DX2 = ONE / X2
               DX3 = ONE / X3
               A1 = U1 * DX1*DX1
               A2 = U1 * DX2*DX2
               A3 = U1 * DX3*DX3
               B1 = MU * DX1*DX1
               B2 = MU * DX2*DX2
               B3 = MU * DX3*DX3
               B12 = LAMBDA * DX1 * DX2
               C12 = MU * DX1 * DX2
               B13 = LAMBDA * DX1 * DX3
               C13 = MU * DX1 * DX3
               B23 = LAMBDA * DX2 * DX3
               C23 = MU * DX2 * DX3
               ALPHA1 = BIOTA(I1,I2,I3) * VOL * DX1
               ALPHA2 = BIOTA(I1,I2,I3) * VOL * DX2
               ALPHA3 = BIOTA(I1,I2,I3) * VOL * DX3
               DO K = 1,NODES
                  IM = I + IMAP(K,K,NBLK)
                  IF(KEYOUT_CR(IM).EQ.0) GOTO 2
                  EDIAG(1,IM) = EDIAG(1,IM) + A1 * DHDHT(K,K,1,1)
     &                + B2 * DHDHT(K,K,2,2) + B3 * DHDHT(K,K,3,3)
                  EDIAG(2,IM) = EDIAG(2,IM) + B12 * DHDHT(K,K,2,1)
     &                + C12 * DHDHT(K,K,1,2)
                  EDIAG(3,IM) = EDIAG(3,IM) + B13 * DHDHT(K,K,3,1)
     &                + C13 * DHDHT(K,K,1,3)
                  EDIAG(4,IM) = EDIAG(4,IM) + A2 * DHDHT(K,K,2,2)
     &                + B1 * DHDHT(K,K,1,1) + B3 * DHDHT(K,K,3,3)
                  EDIAG(5,IM) = EDIAG(5,IM) + B23 * DHDHT(K,K,3,2)
     &                + C23 * DHDHT(K,K,2,3)
                  EDIAG(6,IM) = EDIAG(6,IM) + A3 * DHDHT(K,K,3,3)
     &                + B1 * DHDHT(K,K,1,1) + B2 * DHDHT(K,K,2,2)

                  DO L = 1,K-1
                     JM = IMAP(K,L,NBLK)
                     EBEFORE(1,JM,IM) = EBEFORE(1,JM,IM) 
     &                + A1 * DHDHT(K,L,1,1) + B2 * DHDHT(K,L,2,2)
     &                + B3 * DHDHT(K,L,3,3)
                     EBEFORE(2,JM,IM) = EBEFORE(2,JM,IM)
     &                + B12 * DHDHT(K,L,2,1) + C12 * DHDHT(K,L,1,2)
                     EBEFORE(3,JM,IM) = EBEFORE(3,JM,IM)
     &                + B13 * DHDHT(K,L,3,1) + C13 * DHDHT(K,L,1,3)
                     EBEFORE(4,JM,IM) = EBEFORE(4,JM,IM)
     &                + B12 * DHDHT(K,L,1,2) + C12 * DHDHT(K,L,2,1)
                     EBEFORE(5,JM,IM) = EBEFORE(5,JM,IM)
     &                + A2 * DHDHT(K,L,2,2) + B1 * DHDHT(K,L,1,1)
     &                + B3 * DHDHT(K,L,3,3)
                     EBEFORE(6,JM,IM) = EBEFORE(6,JM,IM)
     &                + B23 * DHDHT(K,L,3,2) + C23 * DHDHT(K,L,2,3)
                     EBEFORE(7,JM,IM) = EBEFORE(7,JM,IM)
     &                + B13 * DHDHT(K,L,1,3) + C13 * DHDHT(K,L,3,1)
                     EBEFORE(8,JM,IM) = EBEFORE(8,JM,IM)
     &                + B23 * DHDHT(K,L,2,3) + C23 * DHDHT(K,L,3,2)
                     EBEFORE(9,JM,IM) = EBEFORE(9,JM,IM)
     &                + A3 * DHDHT(K,L,3,3) + B1 * DHDHT(K,L,1,1) 
     &                + B2 * DHDHT(K,L,2,2)
                  ENDDO
  2               CONTINUE
               ENDDO
  1            CONTINUE
            ENDDO
         ENDDO
      ENDDO 
 

      END         
