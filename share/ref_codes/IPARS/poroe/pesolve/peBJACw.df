C PEBJACW.F -- BLOCK JACOBI PRECONDITIONER WORK ROUTINES
C
C ROUTINES IN THIS FILE:
C     SUBROUTINE PEW_BJAC_SUBID(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
C                     KL1,KL2,KEYOUT,NBLK,NSUB,IDIMDD,JDIMDD,KDIMDD,
C                     ILDD1,ILDD2,JLDD1,JLDD2,KLDD1,KLDD2,NBANDD,MAPDD,
C                     KEYDD,ZNODD,BCOFDD,DCOFDD,KEYCR,SUBID)
C
C     SUBROUTINE PEW_BJAC_ZNODE(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
C                     KL1,KL2,KEYOUT,NBLK,NSUB,IDIMDD,JDIMDD,KDIMDD,
C                     ILDD1,ILDD2,JLDD1,JLDD2,KLDD1,KLDD2,NBANDD,MAPDD,
C                     KEYDD,ZONDD,BCOFDD,DCOFDD,ZNODE)
C
C     SUBROUTINE PEW_BJAC_FACTOR(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
C                     KL1,KL2,KEYOUT,NBLK,NSUB,IDIMDD,JDIMDD,KDIMDD,
C                     ILDD1,ILDD2,JLDD1,JLDD2,KLDD1,KLDD2,NBANDD,MAPDD,
C                     KEYDD,ZNODD,BCOFDD,DCOFDD,KEYCR,SUBID,BCOFG,DCOFG)
C
C     SUBROUTINE PEW_BJAC_SOLVE(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
C                     KL1,KL2,KEYOUT,NBLK,NSUB,IDIMDD,JDIMDD,KDIMDD,
C                     ILDD1,ILDD2,JLDD1,JLDD2,KLDD1,KLDD2,NBANDD,MAPDD,
C                     KEYDD,ZNODD,BCOFDD,DCOFDD,R,Z)
C
C     SUBROUTINE PEW_AGGREG2D(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                     KL2,KEYOUT,NBLK,NBAND2D,KEY2D,ZNOD2D,BCOF2D,
C                     DCOF2D,KEYCR,BCOFG,DCOFG,ZNODE)
C
C     SUBROUTINE PEW_SOLVE2D(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                     KL2,KEYOUT,NBLK,NBAND2D,KEY2D,ZNOD2D,BCOF2D,
C                     DCOF2D,KEYCR,R,Z,AB,AD,ZNODE)
C
C     SUBROUTINE FACTOR(EDIAG,EFACTOR,KEYOUT,N,NBAND,MXN4,KERR)
C
C     SUBROUTINE BACK_SOLVE(DILU,EFACTOR,RHS,X,KEYOUT,ZNODE,
C                     N,NBAND,MXN4,KERR)
C
C CODE HISTORY:
C
C     XIULI GAI        08/13/2OO1
C***********************************************************************
      SUBROUTINE PEW_BJAC_SUBID(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                KL1,KL2,KEYOUT,NBLK,NSUB,IDIMDD,JDIMDD,KDIMDD,
     &                ILDD1,ILDD2,JLDD1,JLDD2,KLDD1,KLDD2,NBANDD,MAPDD,
     &                KEYDD,ZNODD,BCOFDD,DCOFDD,KEYCR,SUBID)
C***********************************************************************
C Label each grid node with a subdomain identification number
C This is a DDWORK routine
C***********************************************************************
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)

      INTEGER IDIMDD,JDIMDD,KDIMDD,ILDD1,ILDD2,KLDD1,KLDD2,NSUB,NBANDD
      INTEGER JLDD1(KDIMDD),JLDD2(KDIMDD),MAPDD(JDIMDD,KDIMDD)
      INTEGER KEYDD(IDIMDD,JDIMDD,KDIMDD)
      REAL*8  BCOFDD(9,NBANDD,*),DCOFDD(6,*)
      LOGICAL ZNODD(IDIMDD,JDIMDD,KDIMDD)
      INTEGER SUBID(*),KEYCR(*)

      INTEGER LI,LJ,LK,GI
      DO LK=1,KDIMDD
         DO LJ=1,JDIMDD
            GI=MAPDD(LJ,LK)-1
            DO LI=1,IDIMDD
               GI=GI+1
               KEYDD(LI,LJ,LK)=KEYCR(GI)
               SUBID(GI)=NSUB
            ENDDO
         ENDDO
      ENDDO

      END

C***********************************************************************
      SUBROUTINE PEW_BJAC_ZNODE(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                KL1,KL2,KEYOUT,NBLK,NSUB,IDIMDD,JDIMDD,KDIMDD,
     &                ILDD1,ILDD2,JLDD1,JLDD2,KLDD1,KLDD2,NBANDD,MAPDD,
     &                KEYDD,ZONDD,BCOFDD,DCOFDD,ZNODE)
C***********************************************************************
C Specify ZERO_NODE values for a subdomain node
C This is a DDWORK routine
C***********************************************************************
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)

      INTEGER IDIMDD,JDIMDD,KDIMDD,ILDD1,ILDD2,KLDD1,KLDD2,NSUB,NBANDD
      INTEGER JLDD1(KDIMDD),JLDD2(KDIMDD),MAPDD(JDIMDD,KDIMDD)
      INTEGER KEYDD(IDIMDD,JDIMDD,KDIMDD)
      REAL*8  BCOFDD(9,NBANDD,*),DCOFDD(6,*)
      LOGICAL ZNODD(IDIMDD,JDIMDD,KDIMDD),ZNODE(*)

      INTEGER LI,LJ,LK,GI
      DO LK=1,KDIMDD
         DO LJ=1,JDIMDD
            GI=MAPDD(LJ,LK)-1
            DO LI=1,IDIMDD
               GI=GI+1
               ZNODD(LI,LJ,LK)=ZNODE(GI)
            ENDDO
         ENDDO
      ENDDO

      END

C***********************************************************************
      SUBROUTINE PEW_BJAC_FACTOR(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                KL1,KL2,KEYOUT,NBLK,NSUB,IDIMDD,JDIMDD,KDIMDD,
     &                ILDD1,ILDD2,JLDD1,JLDD2,KLDD1,KLDD2,NBANDD,MAPDD,
     &                KEYDD,ZNODD,BCOFDD,DCOFDD,KEYCR,SUBID,BCOFG,DCOFG)
C***********************************************************************
C Get a subdomain matrix from the 3d global matrix. 
C This is a DDWORK routine.
C
C INPUT:
C   KEYCR(GJ) = KEYOUT VALUES FOR CORNER POINTS ON A 3D GRID
C   SUBID(GJ) = SUBDOMAIN NUMBER OF A GRID NODE
C   BCOFG(L,M,GJ) = OFF DIAGONAL COEF. OF THE GLOBAL 3D GRID MATRIX
C   DCOFG(L,GJ) = DIAGONAL COEF. OF THE GLOBAL 3D GRID MATRIX
C
C OUTPUT:
C   BCOFDD(L,M,I,J,K) = OFF DIAGONAL COEF. OF A SUBDOMAIN MATRIX
C   DCOFDD(L,I,J,K) = DIAGONAL COEF. OF A SUBDOMAIN MATRIX
C***********************************************************************  
CFactor a subdomain matrix
      INCLUDE 'control.h'
      INCLUDE 'pemodel.h'
      INCLUDE 'pesolve.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER IDIMDD,JDIMDD,KDIMDD,ILDD1,ILDD2,KLDD1,KLDD2,NSUB,NBANDD
      INTEGER JL1V(KDIM),JL2V(KDIM),JLDD1(KDIMDD),JLDD2(KDIMDD)
      INTEGER KEYOUT(*),KEYDD(IDIMDD,JDIMDD,KDIMDD),MAPDD(JDIMDD,KDIMDD)
      INTEGER KEYCR(*), SUBID(*)
      REAL*8  BCOFG(9,13,*),DCOFG(6,*)
      REAL*8  BCOFDD(9,NBANDD,IDIMDD,JDIMDD,KDIMDD) 
      REAL*8  DCOFDD(6,IDIMDD,JDIMDD,KDIMDD)
      LOGICAL ZNODD(IDIMDD,JDIMDD,KDIMDD)
      
      REAL*8  BCOF(9,13,IDIMDD,JDIMDD,KDIMDD)
      INTEGER LI,LJ,LK,GI,GJ,IB,ID,ND,NB,GNJ,GNK,GNC,IDIR,NOFF,
     &        NEQ,N1P,N12P,N1PS,N12PS,N123PS,IOFFSUB(13)
      LOGICAL MYNOD
      
      NEQ=PE_MEQ 
      NOFF=NDIM_BEFORE   
      ND=NEQ*(NEQ+1)/2
      NB=NEQ**2
      N1P=IDIM
      N12P=IDIM*JDIM
      N1PS=IDIMDD
      N12PS=N1PS*JDIMDD
      N123PS=N12PS*KDIMDD

C SETUP IOFFSET FOR THE CURRENT SUBDOMAIN
     
      IOFFSUB(13)= 1
      IOFFSUB(12)= N1PS - 1
      IOFFSUB(11)= N1PS
      IOFFSUB(10)= N1PS + 1
      IOFFSUB(9) = N12PS - N1PS -1
      IOFFSUB(8) = N12PS - N1PS
      IOFFSUB(7) = N12PS - N1PS +1
      IOFFSUB(6) = N12PS - 1
      IOFFSUB(5) = N12PS
      IOFFSUB(4) = N12PS + 1
      IOFFSUB(3) = N12PS + N1PS - 1
      IOFFSUB(2) = N12PS + N1PS
      IOFFSUB(1) = N12PS + N1PS + 1
    
C ZERO SOME MATRICES
 
      DO LK=1,KDIMDD      
         DO LJ=1,JDIMDD     
            DO LI=1,IDIMDD         
               DO ID=1,ND
                  DCOFDD(ID,LI,LJ,LK)=0.D0
               ENDDO
               DO IDIR=1,NOFF
                  DO IB=1,NB
                     BCOF(IB,IDIR,LI,LJ,LK)=0.D0
                  ENDDO
               ENDDO
            ENDDO
         ENDDO
      ENDDO

      DO LK=KLDD1,KLDD2
         DO LJ=JLDD1(LK),JLDD2(LK)
            GI=MAPDD(LJ,LK)+ILDD1-2
            DO LI=ILDD1,ILDD2
               GI=GI+1
               IF(KEYDD(LI,LJ,LK).LE.0) CYCLE
               DO ID=1,ND
                  DCOFDD(ID,LI,LJ,LK)=DCOFG(ID,GI)
               ENDDO
               DO IDIR=1,NOFF
                  GJ=GI-IOFFSET(IDIR,NBLK)
                  IF(GJ.LE.0) CYCLE
                  IF(KEYCR(GJ).LE.0) CYCLE
                  IF(SUBID(GJ).EQ.NSUB) THEN
                     MYNOD=.TRUE.
                  ELSE
                     MYNOD=.FALSE.
                  ENDIF
                  IF(MYNOD) THEN
                     DO IB=1,NB
                        BCOF(IB,IDIR,LI,LJ,LK)=BCOFG(IB,IDIR,GI)
                     ENDDO
                  ENDIF
               ENDDO
            ENDDO
         ENDDO
      ENDDO

C ZERO BCOFDD
 
      DO LK=1,KDIMDD
         DO LJ=1,JDIMDD
            DO LI=1,IDIMDD
               DO IDIR=1,NBANDD
                  DO IB=1,NB
                     BCOFDD(IB,IDIR,LI,LJ,LK)=0.D0
                  ENDDO
               ENDDO
            ENDDO
         ENDDO
      ENDDO

C CALL FACTOR DCOF AND BCOF

      DO LK=KLDD1,KLDD2
         DO LJ=JLDD1(LK),JLDD2(LK)
            DO LI=ILDD1,ILDD2
               IF(KEYDD(LI,LJ,LK).LE.0) CYCLE
               GI=(LK-1)*N12PS+(LJ-1)*N1PS+LI
               DO IDIR=1,NOFF
                  GJ=IOFFSUB(IDIR)
                  DO IB=1,NB
                     BCOFDD(IB,GJ,LI,LJ,LK)=BCOF(IB,IDIR,LI,LJ,LK)
                  ENDDO
               ENDDO
            ENDDO
         ENDDO
      ENDDO
      CALL FACTOR(DCOFDD,BCOFDD,KEYDD,N123PS,NBANDD,NBANDD,KERR)

      END 

C***********************************************************************
      SUBROUTINE PEW_BJAC_SOLVE(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                KL1,KL2,KEYOUT,NBLK,NSUB,IDIMDD,JDIMDD,KDIMDD,
     &                ILDD1,ILDD2,JLDD1,JLDD2,KLDD1,KLDD2,NBANDD,MAPDD,
     &                KEYDD,ZNODD,BCOFDD,DCOFDD,R,Z)
C***********************************************************************
C Performs one iteration of block Jacobi 
C This is a DDWORK routine
C 
C INPUT:
C   R(GJ,L) = GLOBAL RESIDUALS OF THE LINEAR SYSTEM
C   Z(GJ,L) = GLOBAL UNKNOWN VALUES BEFORE THE LINEAR ITERATION
C
C OUTPUT:
C   Z(GJ,L) = GLOBAL UNKNOWN VALUES AFTER THE ITERATION
C*********************************************************************** 
      INCLUDE 'control.h'
      INCLUDE 'pesolve.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      INTEGER IDIMDD,JDIMDD,KDIMDD,ILDD1,ILDD2,KLDD1,KLDD2,NSUB,NBANDD
      INTEGER JLDD1(KDIMDD),JLDD2(KDIMDD),MAPDD(JDIMDD,KDIMDD)
      INTEGER KEYDD(IDIMDD,JDIMDD,KDIMDD)
      REAL*8  BCOFDD(9,NBANDD,*),        DCOFDD(6,*)
      REAL*8  R(IDIM*JDIM*KDIM,3), Z(IDIM*JDIM*KDIM,3)
      LOGICAL ZNODD(IDIMDD,JDIMDD,KDIMDD)

      INTEGER I,J,L,K,JL1,JL2,LI,GI,IE,NEQ,NB,ND,N1P,N12P,N123P
      REAL*8  RESDD(IDIMDD,JDIMDD,KDIMDD,3),X(IDIMDD,JDIMDD,KDIMDD,3)
     
      NEQ=PE_MEQ
      ND=NEQ*(NEQ+1)/2
      NB=NEQ**2
 
      N1P=IDIMDD
      N12P=N1P*JDIMDD
      N123P=N12P*KDIMDD

      DO K=1,KDIMDD
         DO J=1,JDIMDD
            DO I=1,IDIMDD
               DO IE=1,NEQ
                  RESDD(I,J,K,IE)=0.D0
               ENDDO
            ENDDO
         ENDDO
      ENDDO

C GET SUBDOMAIN RESIDUALS (Z SHOULD BE ZERO)
       
      DO K=KLDD1,KLDD2
         JL1=JLDD1(K)
         JL2=JLDD2(K)
         DO J=JL1,JL2
            GI=MAPDD(J,K)+ILDD1-2
            DO I=ILDD1,ILDD2
               GI=GI+1
               IF(KEYDD(I,J,K).LE.0) CYCLE
               IF(ZNODD(I,J,K)) CYCLE
               DO IE=1,NEQ
                  RESDD(I,J,K,IE)=R(GI,IE)
               ENDDO
            ENDDO
         ENDDO
      ENDDO

C SOLVE FOR SUBDOMAIN SOLUTIONS                       

      CALL BACK_SOLVE(DCOFDD,BCOFDD,RESDD,X,KEYDD,ZNODD,N123P,
     &     NBANDD,NBANDD,KERR)
      DO K=KLDD1,KLDD2
         DO J=JLDD1(K),JLDD2(K)
            GI=MAPDD(J,K)+ILDD1-2
            DO I=ILDD1,ILDD2
               GI=GI+1
               IF(KEYDD(I,J,K).LE.0) CYCLE
               IF(ZNODD(I,J,K)) CYCLE
               DO IE=1,NEQ
                     Z(GI,IE)=X(I,J,K,IE)
               ENDDO
            ENDDO
         ENDDO
      ENDDO
      END     

C***********************************************************************
      SUBROUTINE PEW_AGGREG2D(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &               KL2,KEYOUT,NBLK,NBAND2D,KEY2D,ZNOD2D,BCOF2D,
     &               DCOF2D,KEYCR,BCOFG,DCOFG,ZNODE)
C***********************************************************************
C Forms a 2D matrix by aggregating the 3D stiffness matrix. Performs
C factorization to the 2D matrix.
C This is a DDWORK2D routine
C
C INPUT:
C   KEYCR(GJ) = KEYOUT VALUES FOR CORNER POINTS ON A 3D GRID
C   BCOFG(L,M,GJ) = OFF DIAGONAL COEF. OF THE GLOBAL 3D GRID MATRIX
C   DCOFG(L,GJ) = DIAGONAL COEF. OF THE GLOBAL 3D GRID MATRIX
C   ZNODE(GJ) = INDICATOR OF NO ELASTIC CALCULATION ON A 3D GRID NODE
C
C OUTPUT:
C   BCOF2D(L,M,GJ2D) = OFF DIAGONAL COEF. OF A 2D GRID MATRIX
C   DCOF2D(L,GJ2D) = DIAGONAL COEF. OF A 2D GRID MATRIXC
C   ZNOD2D(GJ2D) = INDICATOR OF NO ELASTIC CALCULATION ON A 2D GRID NODE
C***********************************************************************
      INCLUDE 'pebdary.h'
      INCLUDE 'pemodel.h'

      INCLUDE 'pesolve.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,NBAND2D
      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(*),KEY2D(*),KEYCR(*)
      REAL*8  BCOF2D(9,NBAND2D,*),DCOF2D(6,*)
      REAL*8  BCOFG(9,13,*),DCOFG(6,*)
      LOGICAL ZNOD2D(*),ZNODE(*)

      INTEGER I,J,K,J1,K1,JL1,JL2,KOF,JOF,IB,GI,GJ,N1P,N12P,NB,NEQ,N
      INTEGER II,JJ,MXN4,IBAND,IROW,ICOL,LD(6),LB(6)
      INTEGER NOFF2D,IOFF2D(13),JOFF2D(4),KOFF(4),LFLAG
      LOGICAL ONCEONLY
      DATA    LD/1,4,7,5,8,9/,LB/1,2,3,5,6,9/ 
      DATA    NOFF2D/4/,JOFF2D/4*0/,ONCEONLY/.TRUE./
   
      NEQ=PE_MEQ
      NOFF=NDIM_BEFORE
      ND=NEQ*(NEQ-1)
      NB=NEQ*NEQ
      N1P=IDIM
      N2P=JDIM
      N12P=N1P*N2P
      N=JDIM*KDIM
      MXN4=NBAND2D
      
      IF(ONCEONLY) THEN
         ONCEONLY=.FALSE.
         NOFF2D=4
         JOFF2D(1)=1
         JOFF2D(2)=N2P-1
         JOFF2D(3)=N2P
         JOFF2D(4)=N2P+1
         
C CHECK IOFFSET FOR REDUNDANCIES

         KOFF(1) = 0
         KOFF(2) = 0
         KOFF(3) = 0
         KOFF(4) = 0
         LFLAG = 0
         DO I = 1,NOFF2D
            K = JOFF2D(I)
            DO J = 1,I-1
               IF(K.EQ.JOFF2D(J)) THEN
                  KOFF(I)=J
                  LFLAG=1
                  EXIT
               ENDIF
            ENDDO
         ENDDO
         IF(LFLAG.NE.0) THEN
            K = 0
            DO I = 1,NOFF2D
               IF(KOFF(I).EQ.0) THEN
                  K = K+1
                  JOFF2D(K) = JOFF2D(I)
                ENDIF
            ENDDO
            DO I = K+1,NOFF2D
               JOFF2D(I)=0
            ENDDO
            NOFF2D=K
         ENDIF
      ENDIF   
      IOFF2D(13)=0
      IOFF2D(12)=1
      IOFF2D(11)=1
      IOFF2D(10)=1
      IOFF2D(9)=N2P-1
      IOFF2D(8)=N2P-1
      IOFF2D(7)=N2P-1
      IOFF2D(6)=N2P
      IOFF2D(5)=N2P
      IOFF2D(4)=N2P
      IOFF2D(3)=N2P+1
      IOFF2D(2)=N2P+1
      IOFF2D(1)=N2P+1
     
      DO J=1,N   
         DO ICOL=1,NBAND2D
            DO IB=1,NB
               BCOF2D(IB,ICOL,J)=0.D0
            ENDDO
         ENDDO
         DO IB=1,ND
            DCOF2D(IB,J)=0.D0
         ENDDO
      ENDDO

      KOF=(KL1-2)*N12P
      DO K=KL1,KL2+1
         JL1=JL1V(K)
         JL2=JL2V(K)
         KOF=KOF+N12P
         JOF=KOF+(JL1-2)*N1P
         DO J=JL1,JL2+1
            JOF=JOF+N1P
            GI=JOF+IL1-1
            IROW=(K-1)*N2P+J
            DO I=IL1,IL2+1
               GI=GI+1
               IF(KEYCR(GI).LE.0.OR.ZNODE(GI)) CYCLE
               DO L=1,ND
                  DCOF2D(L,IROW)=DCOF2D(L,IROW)+DCOFG(L,GI)
               ENDDO
               DO IDIR=1,NOFF
                  GJ=GI-IOFFSET(IDIR,NBLK)
                  IF(GJ.LE.0.OR.KEYCR(GJ).LE.0) CYCLE
                  IF(ZNODE(GJ)) CYCLE
                  ICOL=IROW-IOFF2D(IDIR)
                  IF(ICOL.EQ.IROW) THEN
                     DO L=1,ND
                        DCOF2D(L,IROW)=DCOF2D(L,IROW)
     &                                 +BCOFG(LD(L),IDIR,GI)
                        DCOF2D(L,IROW)=DCOF2D(L,IROW)
     &                                 +BCOFG(LB(L),IDIR,GI)
                     ENDDO
                  ELSE 
                     DO IB=1,NB
                        IBAND=IROW-ICOL
                        BCOF2D(IB,IBAND,IROW)=BCOF2D(IB,IBAND,IROW)
     &                                       +BCOFG(IB,IDIR,GI)
                     ENDDO
                  ENDIF
               ENDDO
            ENDDO
         ENDDO
      ENDDO     
          
      DO J=1,N 
         ZNOD2D(J)=.TRUE.     
         IF(DCOF2D(1,J).NE.0.D0) THEN
            ZNOD2D(J)=.FALSE.
            KEY2D(J)=1
         ENDIF
      ENDDO
      
C ELIMINATE RIGID BODY DISPLACEMENTS

      IF(IZEROG(2).LT.0.D0) THEN
         II = 0
         JOF = 0 
         LOOP1 : DO J=1,JDIM
            JOF = JOF+1
            JJ=JOF+(KL1-2)*JDIM
            DO K=KL1,KL2+1
               JJ=JJ+N2P
               IF(KEY2D(JJ).GT.0.AND.DCOF2D(1,JJ).GT.0.D0) THEN
                  DCOF2D(2,JJ)=0.D0
                  DCOF2D(5,JJ)=0.D0
                  DO IDIR=1,NOFF2D
                     IOFF=JOFF2D(IDIR)         
                     BCOF2D(2,IOFF,JJ)=0.D0
                     BCOF2D(5,IOFF,JJ)=0.D0  
                     BCOF2D(8,IOFF,JJ)=0.D0
                  ENDDO
                  DO IDIR=1,NOFF2D
                     IOFF=JOFF2D(IDIR)
                     II=JJ+IOFF
                     IF(II.LE.N.AND.KEY2D(II).NE.0) THEN
                        BCOF2D(4,IOFF,II)=0.D0
                        BCOF2D(5,IOFF,II)=0.D0
                        BCOF2D(6,IOFF,II)=0.D0
                     ENDIF
                  ENDDO
                  II=JJ
                  EXIT LOOP1
               ENDIF
            ENDDO
         ENDDO LOOP1
      ENDIF

      IF(IZEROG(3).LT.0.D0) THEN
         KOF = (KL1-2)*N2P
         LOOP2 : DO K = KL1,KL2+1
            JL1=JL1V(K)
            JL2=JL2V(K)
            KOF = KOF+N2P
            JJ = KOF+JL1-1
            DO J=JL1,JL2+1
               JJ=JJ+1
               IF(KEY2D(JJ).GT.0.AND.DCOF2D(1,JJ).GT.0.D0) THEN
                  DCOF2D(3,JJ)=0.D0
                  DCOF2D(5,JJ)=0.D0
                  DO IDIR=1,NOFF2D
                     IOFF=JOFF2D(IDIR)
                     BCOF2D(3,IOFF,JJ)=0.D0
                     BCOF2D(6,IOFF,JJ)=0.D0
                     BCOF2D(9,IOFF,JJ)=0.D0
                  ENDDO
                  DO IDIR=1,NOFF2D
                     IOFF=JOFF2D(IDIR)
                     II=JJ+IOFF
                     BCOF2D(7,IOFF,II)=0.D0
                     BCOF2D(8,IOFF,II)=0.D0
                     BCOF2D(9,IOFF,II)=0.D0
                  ENDDO
                  II=JJ
                  EXIT LOOP2
               ENDIF
            ENDDO
         ENDDO LOOP2

         IF(IZEROG(2).LT.0.D0) THEN
            KOF = (KL1-2)*N2P
            LOOP3 : DO K = KL1,KL2+1
               JL1=JL1V(K)
               JL2=JL2V(K)
               KOF=KOF+N2P
               JJ=KOF+JL2+2
               DO J=JL2+1,JL1,-1
                  JJ=JJ-1  
                  IF(KEY2D(JJ).GT.0.AND.DCOF2D(1,JJ).GT.0.D0.AND.
     &               II.NE.JJ) THEN
                     DCOF2D(3,JJ)=0.D0
                     DCOF2D(5,JJ)=0.D0
                     DO IDIR=1,NOFF2D
                        IOFF=JOFF2D(IDIR)
                        BCOF2D(3,IOFF,JJ)=0.D0
                        BCOF2D(6,IOFF,JJ)=0.D0
                        BCOF2D(9,IOFF,JJ)=0.D0
                     ENDDO
                     DO IDIR=1,NOFF2D
                        IOFF=JOFF2D(IDIR)
                        II=JJ+IOFF
                        BCOF2D(7,IOFF,II)=0.D0
                        BCOF2D(8,IOFF,II)=0.D0
                        BCOF2D(9,IOFF,II)=0.D0
                     ENDDO
                     EXIT LOOP3
                  ENDIF
               ENDDO
            ENDDO LOOP3
         ENDIF 
      ENDIF
                   
      CALL FACTOR(DCOF2D,BCOF2D,KEY2D,N,NBAND2D,MXN4,KERR) 
      
      END

C***********************************************************************
      SUBROUTINE PEW_SOLVE2D(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                KL2,KEYOUT,NBLK,NBAND2D,KEY2D,ZNOD2D,BCOF2D,
     &                DCOF2D,KEYCR,R,Z,AB,AD,ZNODE)
C***********************************************************************
C Performs one 2D correction. 2D problem is solved by a direct solver
C This is DDWORK2D routine.
C 
C INPUT:
C   R(GJ,L) = RESIDUALS OF THE LINEAR SYSTEM ON A 3D GRID
C   Z(GJ,L) = UNKNOWN VALUES ON A 3D GRID BEFORE THE 2D CORRECTION
C   AB(L,M,GJ) = OFF DIAGONAL COEF. OF A 3D STIFFNESS MATRIX
C   AD(L,GJ) = DIAGONAL COEF. OF A 3D STIFFNESS MATRIX
C   ZNODE(GJ) = INDICATOR OF NO ELASTIC CALCULATION ON A 3D GRID NODE 
C  
C OUTPUT:
C   Z(GJ,L) = UNKNOWN VALUES ON A 3D GRID AFTER THE 2D CRRECTION
C***********************************************************************
      INCLUDE 'control.h'
      
      INCLUDE 'pemodel.h'
      INCLUDE 'pebdary.h'
      INCLUDE 'pesolve.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,NBAND2D
      INTEGER JL1V(KDIM),JL2V(KDIM),        KEYOUT(IDIM,JDIM,KDIM)
      INTEGER KEY2D(JDIM,KDIM),             KEYCR(IDIM*JDIM*KDIM)
      REAL*8  BCOF2D(9,NBAND2D,JDIM,KDIM),  DCOF2D(6,JDIM,KDIM)
      REAL*8  R(IDIM*JDIM*KDIM,3),          Z(IDIM*JDIM*KDIM,3)
      REAL*8  AB(9,13,*),                   AD(6,*)
      LOGICAL ZNOD2D(JDIM,KDIM),            ZNODE(IDIM*JDIM*KDIM)

      INTEGER I,J,K,I2,I3,JL1,JL2,IROW,IE,NEQ,MXN4,N,IAD(3,3),IAB(3,3)
      REAL*8  RES2D(JDIM,KDIM,3),X(JDIM,KDIM,3)
      REAL*8  R1(IDIM*JDIM*KDIM,3)
      DATA    IAD/1,2,3, 2,4,5, 3,5,6/
      DATA    IAB/1,4,7, 2,5,8, 3,6,9/

      NEQ=PE_MEQ
      MXN4=NBAND2D
      N=JDIM*KDIM

      NOFF=1+3*(NEQ-1)**2
      N1P=IDIM
      N12P=N1P*JDIM
      N123P=N12P*KDIM

C CALCULATE 3D RESIDUAL

      DO J=1,N123P
         R1(J,1)=0.D0
         R1(J,2)=0.D0
         R1(J,3)=0.D0
         IF(KEYCR(J).GT.0) THEN
            R1(J,1)=R(J,1)
            R1(J,2)=R(J,2)
            R1(J,3)=R(J,3)
         ENDIF
      ENDDO

      KOF = (KL1 - 2) * N12P
      DO I3 = KL1,KL2+1
         JL1=JL1V(I3)
         JL2=JL2V(I3)
         KOF = KOF + N12P
         JOF = KOF + (JL1 - 2) * N1P
         DO I2 = JL1,JL2 + 1
            JOF = JOF + N1P
            I = JOF + IL1 - 1
            DO I1 = IL1, IL2 + 1
               I = I + 1
               IF(KEYCR(I).LE.0.OR.AD(1,I).LE.0.D0) CYCLE
               DO IE=1,NEQ
                  DO JE=1,NEQ
                     ID=IAD(JE,IE)
                     R1(I,IE)=R1(I,IE)-AD(ID,I)*Z(I,JE)
                  ENDDO
               ENDDO
            ENDDO
         ENDDO
      ENDDO

      KOF = (KL1 - 3) * N12P
      DO I3 = KL1-1,KL2+1
         IF(I3.EQ.KL1-1) THEN
            JL1=JL1V(KL1-1)
            JL2=JL2V(KL1-1)
         ELSE IF(I3.EQ.KL2+1) THEN
            JL1=JL1V(KL2)
            JL2=JL2V(KL2)
         ELSE
            JL1=MIN(JL1V(I3),JL1V(I3-1),JL1V(I3+1))
            JL2=MAX(JL2V(I3),JL2V(I3-1),JL2V(I3+1))
         ENDIF
         KOF = KOF + N12P
         JOF = KOF + (JL1 - 3) * N1P
         DO I2 = JL1-1,JL2 + 1
            JOF = JOF + N1P
            I = JOF + IL1 - 1
            DO I1 = IL1, IL2 + 1
               I = I + 1
               IF(KEYCR(I).EQ.0.OR.ZNODE(I)) CYCLE
               DO IDIR=1,NOFF
                  J=I-IOFFSET(IDIR,NBLK)                     
                  IF(J.LE.0.OR.KEYCR(J).EQ.0.OR.ZNODE(J)) CYCLE
                  IF(KEYCR(I).GT.0) THEN
                     DO IE=1,NEQ
                        DO JE=1,NEQ
                           IB=IAB(JE,IE)
                           R1(I,IE)=R1(I,IE)-AB(IB,IDIR,I)*Z(J,JE)
                        ENDDO
                     ENDDO
                  ENDIF
                  IF(KEYCR(J).GT.0) THEN
                     DO IE=1,NEQ
                        DO JE=1,NEQ 
                           IB=IAB(IE,JE)
                           R1(J,IE)=R1(J,IE)-AB(IB,IDIR,I)*Z(I,JE)
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDDO
         ENDDO
      ENDDO


C ZERO RESC IN THE 2D GRID
     
      DO I3=KL1,KL2+1
         DO I2=JL1V(I3),JL2V(I3)+1
            RES2D(I2,I3,1)=0.D0
            RES2D(I2,I3,2)=0.D0
            RES2D(I2,I3,3)=0.D0
         ENDDO
      ENDDO

C SUM OVER COLUMNS TO GET 2D RESIDUALS

      KOF=(KL1-2)*N12P
      DO I3=KL1,KL2+1
         JL1=JL1V(I3)
         JL2=JL2V(I3)
         KOF = KOF + N12P
         JOF = KOF + (JL1 - 2) * N1P
         DO I2 = JL1,JL2 + 1
            JOF = JOF + N1P
            I = JOF + IL1 - 1
            DO I1 = IL1, IL2 + 1
               I = I + 1 
               IF(KEYCR(I).LE.0.OR.ZNODE(I)) CYCLE
               DO IE=1,NEQ
                  RES2D(I2,I3,IE)=RES2D(I2,I3,IE)+R1(I,IE)
               ENDDO
            ENDDO
         ENDDO
      ENDDO

C ELIMINATE RIGID BODY DISPLACEMENTS
      
      IF(IZEROG(2).LT.0.D0) THEN
         LOOP1 : DO J=1,JDIM
            DO K=KL1,KL2+1
               IF(KEY2D(J,K).GT.0.AND.DCOF2D(1,J,K).GT.0.D0) THEN
                  RES2D(J,K,2)=0.D0
                  EXIT LOOP1
               ENDIF
            ENDDO
         ENDDO LOOP1
      ENDIF
      IF(IZEROG(3).LT.0.D0) THEN
         LOOP2 : DO K=KL1,KL2+1
            DO J=JL1V(K),JL2V(K)
               IF(KEY2D(J,K).GT.0.AND.DCOF2D(1,J,K).GT.0.D0) THEN
                  RES2D(J,K,3)=0.D0
                  I2=J
                  I3=K
                  EXIT LOOP2
               ENDIF
            ENDDO
         ENDDO LOOP2
         IF(IZEROG(2).LT.0.D0) THEN
            LOOP3 : DO K=KL1,KL2+1
               DO J=JL2V(K)+1,JL1V(K),-1
                  IF(KEY2D(J,K).GT.0.AND.DCOF2D(1,J,K).GT.0.D0.AND.
     &               (J.NE.I2.OR.K.NE.I3)) THEN
                     RES2D(J,K,3)=0.D0
                     EXIT LOOP3
                  ENDIF
               ENDDO
            ENDDO LOOP3
         ENDIF
      ENDIF 

C SOLVE FOR 2D SOLUTIONS

      CALL BACK_SOLVE(DCOF2D,BCOF2D,RES2D,X,KEY2D,ZNOD2D,N,NBAND2D,
     &     MXN4,KERR)

C UPDATE 3D SOLUTIONS

      KOF = (KL1 - 2) * N12P
      DO I3 = KL1,KL2+1 
         JL1=JL1V(I3)
         JL2=JL2V(I3)
         KOF = KOF + N12P
         JOF = KOF + (JL1 - 2) * N1P
         DO I2 = JL1,JL2 + 1
            JOF = JOF + N1P
            I = JOF + IL1 - 1
            DO I1 = IL1, IL2 + 1
               I = I + 1 
               IF(KEYCR(I).LE.0.OR.ZNODE(I)) CYCLE
               DO IE=1,NEQ
                  Z(I,IE)=Z(I,IE)+X(I2,I3,IE)
               ENDDO
            ENDDO
         ENDDO
      ENDDO

      END


C***********************************************************************
      SUBROUTINE FACTOR(EDIAG,EFACTOR,KEYOUT,N,NBAND,MXN4,KERR)
C***********************************************************************
C Factorization rouine
C
C INPUT:
C   EDIAG(L,GJ) = DIAGONAL COEFFICIENTS OF AN ELASTICITY MATRIX
C   EFACTOR(L,M,GJ) = OFF DIAGONAL COEFFICIENTS OF AN ELASTICITY MATRIX
C   KEYOUT(GJ) = KEYOUT VALUES FOR CORNER POINTS
C   N = TOTAL NUMBER OF NODES
C   NBAND = BANDWIDTH OF THE ELASTICITY SYSTEM
C   MXN4 = MAXIMUM BANDWIDTH ALLOWED FOR THE ELASTICITY SYSTEM
C   KERR = ERROR NUMBER, STEPED BY ONE
C
C OUTPOUT:
C   EDIAG(L,GJ) = DIAGONAL COEFFICIENTS OF THE FACTORED MATRIX
C   EFACTOR(L,M,GJ) = OFF DIAGONAL COEFFICIENTS OF THE FACTORED MATRIX
C***********************************************************************
      INCLUDE 'control.h'

      INTEGER N,NBAND,MXN4,KERR,KEYOUT(N)
      REAL*8  EDIAG(6,*),EFACTOR(9,MXN4,*)

      REAL*8  DTMP(6,N),DL_PROD(9,NBAND)
      INTEGER I,J,K,L,IDIR,ICOL,IROW
      REAL*8  D11,D21,D31,D22,D32,D33,U1,U2,U3,L11,L21,L31,L12,L22,L32,
     &        L13,L23,L33,DET
  
      DO J=1,N
         DO K=1,6
            DTMP(K,J)=0.D0
         ENDDO
      ENDDO
       
      DO I=1,NBAND
         DO K=1,9
            DL_PROD(K,I)=0.D0
         ENDDO
      ENDDO
     
C PERFORM FACTORIZATION BY COLUMNS
  
      DO J = 1,N
         IF(KEYOUT(J).LE.0) CYCLE
         IF(EDIAG(1,J).LE.0.D0) THEN
            DO K = 1,6
               DTMP(K,J) = 0.D0
               EDIAG(K,J) = 0.D0
            ENDDO
            CYCLE
         ENDIF
         K = 1
         DO ICOL = J - 1,MAX(1,J-NBAND),-1
            IF(KEYOUT(ICOL).LE.0) GO TO 1
            DL_PROD(1,K) = DTMP(1,ICOL) * EFACTOR(1,K,J)
     &                   + DTMP(2,ICOL) * EFACTOR(4,K,J)
     &                   + DTMP(3,ICOL) * EFACTOR(7,K,J)
            DL_PROD(2,K) = DTMP(2,ICOL) * EFACTOR(1,K,J)
     &                   + DTMP(4,ICOL) * EFACTOR(4,K,J)
     &                   + DTMP(5,ICOL) * EFACTOR(7,K,J)
            DL_PROD(3,K) = DTMP(3,ICOL) * EFACTOR(1,K,J)
     &                   + DTMP(5,ICOL) * EFACTOR(4,K,J)
     &                   + DTMP(6,ICOL) * EFACTOR(7,K,J)
            DL_PROD(4,K) = DTMP(1,ICOL) * EFACTOR(2,K,J)
     &                   + DTMP(2,ICOL) * EFACTOR(5,K,J)
     &                   + DTMP(3,ICOL) * EFACTOR(8,K,J)
            DL_PROD(5,K) = DTMP(2,ICOL) * EFACTOR(2,K,J)
     &                   + DTMP(4,ICOL) * EFACTOR(5,K,J)
     &                   + DTMP(5,ICOL) * EFACTOR(8,K,J)
            DL_PROD(6,K) = DTMP(3,ICOL) * EFACTOR(2,K,J)
     &                   + DTMP(5,ICOL) * EFACTOR(5,K,J)
     &                   + DTMP(6,ICOL) * EFACTOR(8,K,J)
            DL_PROD(7,K) = DTMP(1,ICOL) * EFACTOR(3,K,J)
     &                   + DTMP(2,ICOL) * EFACTOR(6,K,J)
     &                   + DTMP(3,ICOL) * EFACTOR(9,K,J)
            DL_PROD(8,K) = DTMP(2,ICOL) * EFACTOR(3,K,J)
     &                   + DTMP(4,ICOL) * EFACTOR(6,K,J)
     &                   + DTMP(5,ICOL) * EFACTOR(9,K,J)
            DL_PROD(9,K) = DTMP(3,ICOL) * EFACTOR(3,K,J)
     &                   + DTMP(5,ICOL) * EFACTOR(6,K,J)
     &                   + DTMP(6,ICOL) * EFACTOR(9,K,J)
  1         K = K + 1

         ENDDO

         D11 = EDIAG(1,J)
         D21 = EDIAG(2,J)
         D31 = EDIAG(3,J)
         D22 = EDIAG(4,J)
         D32 = EDIAG(5,J)
         D33 = EDIAG(6,J)
         
C CALCULATE DILU FOR DIAGONAL ENTRY J

         DO K = 1,MIN(J - 1,NBAND)
            IF(KEYOUT(J-K).LE.0) CYCLE
            D11 = D11 - EFACTOR(1,K,J) * DL_PROD(1,K)
     &                - EFACTOR(4,K,J) * DL_PROD(2,K)
     &                - EFACTOR(7,K,J) * DL_PROD(3,K)
            D21 = D21 - EFACTOR(2,K,J) * DL_PROD(1,K)
     &                - EFACTOR(5,K,J) * DL_PROD(2,K)
     &                - EFACTOR(8,K,J) * DL_PROD(3,K)
            D31 = D31 - EFACTOR(3,K,J) * DL_PROD(1,K)
     &                - EFACTOR(6,K,J) * DL_PROD(2,K)
     &                - EFACTOR(9,K,J) * DL_PROD(3,K)
            D22 = D22 - EFACTOR(2,K,J) * DL_PROD(4,K)
     &                - EFACTOR(5,K,J) * DL_PROD(5,K)
     &                - EFACTOR(8,K,J) * DL_PROD(6,K)
            D32 = D32 - EFACTOR(3,K,J) * DL_PROD(4,K)
     &                - EFACTOR(6,K,J) * DL_PROD(5,K)
     &                - EFACTOR(9,K,J) * DL_PROD(6,K)
            D33 = D33 - EFACTOR(3,K,J) * DL_PROD(7,K)
     &                - EFACTOR(6,K,J) * DL_PROD(8,K)
     &                - EFACTOR(9,K,J) * DL_PROD(9,K)
         ENDDO

C CREATE INVERSE AND PUT VALUE IN DILU

         U1 = D22 * D33 - D32 * D32
         U2 = D32 * D31 - D21 * D33
         U3 = D21 * D32 - D22 * D31
         DET = 1.D0 / (D11 * U1 + D21 * U2 + D31 * U3)
         EDIAG(1,J) = U1 * DET
         EDIAG(2,J) = U2 * DET
         EDIAG(3,J) = U3 * DET
         EDIAG(4,J) = (D11 * D33 - D31 * D31) * DET
         EDIAG(5,J) = (D21 * D31 - D11 * D32) * DET
         EDIAG(6,J) = (D11 * D22 - D21 * D21) * DET
         DTMP(1,J) = D11
         DTMP(2,J) = D21
         DTMP(3,J) = D31
         DTMP(4,J) = D22
         DTMP(5,J) = D32
         DTMP(6,J) = D33
         D11 = EDIAG(1,J)
         D21 = EDIAG(2,J)
         D31 = EDIAG(3,J)
         D22 = EDIAG(4,J)
         D32 = EDIAG(5,J)
         D33 = EDIAG(6,J)

C PROCESS EACH ENTRY L(J,:,J+IROW) IN COLUMN J

         DO IROW = 1,MIN(NBAND,N-J)
            I = J + IROW
            IF(KEYOUT(I).LE.0) CYCLE
            L11 = EFACTOR(1,IROW,I)
            L21 = EFACTOR(2,IROW,I)
            L31 = EFACTOR(3,IROW,I)
            L12 = EFACTOR(4,IROW,I)
            L22 = EFACTOR(5,IROW,I)
            L32 = EFACTOR(6,IROW,I)
            L13 = EFACTOR(7,IROW,I)
            L23 = EFACTOR(8,IROW,I)
            L33 = EFACTOR(9,IROW,I)
            L = 1
            DO K = IROW+1,MIN(I-1,NBAND)
               IF(KEYOUT(I-K).LE.0) GO TO 2
               L11 = L11 - EFACTOR(1,K,I) * DL_PROD(1,L)
     &                   - EFACTOR(4,K,I) * DL_PROD(2,L)
     &                   - EFACTOR(7,K,I) * DL_PROD(3,L)
               L21 = L21 - EFACTOR(2,K,I) * DL_PROD(1,L)
     &                   - EFACTOR(5,K,I) * DL_PROD(2,L)
     &                   - EFACTOR(8,K,I) * DL_PROD(3,L)
               L31 = L31 - EFACTOR(3,K,I) * DL_PROD(1,L)
     &                   - EFACTOR(6,K,I) * DL_PROD(2,L)
     &                   - EFACTOR(9,K,I) * DL_PROD(3,L)
               L12 = L12 - EFACTOR(1,K,I) * DL_PROD(4,L)
     &                   - EFACTOR(4,K,I) * DL_PROD(5,L)
     &                   - EFACTOR(7,K,I) * DL_PROD(6,L)
               L22 = L22 - EFACTOR(2,K,I) * DL_PROD(4,L)
     &                   - EFACTOR(5,K,I) * DL_PROD(5,L)
     &                   - EFACTOR(8,K,I) * DL_PROD(6,L)
               L32 = L32 - EFACTOR(3,K,I) * DL_PROD(4,L)
     &                   - EFACTOR(6,K,I) * DL_PROD(5,L)
     &                   - EFACTOR(9,K,I) * DL_PROD(6,L)
               L13 = L13 - EFACTOR(1,K,I) * DL_PROD(7,L)
     &                   - EFACTOR(4,K,I) * DL_PROD(8,L)
     &                   - EFACTOR(7,K,I) * DL_PROD(9,L)
               L23 = L23 - EFACTOR(2,K,I) * DL_PROD(7,L)
     &                   - EFACTOR(5,K,I) * DL_PROD(8,L)
     &                   - EFACTOR(8,K,I) * DL_PROD(9,L)
               L33 = L33 - EFACTOR(3,K,I) * DL_PROD(7,L)
     &                   - EFACTOR(6,K,I) * DL_PROD(8,L)
     &                   - EFACTOR(9,K,I) * DL_PROD(9,L)
  2            L = L + 1
            ENDDO

C TRIANGULAR PORTION OF MATRIX TIMES INVERSE(DIAGONAL)

            EFACTOR(1,IROW,I) = L11 * D11 + L12 * D21 + L13 * D31
            EFACTOR(2,IROW,I) = L21 * D11 + L22 * D21 + L23 * D31
            EFACTOR(3,IROW,I) = L31 * D11 + L32 * D21 + L33 * D31
            EFACTOR(4,IROW,I) = L11 * D21 + L12 * D22 + L13 * D32
            EFACTOR(5,IROW,I) = L21 * D21 + L22 * D22 + L23 * D32
            EFACTOR(6,IROW,I) = L31 * D21 + L32 * D22 + L33 * D32
            EFACTOR(7,IROW,I) = L11 * D31 + L12 * D32 + L13 * D33
            EFACTOR(8,IROW,I) = L21 * D31 + L22 * D32 + L23 * D33
            EFACTOR(9,IROW,I) = L31 * D31 + L32 * D32 + L33 * D33
         ENDDO
      ENDDO

      END
              
     
C***********************************************************************
      SUBROUTINE BACK_SOLVE(DILU,EFACTOR,RHS,X,KEYOUT,ZNODE,
     &           N,NBAND,MXN4,KERR)
C***********************************************************************
C Performs back solve for solutions of the linear system
C
C INPUT:
C   DILU(L,GJ) = DIAGONAL COEFFICIENTS OF THE FACTORED MATRIX
C   EFACTOR(L,M,GJ) = OFF DIAGONAL COEFFICIENTS OF THE FACTORED MATRIX
C   RHS(GJ,L) = RIGHT HAND SIDE OF A LINEAR SYSTEM
C   KEYOUT(GJ) = KEYOUT VALUES FOR CORNER POINTS
C   ZNODE(GJ) = INDICATOR OF NO ELASTIC CALCULATION ON A NODE
C   N = TOTAL NUMBER OF NODES
C   NBAND = BANDWIDTH OF THE ELASTICITY SYSTEM
C   MXN4 = MAXIMUM BANDWIDTH ALLOWED FOR THE ELASTICITY SYSTEM
C   KERR = ERROR NUMBER, STEPED BY ONE
C
C OUTPOUT:
C   X(GJ) = UNKNOWN VECTOR OF THE LINEAR SYSTEM
C***********************************************************************
      INCLUDE 'control.h'

      INTEGER N,NBAND,MXN4,KERR,KEYOUT(*)
      REAL*8  DILU(6,*),EFACTOR(9,MXN4,*)
      REAL*8  RHS(N,3),X(N,3)
      LOGICAL ZNODE(*)

      INTEGER I,J,K,L
      REAL*8  X1,X2,X3

      DO J=1,N
         X(J,1) = 0.D0
         X(J,2) = 0.D0
         X(J,3) = 0.D0
      ENDDO

C PERFORM BACKSOLVE FOR LOWER TRIANGULAR MATRIX
     
      DO J=1,N
         IF(KEYOUT(J).LE.0.OR.ZNODE(J)) CYCLE
         X1 = RHS(J,1)
         X2 = RHS(J,2)
         X3 = RHS(J,3)
         L = J-1
         DO I = 1,MIN(NBAND,J-1)
            IF(KEYOUT(L).LE.0.OR.ZNODE(L)) GO TO 1
            X1 = X1 - EFACTOR(1,I,J) * X(L,1)
     &              - EFACTOR(4,I,J) * X(L,2)
     &              - EFACTOR(7,I,J) * X(L,3)
            X2 = X2 - EFACTOR(2,I,J) * X(L,1)
     &              - EFACTOR(5,I,J) * X(L,2)
     &              - EFACTOR(8,I,J) * X(L,3)
            X3 = X3 - EFACTOR(3,I,J) * X(L,1)
     &              - EFACTOR(6,I,J) * X(L,2)
     &              - EFACTOR(9,I,J) * X(L,3)
  1         L = L - 1
         ENDDO
         X(J,1) = X1
         X(J,2) = X2
         X(J,3) = X3
      ENDDO
                  
C MULTIPLY BY INVERSE DIAGONAL
  
      DO J = 1,N
         IF(KEYOUT(J).LE.0.OR.ZNODE(J)) CYCLE
         X1 = X(J,1) 
         X2 = X(J,2)
         X3 = X(J,3)
         X(J,1) = DILU(1,J) * X1 + DILU(2,J) * X2 + DILU(3,J) * X3
         X(J,2) = DILU(2,J) * X1 + DILU(4,J) * X2 + DILU(5,J) * X3
         X(J,3) = DILU(3,J) * X1 + DILU(5,J) * X2 + DILU(6,J) * X3
      ENDDO

C PERFORM BACKSOLVE FOR UPPER TRIANGULAR MATRIX (L_TRANSPOSE)
 
      DO J = N,1,-1
         IF(KEYOUT(J).LE.0.OR.ZNODE(J)) CYCLE
         X1 = X(J,1)
         X2 = X(J,2)
         X3 = X(J,3)

         L = J - 1
         DO I = 1,MIN(NBAND,J-1)
            IF(KEYOUT(L).LE.0.OR.ZNODE(L)) GO TO 2
            X(L,1) = X(L,1) - EFACTOR(1,I,J) * X1
     &                      - EFACTOR(2,I,J) * X2
     &                      - EFACTOR(3,I,J) * X3
            X(L,2) = X(L,2) - EFACTOR(4,I,J) * X1
     &                      - EFACTOR(5,I,J) * X2
     &                      - EFACTOR(6,I,J) * X3
            X(L,3) = X(L,3) - EFACTOR(7,I,J) * X1
     &                      - EFACTOR(8,I,J) * X2
     &                      - EFACTOR(9,I,J) * X3
  2         L = L - 1
         ENDDO
      ENDDO

      END
C***********************************************************************
C                    END OF DD_WORK.DF FILE
C***********************************************************************
