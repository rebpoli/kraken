C PCG.F
C***********************************************************************
      SUBROUTINE PEPCG(KERR)
C***********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'pearydat.h'
      INCLUDE 'pesolve.h'

      INTEGER KERR

      REAL*8  PE_DDOT
      EXTERNAL PE_DDOT

      INTEGER AB,AD,R,X,Z,B,P,S1
      INTEGER ICONVG,ITER
      REAL*8  AK,AKDEN,BK,BKDEN,BKNUM,ONE
      AB=N_EBEFORE
      AD=N_EDIAG
      B=N_ERESID
      X=N_VARD
      R=N_R
      Z=N_Z
      P=N_P
      S1=N_S1

C GET INITIAL RESIDUAL

      CALL PE_CVG(ICONVG,B)
      DO I=1,PE_MEQ
         PE_RMAX0(I)=PE_RMAX(I)
         PE_RTOT0(I)=PE_RTOT(I)
      ENDDO

      CALL PE_DCOPY(B,R)
      CALL PE_ZERO(Z)
      CALL PE_PCG_PREC(AB,AD,R,Z)
 
      CALL PE_CVG(ICONVG,R)
      IF(ICONVG.NE.0) GO TO 1

      DO ITER=1,PE_ITMAX

         PE_ITER=ITER
         BKNUM=PE_DDOT(Z,R)
         IF (BKNUM.LE.0.D0) THEN
            KERR=KERR+1
            WRITE(*,*) "ERROR: DDOT OF Z AND R IS NEGATIVE"
            RETURN
         ENDIF
         IF (ITER.EQ.1) THEN
            CALL PE_DCOPY(Z,P)
         ELSE
            BK=BKNUM/BKDEN
            CALL PE_DSCALE(BK,P,Z)
         ENDIF
         BKDEN=BKNUM
         CALL PE_MATVEC(P,Z,AB,AD)
         AKDEN=PE_DDOT(P,Z)
         IF (AKDEN.LE.0.D0) THEN
             KERR=KERR+1
             WRITE(*,*) "ERROR: DDOT OF P AND Z IS NEGATIVE",AKDEN
             RETURN
         ENDIF
         AK=BKNUM/AKDEN
         CALL PE_DAXPY(AK,P,X)
         CALL PE_DAXPY(-AK,Z,R)
         CALL PE_ZERO(Z)
         CALL PE_PCG_PREC(AB,AD,R,Z)

         CALL PE_CVG(ICONVG,R)

         IF (ICONVG.NE.0) GOTO 1

      ENDDO

C STOPPING CRITERION NOT SATISFIED

      PE_ITER=PE_ITMAX+1
      KERR=KERR+1

   1  CONTINUE

      END

C***********************************************************************
      SUBROUTINE PEBICGS(KERR)
C***********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'pearydat.h'
      INCLUDE 'pesolve.h'

      INTEGER KERR

      REAL*8  PE_DDOT
      EXTERNAL PE_DDOT

      INTEGER AB,AD,R,X,Z,B,P,S,T,V,S1,R1
      INTEGER ICONVG,ITER
      REAL*8  RHO,RHO1,AK,WK,BK,TMP,ONE

      AB=N_EBEFORE
      AD=N_EDIAG
      B=N_ERESID
      X=N_VARD
      R=N_R
      Z=N_Z
      P=N_P
      S=N_S
      T=N_T
      V=N_V
      S1=N_S1
      R1=N_R1

C GET INITIAL RESIDUAL

      CALL PE_CVG(ICONVG,B)
      DO I=1,PE_MEQ
         PE_RMAX0(I)=PE_RMAX(I)
         PE_RTOT0(I)=PE_RTOT(I)
      ENDDO

      CALL PE_DCOPY(B,R)

      CALL PE_CVG(ICONVG,R)
      IF(ICONVG.NE.0) GO TO 1

C ITERATION LOOP

      DO ITER=1,PE_ITMAX
         PE_ITER=ITER
         RHO=RHO1
         RHO1=PE_DDOT(B,R)
         IF(RHO1.EQ.0.D0) THEN
            KERR=KERR+1
            WRITE(*,*) "ERROR: DDOT OF Z AND R IS NEGATIVE"
            RETURN
         ENDIF
         IF (ITER.EQ.1) THEN
            CALL PE_DCOPY(R,P)
         ELSE
            BK=(RHO1/RHO)*(AK/WK)
            CALL PE_DAXPY(-WK,V,P)
            CALL PE_DSCALE(BK,P,R)
         ENDIF
         CALL PE_ZERO(Z)
         CALL PE_BICGS_PREC(AB,AD,P,Z)

c        IF(PESOLV2D.GT.0) CALL PE_SOLVE2D(AB,AD,P,Z)
         IF(PESOLV2D.GT.0) THEN
            CALL PE_MATVEC(Z,R1,AB,AD)
            CALL PE_DSCALE(-1.D0,R1,P)
            CALL PE_SOLVE2D(AB,AD,R1,Z)
         ENDIF

         CALL PE_MATVEC(Z,V,AB,AD)
         TMP=PE_DDOT(B,V)
         AK=RHO1/TMP
         CALL PE_DCOPY(R,S)
         CALL PE_DAXPY(-AK,V,S)
         TMP=PE_DDOT(S,S)
         IF(SQRT(TMP).LE.1.D-16) THEN
             CALL PE_DAXPY(AK,Z,X)
             GO TO 1
         ENDIF
         CALL PE_ZERO(S1)
         CALL PE_BICGS_PREC(AB,AD,S,S1)
c         IF(PESOLV2D.GT.0) CALL PE_SOLVE2D(AB,AD,S,S1)
         IF(PESOLV2D.GT.0) THEN
            CALL PE_MATVEC(S1,R1,AB,AD)
            CALL PE_DSCALE(-1.D0,R1,S)
            CALL PE_SOLVE2D(AB,AD,R1,S1)
         ENDIF

         CALL PE_MATVEC(S1,T,AB,AD)
         WK=PE_DDOT(T,S)/PE_DDOT(T,T)
         IF(WK.EQ.0.D0) THEN
            KERR=KERR+1
            WRITE(*,*) "ERROR: BICGS FAILED"
            RETURN
         ENDIF
         CALL PE_DAXPY(AK,Z,X)
         CALL PE_DAXPY(WK,S1,X)
         CALL PE_DCOPY(S,R)
         CALL PE_DAXPY(-WK,T,R)
         CALL PE_CVG(ICONVG,R)
         IF (ICONVG.NE.0) GOTO 1
      ENDDO

C STOPPING CRITERION NOT SATISFIED

      PE_ITER=PE_ITMAX+1
      KERR=KERR+1

   1  CONTINUE
      END

C***********************************************************************
      SUBROUTINE PECG(NEWCOF,KERR)
C***********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'pearydat.h'
      INCLUDE 'pesolve.h'

      INTEGER KERR
      LOGICAL NEWCOF

      REAL*8  PE_DDOT
      EXTERNAL PE_DDOT

      INTEGER AB,AD,R,X,Z,B,P
      INTEGER ICONVG,ITER
      REAL*8  AK,AKDEN,BK,BKDEN,BKNUM
      AB=N_EBEFORE
      AD=N_EDIAG
      B=N_ERESID
      X=N_VARD
      R=N_R
      Z=N_Z
      P=N_P

C GET INITIAL RESIDUAL

      CALL PE_CVG(ICONVG,B)
      DO I=1,PE_MEQ
         PE_RMAX0(I)=PE_RMAX(I)
         PE_RTOT0(I)=PE_RTOT(I)
      ENDDO

      CALL PE_DCOPY(B,R)

      CALL PE_CVG(ICONVG,R)
      IF(ICONVG.NE.0) GO TO 1

C ITERATION LOOP

      DO ITER=1,PE_ITMAX

         PE_ITER=ITER
         BKNUM=PE_DDOT(R,R)
         IF (BKNUM.LE.0.D0) THEN
            KERR=KERR+1
            WRITE(*,*) "ERROR: DDOT OF Z AND R IS NEGATIVE"
            RETURN
         ENDIF
         IF (ITER.EQ.1) THEN
            CALL PE_DCOPY(R,P)
         ELSE
            BK=BKNUM/BKDEN
            CALL PE_DSCALE(BK,P,R)
         ENDIF
         BKDEN=BKNUM
         CALL PE_MATVEC(P,Z,AB,AD)
         AKDEN=PE_DDOT(P,Z)
         IF (AKDEN.LE.0.D0) THEN
             KERR=KERR+1
             WRITE(*,*) "ERROR: DDOT OF P AND Z IS NEGATIVE",AKDEN
             RETURN
         ENDIF
         AK=BKNUM/AKDEN
         CALL PE_DAXPY(AK,P,X)
         CALL PE_DAXPY(-AK,Z,R)
         CALL PE_CVG(ICONVG,R)

         IF (ICONVG.NE.0) GOTO 1
      ENDDO

C STOPPING CRITERION NOT SATISFIED

      PE_ITER=PE_ITMAX+1
      KERR=KERR+1

   1  CONTINUE
      END

C***********************************************************************
      SUBROUTINE PE_PCG_PREC(AB,AD,R,Z)
C***********************************************************************
C Call a work routine to precondtion CG.
C
C R  = ARRAY NUMBER FOR RESIDUAL                    (INPUT, INTEGER)
C Z  = ARRAY NUMBER FOR PSEUDO-RESIDUAL             (INPUT, INTEGER)
C AB = ARRAY NUMBER FOR MATRIX LOWER TRIANG. COEFFS (INPUT, INTEGER)
C AD = ARRAY NUMBER FOR MATRIX DIAGONAL COEFFS      (INPUT, INTEGER)
C ZN = ARRAY NUMBER FOR ZERO_NODE                   (INPUT, INTEGER)
C SPL= INDICATOR OF SPLITTING MATRIX                (INPUT, INTEGER)
C***********************************************************************
$POWER      'msjunk.h'
      INCLUDE 'pesolve.h'

      INTEGER R,Z,AB,AD

C CALL DOMAIN DECOMPOSITION PRECONDITIONER

      IF (PE_PREC.EQ.1) THEN
         CALL PE_BJAC(R,Z,AB,AD)
      ELSE IF(PE_PREC.EQ.2) THEN
         CALL PE_BJLINE(AB,AD,R,Z)
      ELSE IF(PE_PREC.EQ.3) THEN
         CALL PE_ILU(R,Z)
      ENDIF

      END  

C***********************************************************************
      SUBROUTINE PE_BICGS_PREC(AB,AD,R,Z)
C***********************************************************************
C Call a work routine to precondtion CG.
C
C R  = ARRAY NUMBER FOR RESIDUAL                    (INPUT, INTEGER)
C Z  = ARRAY NUMBER FOR PSEUDO-RESIDUAL             (INPUT, INTEGER)
C AB = ARRAY NUMBER FOR MATRIX LOWER TRIANG. COEFFS (INPUT, INTEGER)
C AD = ARRAY NUMBER FOR MATRIX DIAGONAL COEFFS      (INPUT, INTEGER)
C ZN = ARRAY NUMBER FOR ZERO_NODE                   (INPUT, INTEGER)
C SPL= INDICATOR OF SPLITTING MATRIX                (INPUT, INTEGER)
C***********************************************************************
$POWER      'msjunk.h'
      INCLUDE 'pesolve.h'

      INTEGER R,Z,AB,AD

C CALL DOMAIN DECOMPOSITION PRECONDITIONER

      IF (PE_PREC.EQ.1) THEN
         CALL PE_BJAC(R,Z,AB,AD)
      ELSE IF(PE_PREC.EQ.2) THEN
         CALL PE_BJLINE(AB,AD,R,Z)
      ELSE IF(PE_PREC.EQ.3) THEN
         CALL PE_ILU(R,Z)
      ENDIF
     
      END  


C***********************************************************************
C                      END OF PCG.DF
C***********************************************************************

