C EIVDAT.F -- ELASTIC MODEL INITIALIZATION REOUTINE
C ROUTINES IN THIS FILE:
C     SUBROUTINE EIVDAT(NERR)
C     SUBROUTINE EINIT(IDIM,JDIM,KDIM,LDIM,IL2,IL2,JL1V,JL2V,KL1,KL2,
C                      KEYOUT,NBLK,PV0,ROCKD)
C
C*********************************************************************    
      SUBROUTINE EIVDAT(NERR)
C*********************************************************************
C Elastic model initialization routine
C  1. Initialize some parameters
C  2. Call Ruijie''s code to solve for initial displacement
C  3. Store initial volumetric strain
C Saumik
C  4. Compute updated permeability and transmissibility
C  5. Compute permeability inverse for multi-point flux option 
C Saumik
C
C  NERR = ERROR KEY STEPPED BY ONE FOR EACH ERROR
C         (INPUT AND OUTPUT, INTEGER)
C********************************************************************* 
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'times.h'
      INCLUDE 'layout.h'
      INCLUDE 'earydat.h'
      INCLUDE 'emodel.h'
      INCLUDE 'ebdary.h'
      INCLUDE 'mpfaary.h'
C --- SAUMIK,BGANIS
$SIMFMFE      INCLUDE 'tarydat.h'
$CMFMFE      INCLUDE 'xarydat.h'
      EXTERNAL COMPDEN_3PH,POR_VOL,ADD_ROCK_DEN,
     &         FLOWTOMECHANICS,MECHANICSTOFLOW,
     &         FLOWTOMECHANICSNONMATCHING,MECHANICSTOFLOWNONMATCHING
      INTEGER COPYARG(7)
      DATA COPYARG / 7*0 /
C --- SAUMIK,BGANIS

      INTEGER  NERR
      
      INTEGER  I,J,NEQ,KERR,ITER,JINIT(7),JCPY(4),JBODY(8)
      LOGICAL  FACTOR 
      REAL*8   ZERO
      EXTERNAL CPYARYR8,CPYARYR8N,SETARYR8,EINIT,ESETUP_KEYOUT,
     &         EPRTDISP,EPRTPRES,BULKDEN_1PH,BULKDEN_2PH,
     &         BULKDEN_3PH,
     &         ESETUP_ELEM_NODE,COORD2DISP,DISP2COORD,EPROCOUTPUT,
     &         SETARYR8N,CPYPERMTOR8,
     &         CPYARYR4,EFFEC_MEAN_STRESS,TRANC1,TRANC2,EUPDATECR

      INTEGER  JSTRS(5),JTRANC(10)
      INTEGER  JPRTDISP(3),JPRTPRES(2)
      PARAMETER (ZERO=0.D0)

C FLOW MODEL INITIALIZATION

$SIMFMFE      MODACT = $TMMODEL
$SIMFMFE      IF(PEFLOW.EQ.$TMMODEL.OR.MBPOROE) CALL TIVDAT(NERR)
              ! SAUMIK,BGANIS
$SIMFMFE      MODACT=$PEMODEL

$CMFMFE      MODACT = $XMMODEL
$CMFMFE      IF(PEFLOW.EQ.$XMMODEL.OR.MBPOROE) CALL XIVDAT(NERR)
             ! SAUMIK,BGANIS
$CMFMFE      MODACT=$PEMODEL

ctm
$HIMFMFE      MODACT = $HMMODEL
$HIMFMFE      IF(PEFLOW.EQ.$HMMODEL.OR.MBPOROE) CALL HIVDAT(NERR)
              ! SAUMIK,BGANIS
$HIMFMFE      MODACT=$PEMODEL
ctm

cHYDROE_MPFA      MODACT = MGMODEL
cHYDROE_MPFA      IF(PEFLOW.EQ.MGMODEL) CALL GIVDAT(NERR)
cHYDROE_MPFA      MODACT=$PEMODEL

C SETUP TIMERS

      TIMNAM(35)='POROE MODEL TOTAL TIME'
      TIMKLS(35)=1
      TIMNAM(36)='POROE MODEL INITIALIZATION TIME'
      TIMKLS(36)=4
      TIMNAM(37)='POROE MODEL TOTAL LINEAR SOLVER TIME'
      TIMKLS(37)=1
      TIMNAM(38)='POROE MODEL COMMUNICATION'
      TIMKLS(38)=2
      TIMNAM(39)='POROE MODEL COPY MATRIX TO SOLVER TIME'
      TIMKLS(39)=4
      TIMNAM(40)='POROE MODEL SETUP AMG SOLVER/PRECOND TIME'
      TIMKLS(40)=4
      TIMNAM(41)='POROE MODEL COPY/OBTAIN SOLVER RHS TIME'
      TIMKLS(41)=4
      TIMNAM(42)='POROE MODEL SOLVER SOLVE TIME'
      TIMKLS(42)=1
      TIMNAM(43)='POROE MODEL PRE-PROCESS TIME'
      TIMKLS(43)=1
      TIMNAM(44)='POROE MODEL MATRIX-RHS SETUP TIME'
      TIMKLS(44)=1
      TIMNAM(45)='POROE MODEL POST-PROCESS TIME'
      TIMKLS(45)=1
      TIMNAM(46)='POROE MODEL MATRIX-RHS STEP TIME'
      TIMKLS(46)=1
      TIMNAM(47)='POROE MODEL STRN-STRS UPDATE TIME'
      TIMKLS(47)=1

      CALL TIMON(35)
      CALL TIMON(36)

$MANY      CALL TIMON(38)
$MANY      CALL UPDATE(N_PRESS,2)
$MANY      CALL UPDATE(N_EFLDEN,2)
$MANY      CALL TIMOFF(38)

      IF(MBPOROE) THEN ! SAUMIK,BGANIS
C CONVERT N_POR TO PORE VOLUME FOR MECHANICS IF MBPOROE IS TRUE
C DONE IN MPFA_POR_VOL FOR FLOW MODELS
C ALSO TRANSFER N_POR TO N_PORTRUE BEFORE UPDATING TO PORE VOLUME
         JINIT(1)=3
         JINIT(2)=N_EVOL
         JINIT(3)=N_POR
         JINIT(4)=N_PORTRUE
         CALL CALLWORK(POR_VOL,JINIT)
      ENDIF
 
C 1.SETUP STRESS_INIT IF GRADIENT VALUES HAVE BEEN ENTERED
C 2.CONVERT ROCK DENSITY TO TOTAL BODY FORCE FOR EACH GRID BLOCK
C 3.SET UP EFFECTIVE COMPRESSIBILITY DUE TO VOLUMETRIC STRAIN
C 4.SETUP DIRECTION COSINES FOR EACH GRID BLOCK

      JINIT(1) = 6
      JINIT(2) = N_POR
      JINIT(3) = N_ROCKD
      JINIT(4) = N_XC
      JINIT(5) = N_YC
      JINIT(6) = N_ZC
      JINIT(7) = N_EVOL
      NERRC = 0
      CALL CALLWORK(EINIT,JINIT)
      
      IF(NERRC.GT.0) THEN
         NERR = NERR + 1
         CALL TIMOFF(35)
         CALL TIMOFF(36)
         RETURN
      ENDIF
$MANY      CALL TIMON(38)
$MANY      CALL UPDATE(N_MODUL,2)
$MANY      CALL UPDATE(N_POISS,2)
$MANY      CALL UPDATE(N_BIOTA,2)
$MANY      CALL UPDATE(N_BIOTM,2)
$MANY      CALL UPDATE(N_ROCKD,2)
$MANY      CALL UPDATE(N_PASSO,2)
$MANY      CALL UPDATE(N_YIELD_SIG0,2)
$MANY      CALL UPDATE(N_YIELD_ALPHA,2)
$MANY      CALL UPDATE(N_FLOW_ALPHA,2)
$MANY      CALL UPDATE(N_HARDEN_MODEL,2)
$MANY      CALL UPDATE(N_HARDEN_C1,2)
$MANY      CALL UPDATE(N_HARDEN_C2,2)
$MANY      CALL UPDATE(N_EVOL,2)
$MANY      CALL UPDATE(N_STRESS_INIT(1),2)
$MANY      CALL UPDATE(N_STRESS_INIT(2),2)
$MANY      CALL UPDATE(N_STRESS_INIT(3),2)
$MANY      CALL UPDATE(N_STRESS_INIT(4),2)
$MANY      CALL UPDATE(N_STRESS_INIT(5),2)
$MANY      CALL UPDATE(N_STRESS_INIT(6),2)
$MANY      CALL TIMOFF(38)

C SETUP ELASTIC CONNECTIONS, MAPS AND COEFFICIENTS     

      JINIT(1) = 1
      JINIT(2) = N_KEYOUT_CR
      CALL CALLWORK(ESETUP_KEYOUT,JINIT)

      JINIT(1) = 2
      JINIT(2) = N_PROCN
      JINIT(3) = N_KEYOUT_CR
      CALL CALLWORK(EPROCOUTPUT,JINIT)
$MANY      CALL TIMON(38)
$MANY      CALL UPDATE(N_PROCN,4)
$MANY      CALL TIMOFF(38)

cbw use new update function to update nodal-based element array
!bw $MANY      CALL TIMON(38)
!bw $MANY      CALL EBUILDKEYCP(NERR)
!bw $MANY      CALL TIMOFF(38)

!bw UPDATE XC,YC,ZC arrays for geomechancis calculation
!bw       JINIT(1)=5
!bw       JINIT(2)=N_EDISP
!bw       JINIT(3)=N_XC
!bw       JINIT(4)=N_YC
!bw       JINIT(5)=N_ZC
!bw       JINIT(6)=N_KEYOUT_CR
!bw $MANY      CALL CALLWORK(COORD2DISP,JINIT)
!bw $MANY      CALL TIMON(38)
!bw !bw $MANY      CALL ENODE_UPDATE(N_EDISP,'R8')
!bw $MANY      CALL UPDATE(N_EDISP,4)
!bw $MANY      CALL TIMOFF(38)
!bw $MANY      CALL CALLWORK(DISP2COORD,JINIT)  
      

C 1. SETUP LOCAL ELEMENT ID TO BE SENT TO POROHEX
C 2. SETUP LOCAL NODE ID FOR ACTIVE AND GHOST NODE
C          TO BE SENT TO POROHEX
      JINIT(1) = 2
      JINIT(2) = N_ELEM_LID
      JINIT(3) = N_NODE_LID
      CALL CALLWORK(ESETUP_ELEM_NODE,JINIT)
      
!BW SETUP GLOBAL ACTIVE NODE INDEX     
      CALL EGET_GELEI_LSIZE(NERR)

C UPDATE BOUNDARY CONDITION ACROSS PROCESSORS
         KERR = 0
$MANY      CALL TIMON(38)
$MANY         CALL EBDARY_UPDATE(KERR)
$MANY      CALL TIMOFF(38)

C COPY INITIAL PORE VOLUME TO PORE
C VOLUME ASSOCIATED WITH FLOW

      JCPY(1) = 2
      JCPY(2) = N_POR
      JCPY(3) = N_EPV_FLOW
      CALL CALLWORK(CPYARYR8,JCPY)

C MOVED BULK DENSITY INITIALIZATION HERE

      CALL ESETARYR8N(N_BULK_DEN,ZERO,1)

C IN CASE OF MULTIBLOCK POROE, FLUID DENSITY IS UPSCALED

      IF(MBPOROE) THEN ! SAUMIK,BGANIS
         COPYARG(1)=6
         COPYARG(3)=N_XC
         COPYARG(4)=N_YC
         COPYARG(5)=N_ZC
         COPYARG(7)=N_EVOL

C UPSCALE PORE PRESSURE

         COPYARG(2)=N_PRESS
         COPYARG(6)=N_PRES
$SIMFMFE        MODACT=$TMMODEL
$CMFMFE        MODACT=$XMMODEL
         IF(NONMATCHING) THEN
         CALL TRANSFERDATA(FLOWTOMECHANICSNONMATCHING,COPYARG)
         ELSE
         CALL TRANSFERDATA(FLOWTOMECHANICS,COPYARG)
         ENDIF
         MODACT=$PEMODEL
         CALL TIMON(38)
         CALL UPDATE(N_PRESS,2)
         CALL TIMOFF(38)

C UPSCALE FLUID DENSITY FROM SINGLE PHASE FLOW BLOCK

$SIMFMFE      COPYARG(2)=N_EFLDEN
$SIMFMFE      COPYARG(6)=N_FLDEN
$SIMFMFE      MODACT=$TMMODEL
$SIMFMFE      IF(NONMATCHING) THEN
$SIMFMFE      CALL TRANSFERDATA(FLOWTOMECHANICSNONMATCHING,COPYARG)
$SIMFMFE      ELSE
$SIMFMFE      CALL TRANSFERDATA(FLOWTOMECHANICS,COPYARG)
$SIMFMFE      ENDIF
$SIMFMFE      MODACT=$PEMODEL
$SIMFMFE      CALL TIMON(38)
$SIMFMFE      CALL UPDATE(N_EFLDEN,2)
$SIMFMFE      CALL TIMOFF(38)

C COMPUTE FLUID DENSITY ARISING OUT OF COMPOSITIONAL FLOW

$CMFMFE      MODACT=$XMMODEL
$CMFMFE      CALL ESETARYR8N(N_COMP_DEN,ZERO,1)
$CMFMFE      JBODY(1)=5
$CMFMFE      JBODY(2)=N_COMP_DEN
$CMFMFE      JBODY(3)=N_PV
$CMFMFE      JBODY(4)=N_PMD
$CMFMFE      JBODY(5)=N_SAT
$CMFMFE      JBODY(6)=N_EVOL
$CMFMFE      CALL CALLWORK(COMPDEN_3PH,JBODY)
$CMFMFE      CALL TIMON(38)
$CMFMFE      CALL UPDATE(N_COMP_DEN,2)
$CMFMFE      CALL TIMOFF(38)

C UPSCALE FLUID DENSITY FROM COMPOSITIONAL FLOW BLOCK 

$CMFMFE      COPYARG(2)=N_BULK_DEN
$CMFMFE      COPYARG(6)=N_COMP_DEN
$CMFMFE      IF(NONMATCHING) THEN
$CMFMFE      CALL TRANSFERDATA(FLOWTOMECHANICSNONMATCHING,COPYARG)
$CMFMFE      ELSE
$CMFMFE      CALL TRANSFERDATA(FLOWTOMECHANICS,COPYARG)
$CMFMFE      ENDIF
$CMFMFE      MODACT=$PEMODEL
$CMFMFE      CALL TIMON(38)
$CMFMFE      CALL UPDATE(N_BULK_DEN,2)
$CMFMFE      CALL TIMOFF(38)

C ADD ROCK DENSITY TO UPSCALED FLUID DENSITY

$CMFMFE      JBODY(1)=2
$CMFMFE      JBODY(2)=N_BULK_DEN
$CMFMFE      JBODY(3)=N_ROCKD
$CMFMFE      CALL CALLWORK(ADD_ROCK_DEN,JBODY)
$CMFMFE      CALL TIMON(38)
$CMFMFE      CALL UPDATE(N_BULK_DEN,2)
$CMFMFE      CALL TIMOFF(38)
      ENDIF ! IF MBPOROE

C CALCULATE BODY FORCE DUE TO FLUID PRESSURE

      IF(PEFLOW.EQ.$TMMODEL) THEN
          JBODY(1) = 5
          JBODY(2) = N_ROCKD
          JBODY(3) = N_EPV_FLOW
          JBODY(4) = N_EFLDEN
          JBODY(5) = N_BULK_DEN
          JBODY(6) = N_EVOL
          CALL CALLWORK(BULKDEN_1PH,JBODY)
ctm
      ELSEIF(PEFLOW.EQ.$HMMODEL) THEN
          JBODY(1) = 7
          JBODY(2) = N_ROCKD
          JBODY(3) = N_EPV_FLOW
          JBODY(4) = N_BULK_DEN
          JBODY(5) = N_EVOL
          JBODY(6) = N_ECON(1)
          JBODY(7) = N_ECON(2)
          JBODY(8) = N_ESAT(1)
ctm
c      ELSEIF(PEFLOW.EQ.MGMODEL) THEN
c          JBODY(1) = 7
c          JBODY(2) = N_ROCKD
c          JBODY(3) = N_EPV_FLOW
c          JBODY(4) = N_BULK_DEN
c          JBODY(5) = N_EVOL
c          JBODY(6) = N_ECON(1)
c          JBODY(7) = N_ECON(2)
c          JBODY(8) = N_ESAT(1)
c          CALL CALLWORK(BULKDEN_2PH,JBODY)
         ELSEIF(PEFLOW.EQ.$XMMODEL.AND.(.NOT.MBPOROE)) THEN
         ! SAUMIK,BGANIS
$CMFMFE            JBODY(1) = 6
$CMFMFE            JBODY(2) = N_BULK_DEN
$CMFMFE            JBODY(3) = N_EVOL
$CMFMFE            JBODY(4) = N_ROCKD
$CMFMFE            JBODY(5) = N_EPV_FLOW
$CMFMFE            JBODY(6) = N_EPMD
$CMFMFE            JBODY(7) = N_ESAT(1)
$CMFMFE            CALL CALLWORK(BULKDEN_3PH,JBODY)
      ENDIF
$MANY      CALL TIMON(38)
$MANY      CALL UPDATE(N_BULK_DEN,2)
$MANY      CALL TIMOFF(38)

! bw - INITIAL PRESSURE IS REFERENCE PRESSURE
      JCPY(1) = 2
      JCPY(2) = N_PRESS
      JCPY(3) = N_PREF    !bw N_PREF needs to be input
      CALL CALLWORK(CPYARYR8,JCPY)

! bag8 - ZERO REFERENCE PRESSURE
!      R8UTIL=0.D0
!      I4UTIL=1
!      CALL CALLWORK(SETARYR8N,[3,N_PREF,N_R8U,N_I4U])

C SETUP FRACTURE PROFILE

      CALL ESETUP_FRAC_PROFILE(NERR)

!bw Why is TIM = 0.0 and DELTIM = 0.0 needed?
!      TIM=0.0
!      DELTIM=0.0

C SETUP COORDINATES, CONNECTIVITITY
C AND SOLVE MECHANICS SYSTEM HERE

      CALL ESETUP_POROHEX(0,KERR)
$MANY      CALL TIMON(38)
$MANY      CALL ENODE_UPDATE(N_EDISP,'R8')
$MANY      CALL TIMOFF(38)

!      CALL TIMON(45)
      CALL POROHEX_POST_PRCSS(0,KERR)
!      CALL TIMOFF(45)

$MANY      CALL TIMON(38)
$MANY      CALL UPDATE(N_NODE_WIDTH,4)
$MANY      CALL TIMOFF(38)

C SAUMIK
C TRANSIENT PERMEABILITY UMBRELLA

      IF (SDPM) THEN  

C        COPY INITIAL PERMEABILITY 
C        TO REFERENCE PERMEABILITY

         JCPY(1) = 2
         JCPY(2) = N_XPERM
         JCPY(3) = N_XPERM_REF
         CALL CALLWORK(CPYARYR4,JCPY)

         JCPY(1) = 2
         JCPY(2) = N_YPERM
         JCPY(3) = N_YPERM_REF
         CALL CALLWORK(CPYARYR4,JCPY)
      
         JCPY(1) = 2
         JCPY(2) = N_ZPERM
         JCPY(3) = N_ZPERM_REF
         CALL CALLWORK(CPYARYR4,JCPY)

C        CALCULATE INITIAL MEAN EFFECTIVE STRESS
C        AND COPY TO REFERENCE MEAN EFFECTIVE STRESS

         JSTRS(1)=4
         JSTRS(2)=N_MODUL
         JSTRS(3)=N_POISS
         JSTRS(4)=N_VSTRAIN
         JSTRS(5)=N_EMSTRESS
         CALL CALLWORK(EFFEC_MEAN_STRESS,JSTRS) 

$MANY         CALL TIMON(38)
$MANY         CALL UPDATE(N_EMSTRESS,2)
$MANY         CALL TIMOFF(38)

         JCPY(1) = 2
         JCPY(2) = N_EMSTRESS
         JCPY(3) = N_EMSTRESS_REF
         CALL CALLWORK(CPYARYR8,JCPY)

C        CALCULATE UPDATED PERMEABILITY BASED 
C        ON INITIAL VOLUMETRIC STRAIN

         CALL PE_PERM()

C        CALCULATE TRANSMISSIBILITY 

         CALL TIMON(21)

         IF (KNDGRD.EQ.1) THEN
C        FOR ORTHOGONAL GRID OPTION 

            JTRANC(1)=6
            JTRANC(2)=N_TCOFX
            JTRANC(3)=N_TCOFY
            JTRANC(4)=N_TCOFZ
            JTRANC(5)=N_XPERM
            JTRANC(6)=N_YPERM
            JTRANC(7)=N_ZPERM
            CALL CALLWORK(TRANC1,JTRANC)

$MANY       CALL TIMON(38)
$MANY       CALL UPDATE(N_TCOFX,2)
$MANY       CALL UPDATE(N_TCOFY,2)
$MANY       CALL UPDATE(N_TCOFZ,2)
$MANY       CALL TIMOFF(38)

         ELSEIF (KNDGRD.EQ.3) THEN
C        FOR CORNER POINT OPTION 
C        WITH MPFA

            JTRANC(1)=9
            JTRANC(2)=N_TCOFX
            JTRANC(3)=N_TCOFY
            JTRANC(4)=N_TCOFZ
            JTRANC(5)=N_XPERM
            JTRANC(6)=N_YPERM
            JTRANC(7)=N_ZPERM
            JTRANC(8)=N_XC
            JTRANC(9)=N_YC
            JTRANC(10)=N_ZC
$MPFA       CALL CALLWORK(TRANC2,JTRANC)

$MANY       CALL TIMON(38)
$MANY       CALL UPDATE(N_TCOFX,2)
$MANY       CALL UPDATE(N_TCOFY,2)
$MANY       CALL UPDATE(N_TCOFZ,2)
$MANY       CALL TIMOFF(38)

C           CALCULATE PERMEABILITY INVERSE 
C           THIS PERM INVERSE IS USED IN THE 
C           MULTI-POINT FLUX CALCULATIONS

$MPFA       CALL MPFA_PERMINV(KERR)
C$MPFA       CALL FRAC_PERMINV(KERR)
$MPFA       CALL MPFA_SET_AINV_TRAN(KERR)

         ENDIF

C        CONVERT REAL*4 PERM TO REAL*8
C        THIS REAL*8 PERM IS VISUALIZED IN PARAVIEW

         JCPY(1) = 3
         JCPY(2) = N_XPERM
         JCPY(3) = N_XPERM_REF
         JCPY(4) = N_XPERM_R8
         CALL CALLWORK(CPYPERMTOR8,JCPY)

         JCPY(1) = 3
         JCPY(2) = N_YPERM
         JCPY(3) = N_YPERM_REF
         JCPY(4) = N_YPERM_R8
         CALL CALLWORK(CPYPERMTOR8,JCPY)

         JCPY(1) = 3
         JCPY(2) = N_ZPERM
         JCPY(3) = N_ZPERM_REF
         JCPY(4) = N_ZPERM_R8
         CALL CALLWORK(CPYPERMTOR8,JCPY)

         CALL TIMOFF(21)

      ENDIF ! IF(SDPM)

C SAUMIK

C COPY INITIAL VOLUMETRIC STRAIN TO VSTRAIN_INIT

      JCPY(1) = 2
      JCPY(2) = N_VSTRAIN
      JCPY(3) = N_VSTRAIN_INIT
      CALL CALLWORK(CPYARYR8,JCPY)

      IF(MBPOROE) THEN ! SAUMIK,BGANIS
         COPYARG(1)=6
         COPYARG(3)=N_XC
         COPYARG(4)=N_YC
         COPYARG(5)=N_ZC
         COPYARG(7)=N_EVOL

C DOWNSCALE VOLUMETRIC STRAIN TO EVALUATE UPDATED CR

         COPYARG(2)=N_VSTRAIN
         COPYARG(6)=N_VSTRAIN
$SIMFMFE      MODACT=$TMMODEL
$CMFMFE      MODACT=$XMMODEL
         IF(NONMATCHING) THEN
         CALL TRANSFERDATA(MECHANICSTOFLOWNONMATCHING,COPYARG)
         ELSE
         CALL TRANSFERDATA(MECHANICSTOFLOW,COPYARG)
         ENDIF
         CALL TIMON(38)
         CALL UPDATE(N_VSTRAIN,2)
         CALL TIMOFF(38)
         CALL CALLWORK(EUPDATECR,[7,N_MODULFLOW,N_POISSFLOW,N_BIOTAFLOW,
     &     N_POR,N_CR,N_EVOL,N_VSTRAIN])
         CALL TIMON(38)
         CALL UPDATE(N_CR,2)
         CALL TIMOFF(38)
         MODACT=$PEMODEL
      ELSE
! saumik - 02/11/17
         CALL CALLWORK(EUPDATECR,[7,N_MODUL,N_POISS,N_BIOTA,
     &     N_POR,N_ECR,N_EVOL,N_VSTRAIN])
         CALL TIMON(38)
         CALL UPDATE(N_ECR,2)
         CALL TIMOFF(38)
      ENDIF ! IF MBPOROE

      JPRTDISP(1) = 2
      JPRTDISP(2) = N_KEYOUT_CR
      JPRTDISP(3) = N_EDISP
c     CALL CALLWORK(EPRTDISP,JPRTDISP)

cbw     CALL PRTBDDISP(KERR)

      CALL TIMOFF(36)
      CALL TIMOFF(35)

C INITIAL VALUE OUTPUT

      CALL ESTDOUTA()

  51  FORMAT(/'ERR51: POROELASTIC OPTION NOT SETUP FOR 1D OR 2D CASE')
  52  FORMAT(/'ERROR: POROELASTIC OPTION ONLY SETUP FOR BLACKI MODEL')
  54  FORMAT(/'ERROR: ELASTIC LINEAR SOLVER')
      END

C*********************************************************************
      SUBROUTINE EINIT(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                KEYOUT,NBLK,PV0,ROCKD,XC,YC,ZC,EVOL)
C*********************************************************************
C Multiply rock density times (1-phi0)
C*********************************************************************
      IMPLICIT NONE
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INCLUDE 'emodel.h'
      INCLUDE 'ebdary.h'
 
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),     KEYOUT(IDIM,JDIM,KDIM)
      REAL*8  PV0(IDIM,JDIM,KDIM),       ROCKD(IDIM,JDIM,KDIM)
      REAL*8 XC(IDIM+1,JDIM+1,KDIM+1), YC(IDIM+1,JDIM+1,KDIM+1),
     &       ZC(IDIM+1,JDIM+1,KDIM+1), EVOL(IDIM,JDIM,KDIM)
   
      INTEGER I,J,K,JL1,JL2,IOFF,JOFF,KOFF,KERR,NX,NY,NZ
      REAL*8  DX,DY,DY1,DY2,DZ,DZ1,DZ2,VB,VP0,DH
      REAL*8  U1,U2,U3,U4,V1,V2,ZERO
      PARAMETER(ZERO=0.0D0)

      INTEGER OFFSET(3,8),N,II,JJ,KK
      REAL*8 X(3,8), VOLH
      DATA OFFSET/0,0,0, 1,0,0, 1,1,0, 0,1,0,
     &            0,0,1, 1,0,1, 1,1,1, 0,1,1/
 
      KERR = 0
      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,KERR)
      CALL BLKDIM(NBLK,NX,NY,NZ,KERR)

C CONVERT ROCK DENSITY TO TOTAL BODY FORCE FOR EACH GRID BLOCK

      DO K = KL1,KL2
         JL1 = JL1V(K)
         JL2 = JL2V(K)
         DO J = JL1,JL2
            DO I = IL1,IL2
               IF (KEYOUT(I,J,K).GT.0) THEN  
                  VP0 = PV0(I,J,K)
                  VB = EVOL(I,J,K)
                  V2 = ROCKD(I,J,K)
                  ROCKD(I,J,K) = V2 * (1.D0 - VP0/VB)
               ENDIF
            ENDDO
         ENDDO
      ENDDO
         
      END         

