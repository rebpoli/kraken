C  TBDARY.F - IMPLICIT SINGLE PHASE MODEL BOUNDARY CONDITION ROUTINES

C  ROUTINES IN THIS MODULE:

C SUBROUTINE TBDINTAB
C SUBROUTINE TBDPROP    
c SUBROUTINE COMPPRDEN
C SUBROUTINE TBDPROPW 
c SUBROUTINE TBDTRAN
c SUBROUTINE TBDTRANW
c SUBROUTINE TBDBAL 

C  CODE HISTORY:

C  M. PESZYNSKA,      1/01  INITIAL VERSION
c
c   Routines in this file are written for boundary conditions
c   of type = bound_type(region):
c    type =  1: value = PRESS (pressure) [psi]
c    type =  2: value = PRESS (pressure) [psi], used at BOUND_DEP
c    type =  3: value = PRESS (pressure) [psi], supplied by user code
c                             defined in TBDMOD(region)
c    type =  4: value = PRESHEAD [ft] : interpreted as pressure head.
c    type = -1: value = BFLUX (rate of inflow per unit area) [lb/day*sq-ft]
c
c   Other boundary conditions, if specified, are ignored.
c   Geometrical information about regions is read and processed 
c   by the framework.
C*********************************************************************
      SUBROUTINE TBDINTAB(NTIME,NERR)
C*********************************************************************
c input tables with boundary values
C*********************************************************************
      IMPLICIT NONE
      INTEGER NTIME, NERR

      INCLUDE 'unitsex.h'
      INCLUDE 'boundary.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      
      integer i,nt,nerr0

c space for getblk      

      INTEGER LOCTA($MXBREG),LENTA($MXBREG)
      CHARACTER*1 BLKBUF($MXTBUF)
      CHARACTER*50 TABTIT

c ---------------------------------------------
c read in the boundary values for each region 

      DO I=1,$MXBREG
         LENTA(I)=0
      ENDDO
      CALL GETBLK('TBOUND ',BLKBUF,$MXTBUF,NBND_REG,
     &     LOCTA,LENTA,NERR)

      DO I=1,NBND_REG
         IF (LENTA(I).GT.0) THEN
                        
            NT = NBND_TYPE(I)

c pressure or reference pressure condition
            IF(NT.EQ.1.OR.NT.EQ.2)  THEN
               
               TABTIT='PRESS FOR BDARY REGION[psi]'
               CALL MAKTIT(TABTIT,50,I)
               CALL TABUNT (EXTTIME,EXTPRES)
               CALL TABLE(BLKBUF(LOCTA(I)),LENTA(I),
     &              'TIME[day] ','BPRES[psi] ',TABTIT,
     &              NTABBND(I,1),NERR)

c pressure head
            ELSE IF(NT.EQ.4)  THEN
 
               TABTIT='PRESS HEAD FOR BDARY REGION[ft]'
               CALL MAKTIT(TABTIT,50,I)
               CALL TABUNT (EXTTIME,EXTDIST)
               CALL TABLE(BLKBUF(LOCTA(I)),LENTA(I),
     &              'TIME[day] ','BPHEAD[ft] ',TABTIT,
     &              NTABBND(I,1),NERR)
 
c flux bdary condition

            ELSE IF(NT.EQ.-1)  THEN
               
               TABTIT='FLUX FOR BDARY REGION[lb/day sq-ft]'
               CALL MAKTIT(TABTIT,50,I)
               CALL TABUNT (EXTTIME,'[lb/day sq-ft] ')
               CALL TABLE(BLKBUF(LOCTA(I)),LENTA(I),
     &              'TIME[day] ','BFLUX[lb/day sq-ft] ',TABTIT,
     &              NTABBND(I,1),NERR)

            ENDIF
         ENDIF
      ENDDO
      
c read and compile program for bdary modification 

      DO I=1,$MXBREG
         LENTA(I)=0
      ENDDO
      CALL GETBLK('TBDMOD ',BLKBUF,$MXTBUF,NBND_REG,
     &     LOCTA,LENTA,NERR)

      DO I=1,NBND_REG
         IF (LENTA(I).GT.0.AND.NBND_TYPE(I).EQ.3) THEN
               
            NERR0=NERR
            NBDPROG(I) = 0

            CALL BDPROG(BLKBUF(LOCTA(I)),LENTA(I),NBDPROG(I),NERR)

            IF(NERR.NE.NERR0) RETURN
         ENDIF
      ENDDO
      
      END

C*********************************************************************
      SUBROUTINE TBDPROP()
C*********************************************************************
c executive for TBDPROPW
C*********************************************************************
      INCLUDE 'tarydat.h'
      INCLUDE 'blkary.h'      

      INTEGER IBDPROP(4)        
      DATA IBDPROP / 4*0 /
      EXTERNAL TBDPROPW
      LOGICAL ONCEONLY
      DATA ONCEONLY /.TRUE./

      IF(ONCEONLY) THEN
         ONCEONLY = .FALSE.
         IBDPROP(1) = 3
         IBDPROP(2) = N_PRES
         IBDPROP(3) = N_FLDEN
         IBDPROP(4) = N_DEPTH
      ENDIF

      CALL CALLWORK(TBDPROPW,IBDPROP)
      END

C*********************************************************************
      SUBROUTINE TBDPROPW(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &           KL2,KEYOUT,NBLK,PRES,FLDEN,DEPTH)
C*********************************************************************
C  ROUTINE EVALUATES properties (density) on the bdary.  
C  PRES(I,J,K) = FLUID PRESSURE, PSI (INPUT, REAL*8)
C  FLDEN(I,J,K) = FLUID DENSITY, LB/CU-FT (OUTPUT, REAL*8)
C  DEPTH(I,J,K) = DEPTH OF BDARY SURFACE ELEMENT
C*********************************************************************
      implicit none
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'boundary.h'
      INCLUDE 'layout.h'

      INCLUDE 'tfluidsc.h'
      include 'tbaldat.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,
     &     IOFF,JOFF,KOFF,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 PRES(IDIM,JDIM,KDIM),      DEPTH(IDIM,JDIM,KDIM),
     &     FLDEN(IDIM,JDIM,KDIM),       RESID(IDIM,JDIM,KDIM)

      REAL*8 TE,PQ,DPQ,XB,YB,ZB,depb
      INTEGER I,J,K,L,IW,MERR,IB,NDIR,NFOFF,NTYPE,KG,IG,JG

      REAL*4 MINUSHEAD
c--------------------------------------------

      IF (NBND_REG.EQ.0.OR.NBEL.EQ.0) RETURN

c for single phase flow, bd. cond values need only be found once per newtonian
c iteration. For other models and outflow conditions, situation may vary.

      IF(NEWT.NE.1) RETURN
        
C  EVALUATE boundary TERMS AT TIME N + 1

      TE=TIM+DELTIM

C  GET LOCAL TO GLOBAL INDEX OFFSETS

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)

C  LOOP OVER THE bdary condition regions

      DO 1 IB=1,NBND_REG

         NTYPE = NBND_TYPE(IB)

c properties and values set only for Dirichlet condition, type >0

         IF(NTYPE.LE.0) GOTO 1

         IF(NBLK.EQ.1.AND.IB.EQ.1) NFOFF=1
         IF(NBLK.GT.1.AND.IB.EQ.1) NFOFF=LOFFBND(NBND_REG,NBLK-1)+1
         IF(IB.NE.1) NFOFF=LOFFBND(IB-1,NBLK)+1

c for types 1, 2 get the current value from table

         IF(NTYPE.EQ.1.OR.NTYPE.EQ.2.OR.NTYPE.EQ.4) 
     &        CALL LOOKUP(NTABBND(IB,1),TE,PQ,DPQ)
         
c loop over all bdary elements in this region

c         write(*,*) 'BDPROP reg ',ib,' typ=',nbnd_type(ib),
c     &        ' els: ',nfoff,' .... ',loffbnd(ib,nblk),pq

         DO 2 L=NFOFF,LOFFBND(IB,NBLK)
            I = LOCBND(1,L)
            J = LOCBND(2,L)
            K = LOCBND(3,L)
            
            NDIR = LOCBND(4,L)

            IF(NTYPE.EQ.1) THEN
c ----------
c copy the current value from table to primary variable (pressure)

               PRES(I,J,K) = PQ
               FLDEN(I,J,K) = STFLDEN*EXP(FLCMP*(PQ))

            ELSE IF (NTYPE.EQ.2) THEN
c ---------
c compute pressure and density from values at ref. depth

               CALL COMPPRDEN(BND_DEP(IB),PQ,DEPTH(I,J,K),
     &              PRES(I,J,K),FLDEN(I,J,K))

c               write(*,*) 'press ref spec, ',pq,bnd_dep(ib),
c     &              pres(i,j,k),flden(i,j,k),
c     &              pres(i,j,k)-grav*flden(i,j,k)*depth(i,j,k),
c     &              pres(i,j,k)/(grav*flden(i,j,k))-depth(i,j,k)

            ELSE IF (NTYPE.EQ.3) THEN
c ---------
c execute user supplied code to get the values pres(x,y,z)
       
               PQ = 0.D0
               KG=K+KOFF
               JG=J+JOFF
               IG=I+IOFF

               IF (NDIR.EQ.1) THEN
                 XB=XREC(IG+1,NBLK)
                 YB=0.5D0*(YREC(JG,NBLK)+YREC(JG+1,NBLK))
                 ZB=0.5D0*(ZREC(KG,NBLK)+ZREC(KG+1,NBLK))
               ELSEIF (NDIR.EQ.2) THEN
                 XB=XREC(IG,NBLK)
                 YB=0.5D0*(YREC(JG,NBLK)+YREC(JG+1,NBLK))
                 ZB=0.5D0*(ZREC(KG,NBLK)+ZREC(KG+1,NBLK))
               ELSEIF (NDIR.EQ.3) THEN
                 XB=0.5D0*(XREC(IG,NBLK)+XREC(IG+1,NBLK))
                 YB=YREC(JG+1,NBLK)
                 ZB=0.5D0*(ZREC(KG,NBLK)+ZREC(KG+1,NBLK))
               ELSEIF (NDIR.EQ.4) THEN
                 XB=0.5D0*(XREC(IG,NBLK)+XREC(IG+1,NBLK))
                 YB=YREC(JG,NBLK)
                 ZB=0.5D0*(ZREC(KG,NBLK)+ZREC(KG+1,NBLK))
               ELSEIF (NDIR.EQ.5) THEN
                 XB=0.5D0*(XREC(IG,NBLK)+XREC(IG+1,NBLK))
                 YB=0.5D0*(YREC(JG,NBLK)+YREC(JG+1,NBLK))
                 ZB=ZREC(KG+1,NBLK)
               ELSEIF (NDIR.EQ.6) THEN
                 XB=0.5D0*(XREC(IG,NBLK)+XREC(IG+1,NBLK))
                 YB=0.5D0*(YREC(JG,NBLK)+YREC(JG+1,NBLK))
                 ZB=ZREC(KG,NBLK)
               ENDIF

               DEPB = DEPTH(I,J,K)
               CALL BDMOD(NBDPROG(IB),XB,YB,ZB,DEPB,PQ)               
               
               PRES(I,J,K) = PQ
               FLDEN(I,J,K) = STFLDEN*EXP(FLCMP*(PQ))

            ELSE IF (NTYPE.EQ.4) THEN
c ---------
c transform value of head to value of press at depth=0, assume small compr

c pressure is zero at -head value where density is stflden
               MINUSHEAD=-PQ
c guess for pressure and density assuming incompr.
               PRES(I,J,K) = PQ* GRAV * STFLDEN
               FLDEN(I,J,K) = STFLDEN*EXP(FLCMP*PRES(I,J,K))

               CALL COMPPRDEN(MINUSHEAD,0.0D0,DEPTH(I,J,K),
     &              PRES(I,J,K),FLDEN(I,J,K))

c               write(*,*) 'press computed ',pq,grav*stflden,
c     &              pq*grav*stflden,pres(i,j,k)
            ENDIF

c            write(*,*) ib,i,j,k,' BDPROP ',pq,
c     &              pres(i,j,k),flden(i,j,k),depth(i,j,k)

    2 CONTINUE

    1 CONTINUE

      END

c ************************************************
      SUBROUTINE COMPPRDEN(REFD,REFP,DEP,PRES,DEN)
c ************************************************
c computes pressure <pres> and density <den> at depth <dep>
c using as reference pressure <refp> at depth <refd>
c ************************************************
      IMPLICIT NONE
      INCLUDE 'tfluidsc.h'
      INCLUDE 'layout.h'

      REAL*4 REFD
      REAL*8 REFP,DEP,PRES,DEN
      REAL*8 GRD2,DP,DENB,F,DF,DENA
      INTEGER N
c-----------------------------------
      DENA  = STFLDEN*EXP(FLCMP*REFP)
      GRD2=.5D0*GRAV*DENA*(DEP-REFD)
      DP=2.D0*GRD2/(1.D0-GRD2*FLCMP)
      
      DO  N=1,3
         DENB=EXP(FLCMP*DP)
         F=DP-GRD2*(1.D0+DENB)
         DF=1.D0-GRD2*FLCMP*DENB
         DP=DP-F/DF
      ENDDO
      
      PRES = REFP+DP
      DEN  = STFLDEN*EXP(FLCMP*PRES)
      END

c ************************************************
      SUBROUTINE TBDTRAN()
c ************************************************
c executive for TBDTRANW
C*************************************************
      INCLUDE 'blkary.h'
      INCLUDE 'boundary.h'
      INCLUDE 'tarydat.h'
      INCLUDE 'tbaldat.h'

      INTEGER A(10)
      EXTERNAL TBDTRANW
C -----------------------
      A(1) = 9
      A(2) = N_XPERM
      A(3) = N_YPERM
      A(4) = N_ZPERM
      A(5) = N_DEPTH
      A(6) = N_FLDEN
      A(7) = N_PRES
      A(8) = N_VEL
      A(9) = N_COF
      A(10)= N_RESID

      CALL BDCLEARFLUX()

      CALL CALLWORK(TBDTRANW,A)

      END


C*********************************************************************
      SUBROUTINE TBDTRANW(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                    KL2,KEYOUT,NBLK,PERMX,PERMY,PERMZ,DEPTH,
     &                    FLDEN,PRES,VEL,COF,RESID)
C*********************************************************************
c  Routine evaluates transport contributions across boundary.
c
c  The following bdary conditions are allowed/implemented:
c  bound_type=1:    Dirichlet condition on pressure [psi]
c  bound_type=-1:   Flux condition [lb/day]
c                   positive value: injection, negative: production
c
c  Parameters:
c  depth - depth grid array (input)
c  pres(i,j,k) = fluid pressure, psi (input, real*8)
c  flden(i,j,k) = fluid density, lb/cu-ft (input, real*8)
c  permx,y,z - permeabilities (not transmissibilities) (input)
c  cof - jacobian (input,output)
c  resid - residual vector (input,output)
C*********************************************************************
      IMPLICIT NONE
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'boundary.h'
      INCLUDE 'layout.h'

      INCLUDE 'tfluidsc.h'
      INCLUDE 'tbaldat.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,
     &     IOFF,JOFF,KOFF,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 PRES(IDIM,JDIM,KDIM), DEPTH(IDIM,JDIM,KDIM),
     &     FLDEN(IDIM,JDIM,KDIM),  RESID(IDIM,JDIM,KDIM),
     &     VEL(IDIM,JDIM,KDIM,3) 
      REAL*4 PERMX(IDIM,JDIM,KDIM), PERMY(IDIM,JDIM,KDIM),
     &     PERMZ(IDIM,JDIM,KDIM)
      REAL*4  COF(IDIM,JDIM,KDIM,7)

      REAL*8 DTVIS,GRAD,RHO, DX, DY, DZ
      INTEGER I,J,K,L,IW,MERR,IB,NDIR,NFOFF,nt

      REAL*8 CVC,TC,TE,VFLUX,DFLUX,BDFLUX

C bag8 - CVC = 2 sq-ft cp / md psi day
      CVC = 2 * CONV_FACTOR

c--------------------------------------------
      IF (NBND_REG.EQ.0.OR.NBEL.EQ.0) RETURN
      DTVIS=DELTIM/FLVIS
      TE = TIM + DELTIM

c  get local to global index offsets

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)

c  loop over the bdary condition regions

      DO 1 IB=1,NBND_REG

         NT=NBND_TYPE(IB)

         IF(.NOT.(NT.EQ.1.
     &        OR.NT.EQ.2.
     &        OR.NT.EQ.3.
     &        OR.NT.EQ.4.
     &        OR.NT.EQ.-1)) GOTO 1
         IF(NT.EQ.-1) THEN
            CALL LOOKUP(NTABBND(IB,1),TE,VFLUX,DFLUX)
         ENDIF

         IF(NBLK.EQ.1.AND.IB.EQ.1) NFOFF=1
         IF(NBLK.GT.1.AND.IB.EQ.1) NFOFF=LOFFBND(NBND_REG,NBLK-1)+1
         IF(IB.NE.1) NFOFF=LOFFBND(IB-1,NBLK)+1

c loop over all bdary elements in this region

c         write(*,*) myprc,' BDARY reg ',ib,' typ=',nbnd_type(ib),
c     &        ' els: ',nfoff,' .... ',loffbnd(ib,nblk)

         DO 2 L=NFOFF,LOFFBND(IB,NBLK)
            I = LOCBND(1,L)
            J = LOCBND(2,L)
            K = LOCBND(3,L)

            NDIR = LOCBND(4,L)
            GOTO (21,22,23,24,25,26), NDIR
            GOTO 2

c x- --------------
 21         CONTINUE

            IF(NT.GE.1.AND.NT.LE.4) THEN
               RHO = (FLDEN(I,J,K) + FLDEN(I+1,J,K))*.5D0

               DX = DXREC(I+IOFF+1,NBLK)
               TC = PERMX(I+1,J,K)*CVC*BAREA(L)/DX

               GRAD = TC*DTVIS*RHO
               BDFLUX = GRAD*(PRES(I+1,J,K)-PRES(I,J,K)-GRAV*RHO*
     &              (DEPTH(I+1,J,K)-DEPTH(I,J,K)))
               
               COF(I+1,J,K,1)= COF(I+1,J,K,1) + GRAD

            ELSE IF(NT.EQ.-1) THEN
               RHO = FLDEN(I+1,J,K)
               BDFLUX =  - VFLUX*DELTIM*BAREA(L)
            ENDIF

            RESID(I+1,J,K)=RESID(I+1,J,K) - BDFLUX               

            BND_FLUX(IB,1) = BND_FLUX(IB,1) - BDFLUX

$TRCHEM      bflux(1,l) = - bdflux/rho/deltim
            VEL(I+1,J,K,1) = -BDFLUX/DELTIM/BAREA(L)

c            write(*,*) i,j,k,' bdflux =',bdflux,vflux

            goto 2

c x+ --------------
 22         continue

            IF(NT.GE.1.AND.NT.LE.4) THEN

               RHO = (FLDEN(I,J,K) + FLDEN(I-1,J,K))*.5D0

               DX = DXREC(I+IOFF-1,NBLK)
               TC = PERMX(I-1,J,K)*CVC*BAREA(L)/DX

               GRAD = TC*DTVIS*RHO
               BDFLUX = GRAD*(PRES(I,J,K)-PRES(I-1,J,K)-GRAV*RHO*
     &              (DEPTH(I,J,K)-DEPTH(I-1,J,K)))
               
               COF(I-1,J,K,1)= COF(I-1,J,K,1) + GRAD

            ELSE IF(NT.EQ.-1) THEN
               RHO = FLDEN(I-1,J,K)
               BDFLUX = VFLUX*DELTIM*BAREA(L)
            ENDIF

            RESID(I-1,J,K)=RESID(I-1,J,K) + BDFLUX

            BND_FLUX(IB,1) = BND_FLUX(IB,1) + BDFLUX

$TRCHEM      bflux(1,l) = - bdflux/rho/deltim
            VEL(I,J,K,1) = -BDFLUX/DELTIM/BAREA(L)

c     write(*,*) i,j,k,' bdflux =',
c     &        bdflux,rho,- bdflux/rho/deltim

            GOTO 2

c y- --------------
 23         continue

            IF(NT.GE.1.AND.NT.LE.4) THEN
               RHO = (FLDEN(I,J,K) + FLDEN(I,J+1,K))*.5D0

               DY = DYREC(J+JOFF+1,NBLK)
               TC = PERMY(I,J+1,K)*CVC*BAREA(L)/DY

               GRAD = TC*DTVIS*RHO
               BDFLUX = GRAD*(PRES(I,J+1,K)-PRES(I,J,K)-GRAV*RHO*
     &              (DEPTH(I,J+1,K)-DEPTH(I,J,K)))

               COF(I,J+1,K,1)= COF(I,J+1,K,1) + GRAD

            ELSE IF(NT.EQ.-1) THEN
               RHO = FLDEN(I,J+1,K)
               BDFLUX = - VFLUX*DELTIM
            ENDIF

            RESID(I,J+1,K)=RESID(I,J+1,K) - BDFLUX
            
            BND_FLUX(IB,1) = BND_FLUX(IB,1) - BDFLUX

$TRCHEM      bflux(1,l) = - bdflux/rho/deltim
            VEL(I,J+1,K,2) = -BDFLUX/DELTIM/BAREA(L) 

c            write(*,*) myprc,i,j,k,
c     &           ' bdflux =',bdflux,grav*rho
            GOTO 2
c y+ --------------
 24         continue

            IF(NT.GE.1.AND.NT.LE.4) THEN
               RHO = (FLDEN(I,J,K) + FLDEN(I,J-1,K))*.5D0

               DY = DYREC(J+JOFF-1,NBLK)
               TC = PERMY(I,J-1,K)*CVC*BAREA(L) /DY

               GRAD = TC*DTVIS*RHO
               BDFLUX = GRAD*(PRES(I,J,K)-PRES(I,J-1,K)-GRAV*RHO*
     &              (DEPTH(I,J,K)-DEPTH(I,J-1,K)))
               COF(I,J-1,K,1)= COF(I,J-1,K,1) + GRAD

            ELSE IF(NT.EQ.-1) THEN
               RHO = FLDEN(I,J-1,K)
               BDFLUX =  VFLUX*DELTIM*BAREA(L)
            ENDIF
                  
            RESID(I,J-1,K)=RESID(I,J-1,K) + BDFLUX

            BND_FLUX(IB,1) = BND_FLUX(IB,1) + BDFLUX

$TRCHEM      bflux(1,l) = - bdflux/rho/deltim
            VEL(I,J,K,2) = -BDFLUX/DELTIM/BAREA(L) 

c            write(*,*) myprc,i,j,k,
c     &           ' bdflux =',bdflux,vflux

            GOTO 2

c z- --------------
 25         continue

            IF(NT.GE.1.AND.NT.LE.4) THEN
               RHO = (FLDEN(I,J,K) + FLDEN(I,J,K+1))*.5D0

               DZ = DZREC(K+KOFF+1,NBLK)
               TC = PERMZ(I,J,K+1)*CVC*BAREA(L)/DZ

               GRAD = TC*DTVIS*RHO
               BDFLUX = GRAD*(PRES(I,J,K+1)-PRES(I,J,K)-GRAV*RHO*
     &              (DEPTH(I,J,K+1)-DEPTH(I,J,K)))

               COF(I,J,K+1,1)= COF(I,J,K+1,1) + GRAD

            ELSE IF(NT.EQ.-1) THEN
               RHO = FLDEN(I,J,K+1)
               BDFLUX = - VFLUX*DELTIM*BAREA(L)
            ENDIF

            RESID(I,J,K+1)=RESID(I,J,K+1) - BDFLUX            
            
            BND_FLUX(IB,1) = BND_FLUX(IB,1) - BDFLUX

$TRCHEM      bflux(1,l) = - bdflux/rho/deltim
            VEL(I,J,K+1,3) = -BDFLUX/DELTIM/BAREA(L) 

c            write(*,*) 'after z- ',i,j,k,' bdflux =',bdflux

            GOTO 2

c z+ --------------
 26         continue

            IF(NT.GE.1.AND.NT.LE.4) THEN
               RHO = (FLDEN(I,J,K) + FLDEN(I,J,K-1))*.5D0

               DZ = DZREC(K+KOFF-1,NBLK)
               TC = PERMZ(I,J,K-1)*CVC*BAREA(L)/DZ

               GRAD = TC*DTVIS*RHO
               BDFLUX = GRAD*(PRES(I,J,K)-PRES(I,J,K-1)-GRAV*RHO*
     &              (DEPTH(I,J,K)-DEPTH(I,J,K-1)))
               COF(I,J,K-1,1)= COF(I,J,K-1,1) + GRAD

            ELSE IF(NT.EQ.-1) THEN
               RHO = FLDEN(I,J,K-1)
               BDFLUX = VFLUX*DELTIM*BAREA(L)
            ENDIF
              
            RESID(I,J,K-1)=RESID(I,J,K-1) + BDFLUX

            BND_FLUX(IB,1) = BND_FLUX(IB,1) + BDFLUX

$TRCHEM      bflux(1,l) = - bdflux/rho/deltim
            VEL(I,J,K,3) = -BDFLUX/DELTIM/BAREA(L) 

c            write(*,*) 'after z+ ',i,j,k,' bdflux =',bdflux

            GOTO 2

    2 CONTINUE
    1 CONTINUE

      END

c *********************************************************
      SUBROUTINE TBDBAL()
c *********************************************************
c evaluates total contribution of fluxes across boundary
c and adds it to the flitnp
c *********************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'tbaldat.h'
      INCLUDE 'boundary.h'

      INTEGER I
      REAL*8   TBDARYFLUX
$MMODEL      include 'mmodel.h'
c------------------------
      
$MANY      CALL SUMIT(NBND_REG,BND_FLUX(1,1))

      TBDARYFLUX =  0.D0
      DO I=1,NBND_REG
$MMODEL         IF(BNDRMOD(I).EQ.SINGLEI) THEN
          TBDARYFLUX =  TBDARYFLUX + BND_FLUX(I,1)
$MMODEL         ENDIF
      ENDDO

      FLITNP=FLITNP + TBDARYFLUX

      END


