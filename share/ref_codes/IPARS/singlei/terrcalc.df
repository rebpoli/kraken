!----------------------------------------------------------------------
! terrcalc.df - Subroutines for manufactured solution, source function,
!               a priori error computation.
!
! Ben Ganis, Yerlan Amanbek  06/12/2016
!
!----------------------------------------------------------------------
      SUBROUTINE TSOURCE()
!----------------------------------------------------------------------
! Add source function contribution to rhs of linear system.
!----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'tarydat.h'
      EXTERNAL CALCSOURCE
 
      CALL CALLWORK(CALCSOURCE,[1,N_RESID])

      END SUBROUTINE

!----------------------------------------------------------------------
      SUBROUTINE CALCSOURCE(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &     KL1,KL2,KEYOUT,NBLK,RESID)
!----------------------------------------------------------------------
! Source function contribution using midpoint rule.
!----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM),
     &        KL1,KL2,KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*8  RESID(IDIM,JDIM,KDIM)

      INTEGER I,J,K,II,JJ,KK,IOFF,JOFF,KOFF,MERR
      REAL*8  X(3),T,VOL
      REAL*8  SOURCE

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)
      T = TIM + DELTIM

      DO K=KL1,KL2
      DO J=JL1V(K),JL2V(K)
      DO I=IL1,IL2
        IF (KEYOUT(I,J,K).GT.0) THEN
          II=I+IOFF
          JJ=J+JOFF
          KK=K+KOFF
          X(1) = 0.5D0*(XREC(II,NBLK)+XREC(II+1,NBLK))
          X(2) = 0.5D0*(YREC(JJ,NBLK)+YREC(JJ+1,NBLK))
          X(3) = 0.5D0*(ZREC(KK,NBLK)+ZREC(KK+1,NBLK))
          VOL = DXREC(II,NBLK)*DYREC(JJ,NBLK)*DZREC(KK,NBLK)
          RESID(I,J,K) = RESID(I,J,K) + DELTIM*SOURCE(X,T)*VOL
        ENDIF
      ENDDO
      ENDDO
      ENDDO   

      END SUBROUTINE

!----------------------------------------------------------------------
! Description of test problems for true solutions below:
!
! ITEST=1
!         P = X**2 + Y**2 + Z**2
!         K = [1 0 0; 0 1 0; 0 0 1]
!         F = -6
!         U = [-2X, -2Y, -2Z]
!
! ITEST=2
!         P = (1 - X)*X*(1 - Y)*Y*(1 - Z)*Z
!         K = [1 0 0; 0 1 0; 0 0 1]
!         F = 2*(1 - X)*X*(1 - Y)*Y + 2*(1 - X)*X*(1 - Z)*Z + 
!             2*(1 - Y)*Y*(1 - Z)*Z
!         U1= -((1 - X)*(1 - Y)*Y*(1 - Z)*Z) + X*(1 - Y)*Y*(1 - Z)*Z
!         U2= -((1 - X)*X*(1 - Y)*(1 - Z)*Z) + (1 - X)*X*Y*(1 - Z)*Z
!         U3= -((1 - X)*X*(1 - Y)*Y*(1 - Z)) + (1 - X)*X*(1 - Y)*Y*Z
!
!----------------------------------------------------------------------
      REAL*8 FUNCTION PEXACT(PT,T)
!----------------------------------------------------------------------
! Specify function for true pressure solution.
! Input: PT = (x,y,z) coordinate
!         T = time
!----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'terrcalc.h'
      REAL*8 PT(3),T,X,Y,Z

      IF (ITEST.LT.0) STOP 'Calling PEXACT without setting ITEST' 
      X=PT(1)
      Y=PT(2)
      Z=PT(3)

      IF (ITEST.EQ.1) THEN
        PEXACT = X**2 + Y**2 + Z**2
      ELSEIF (ITEST.EQ.2) THEN
        PEXACT = (1 - X)*X*(1 - Y)*Y*(1 - Z)*Z
      ELSE
        STOP 'Unknown ITEST in PEXACT'
      ENDIF

      END FUNCTION

!----------------------------------------------------------------------
      REAL*8 FUNCTION VELEXACT(PT,T,D)
!----------------------------------------------------------------------
! Specify function for true velocity solution.
! Input: PT = (x,y,z) coordinate
!         T = time
!         D = direction 1:Ux, 2:Uy, 3:Uz
!----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'terrcalc.h'
      REAL*8 PT(3),T,X,Y,Z
      INTEGER D

      IF (ITEST.LT.0) STOP 'Calling VELEXACT without setting ITEST'
      IF ((D.NE.1).AND.(D.NE.2).AND.(D.NE.3))
     &  STOP 'Bad DIREC in VELEXACT'
      X=PT(1)
      Y=PT(2)
      Z=PT(3)

      IF (ITEST.EQ.1) THEN
        IF (D.EQ.1) THEN
          VELEXACT = -2.D0*X
        ELSEIF (D.EQ.2) THEN
          VELEXACT = -2.D0*Y
        ELSE
          VELEXACT = -2.D0*Z
        ENDIF
      ELSEIF (ITEST.EQ.2) THEN
        IF (D.EQ.1) THEN
          VELEXACT = -((1 - X)*(1 - Y)*Y*(1 - Z)*Z) + 
     &                X*(1 - Y)*Y*(1 - Z)*Z
        ELSEIF (D.EQ.2) THEN
          VELEXACT = -((1 - X)*X*(1 - Y)*(1 - Z)*Z) + 
     &                (1 - X)*X*Y*(1 - Z)*Z
        ELSE
          VELEXACT = -((1 - X)*X*(1 - Y)*Y*(1 - Z)) + 
     &                (1 - X)*X*(1 - Y)*Y*Z
        ENDIF
      ELSE
        STOP 'Unknown ITEST in VELEXACT'
      ENDIF

      END FUNCTION

!----------------------------------------------------------------------
      REAL*8 FUNCTION SOURCE(PT,T)
!----------------------------------------------------------------------
! Specify source function.
! Input: PT = (x,y,z) coordinate
!         T = time
!----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'terrcalc.h'
      REAL*8 PT(3),T,X,Y,Z

      IF (ITEST.LT.0) STOP 'Calling SOURCE without setting ITEST'
      X=PT(1)
      Y=PT(2)
      Z=PT(3)

      IF (ITEST.EQ.1) THEN
        SOURCE = -6.D0
      ELSEIF (ITEST.EQ.2) THEN
        SOURCE = 2*(1 - X)*X*(1 - Y)*Y + 2*(1 - X)*X*(1 - Z)*Z + 
     &           2*(1 - Y)*Y*(1 - Z)*Z
      ELSE
        STOP 'Unknown ITEST in SOURCE'
      ENDIF

      END FUNCTION

!----------------------------------------------------------------------
      SUBROUTINE TERRCALC()
!----------------------------------------------------------------------
! Compute various error norms.
!----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'tarydat.h'
      INTEGER IP(3),IV(4)
      DATA IP/3*0/,IV/4*0/
      EXTERNAL CALC_P_SUP_ERR1,CALC_EDGE_VEL_MID1
      LOGICAL ONCEONLY
      DATA ONCEONLY/.TRUE./

      IF (ONCEONLY) THEN
        ONCEONLY = .FALSE.

        IP(1) = 2
        IP(2) = N_PRES
        IP(3) = N_PRES_ERR

        IV(1) = 3
        IV(2) = N_VX
        IV(3) = N_VY
        IV(4) = N_VZ
      ENDIF

      ! 1) compute local norm on each processor of every subdomain
      CALL CALLWORK(CALC_P_SUP_ERR1,IP)         ! ||| p - p_h |||
      CALL CALLWORK(CALC_EDGE_VEL_MID1,IV)      ! ||| u - u_h |||_F mid

      ! 2) complete global norm calculation
      CALL CALC_P_SUP_ERR2()
      CALL CALC_EDGE_VEL_MID2()

      END SUBROUTINE

!----------------------------------------------------------------------
      SUBROUTINE CALC_P_SUP_ERR1(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &     KL1,KL2,KEYOUT,NBLK,PRES,PRES_ERR)
!----------------------------------------------------------------------
! Compute ||| p - p_h |||^2_{Omega_i}
!----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'terrcalc.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM),
     &     KL1,KL2,KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*8  PRES(IDIM,JDIM,KDIM),
     &        PRES_ERR(IDIM,JDIM,KDIM)

      INTEGER I,J,K,II,JJ,KK,IOFF,JOFF,KOFF,MERR
      REAL*8  X(3),T,VOL,PERR
      REAL*8  PEXACT

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)
      T = TIM + DELTIM

      PERR = 0.D0
      DO K=KL1,KL2
      DO J=JL1V(K),JL2V(K)
      DO I=IL1,IL2
        IF (KEYOUT(I,J,K).GT.0) THEN
          II=I+IOFF
          JJ=J+JOFF
          KK=K+KOFF
          X(1) = 0.5D0*(XREC(II,NBLK)+XREC(II+1,NBLK))
          X(2) = 0.5D0*(YREC(JJ,NBLK)+YREC(JJ+1,NBLK))
          X(3) = 0.5D0*(ZREC(KK,NBLK)+ZREC(KK+1,NBLK))
          VOL = DXREC(II,NBLK)*DYREC(JJ,NBLK)*DZREC(KK,NBLK)
          PRES_ERR(I,J,K) = PEXACT(X,T) - PRES(I,J,K)
          PERR = PERR + VOL*PRES_ERR(I,J,K)**2
        ENDIF
      ENDDO
      ENDDO
      ENDDO
      PERR_SUB(NBLK) = PERR

      END SUBROUTINE

!----------------------------------------------------------------------
      SUBROUTINE CALC_P_SUP_ERR2()
!----------------------------------------------------------------------
! Finish computing  Sum_i ||| p - p_h |||_{Omega_i}
!----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'control.h'
$MANY      INCLUDE 'mpif.h'
      INCLUDE 'layout.h'
      INCLUDE 'terrcalc.h'
      INTEGER I,IERR
      REAL*8 LERR,ERRSUM

      ERRSUM=0.D0
      DO I=1,NUMBLK

! Sum results on subdomain i across all processors 
! before taking square root.
$MANY        LERR = PERR_SUB(I)
$MANY        CALL MPI_ALLREDUCE(LERR,PERR_SUB(I),1,MPI_DOUBLE_PRECISION,
$MANY     &                     MPI_SUM,MPI_COMM_WORLD,IERR)

        IF (MYPRC.EQ.0)
     &    WRITE(*,'(1P,A,I1,A,E13.4)')'||| p - p_h |||_{Omega',I,
     &      '} = ',SQRT(PERR_SUB(I))

        ERRSUM = ERRSUM + PERR_SUB(I)
      ENDDO
      ERRSUM = SQRT(ERRSUM)
!      PERR_L2L2 = ...
!      PERR_LinftyL2 = ...

      IF (MYPRC.EQ.0)
     &  WRITE(*,'(1P,A,E13.4)')'||| p - p_h |||_Omega = ',ERRSUM

      END SUBROUTINE

!----------------------------------------------------------------------
      SUBROUTINE CALC_EDGE_VEL_MID1(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &     JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,VX,VY,VZ)
!----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'terrcalc.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V(KDIM),JL2V(KDIM),
     &     KL1,KL2,KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*8  VX(IDIM,JDIM,KDIM),VY(IDIM,JDIM,KDIM),VZ(IDIM,JDIM,KDIM)

      INTEGER I,J,K,II,JJ,KK,IOFF,JOFF,KOFF,MERR
      REAL*8  X(3),T,VOL,VERR
      REAL*8  VELEXACT

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)
      T = TIM + DELTIM

      END SUBROUTINE

!----------------------------------------------------------------------
      SUBROUTINE CALC_EDGE_VEL_MID2()
!----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'terrcalc.h'

      END SUBROUTINE

!----------------------------------------------------------------------
      SUBROUTINE TERRCALC_FINAL()
!----------------------------------------------------------------------
! Report discrete-in-time errors after simulation is finished.
!----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'terrcalc.h'

! Print final errors in time here

      END SUBROUTINE

