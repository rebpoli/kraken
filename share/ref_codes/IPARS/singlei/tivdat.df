C  TIVDAT.F - IMPLICIT SINGLE PHASE FLOW INITIALIZATION CODE

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE TIVDAT (NERR)
C  SUBROUTINE TINIT  (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                     KEYOUT,NBLK,POR,DEPTH,PRES)

C  CODE HISTORY:

C  BAHAREH MOMKEN 02/02/99 Hydrology-IMPES givdat.df is used as template

C*********************************************************************
      SUBROUTINE TIVDAT (NERR)
C*********************************************************************

C  Single phase flow model initialization after initial keyword input and 
C  grid-element array creation

C  NERR = ERROR KEY STEPPED BY ONE FOR EACH ERROR
C         (INPUT AND OUTPUT, INTEGER)
C  NOTES:

C  TIMKLS(I) = TIMER CLASS
C            = 0 ==> UNUSED
C            = 1 ==> TOTAL TIME
C            = 2 ==> COMMUNICATION TIMES
C            = 3 ==> ALL REDUNDANT CALCULATION TIMES
C            = 4 ==> MISCELLANEOUS TIMES
C*********************************************************************
      IMPLICIT NONE
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'times.h'
      INCLUDE 'wells.h'
      INCLUDE 'tarydat.h'
      INCLUDE 'tbaldat.h'
      INCLUDE 'tfluidsc.h'

      INTEGER ISET(4),IINIT(4)
      INTEGER N,NERR
      REAL*8 TEMP

      EXTERNAL TINIT,SETARYR8N

C  DEFINE TIMERS (USE 20 TO 30)

      TIMNAM(20)='PROPERTIES AND ACCUMULATION'
      TIMKLS(20)=4
      TIMNAM(21)='TRANSMISSABILITY TERMS'
      TIMKLS(21)=4
      TIMNAM(22)='PROPERTY COMMUNICATION'
      TIMKLS(22)=2
      TIMNAM(23)='WELL COMMUNICATION'
      TIMKLS(23)=2

C  INITIALIZE WELL DENSITY AND BOTTOM-HOLE PRESSURE

      DO 2 N=1,NUMWEL
      IF (MODWEL(N).EQ.MODACT
$TRCHEM     & .OR.FLOWMODEL.EQ.MODACT
     &   ) THEN
         WELDEN(N)=STFLDEN
         WELBHP(N)=PINIT
      ENDIF
    2 CONTINUE

C  COUNT GRID ELEMENTS
C  CONVERT POROSITY TO PORE VOLUME
C  INITIALIZE PRESSURES AND DENSITIES

      NERRC=0

C     ZERO OUT INITIAL VELOCITIES

      R8UTIL=0.D0
      I4UTIL=3
      ISET(1)=3
      ISET(2)=N_VEL
      ISET(3)=N_R8U
      ISET(4)=N_I4U
      CALL CALLWORK(SETARYR8N,ISET)

C     INITIALIZE BALANCE TERMS TO ZERO

      IINIT(1)=3
      IINIT(2)=N_POR
      IINIT(3)=N_DEPTH
      IINIT(4)=N_PRES
      CALL CALLWORK (TINIT,IINIT)
      IF (NERRC.NE.0) GO TO 13

C  INITIALIZE BC FLUX CONTRIBUTION TO MASS BALANCE

      FLITNP = 0.D0

C EXITS

      RETURN
   13 NERR=NERR+1

      END

C*********************************************************************
      SUBROUTINE TINIT (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                  KEYOUT,NBLK,POR,DEPTH,PRES)
C*********************************************************************
CGUS Something stupid to get around EQUIVALENCE AND MODULE incompatibility
      USE scrat1mod
      IMPLICIT NONE
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,JL1V(KL1),JL2V(KL2),
     &        KEYOUT(IDIM,JDIM,KDIM),NBLK

      REAL*4 POR(IDIM,JDIM,KDIM)
      REAL*8 DEPTH(IDIM,JDIM,KDIM),PRES(IDIM,JDIM,KDIM)
      
      CALL TINIT2 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                  KEYOUT,NBLK,POR,DEPTH,PRES,A)

      END
C*********************************************************************
      SUBROUTINE TINIT2 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                  KEYOUT,NBLK,POR,DEPTH,PRES,AL)
C*********************************************************************
 
C  ROUTINE SETS UP INITIAL PRESSURE AND DENSITY FOR SINGLE FLUID.
C  IT ALSO CONVERTS POROSITY TO PORE VOLUME AND PRINTS A TYPICAL COLUMN
C  OF DATA.
C  THIS IS A WORK ROUTINE.
c  only interior computations are performed

C  POR(I,J,K)  = POROSITY (INPUT, REAL*4)
C              = PORE VOLUME, CU-FT (OUTPUT, REAL*4)
C  DEPTH(I,J,K) = GRID-BLOCK CENTER DEPTHS (INPUT, REAL*8)
C  PRES(I,J,K) = FLUID PRESSURE, PSI (OUTPUT, REAL*8)

C*********************************************************************
      USE scrat1mod

$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'layout.h'
      INCLUDE 'wells.h'
!      INCLUDE 'scrat1.h'
 
      INCLUDE 'tfluidsc.h'
      INCLUDE 'tbaldat.h'

      INTEGER I, J, K, IL1, IL2, JL1, JL2, KL1, KL2
      INTEGER IOFF,JOFF,KOFF,IDIM,JDIM,KDIM,LDIM,NBLK
      INTEGER MERR,N,M

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
     
      REAL*4 PWBW(IDIM,$MXWELL),DEPBW(IDIM,$MXWELL)
      REAL*4 POR(IDIM,JDIM,KDIM)
      REAL*8 PRES(IDIM,JDIM,KDIM)
      REAL*8 DEPTH(IDIM,JDIM,KDIM)
      REAL*8 DX,DY,DZ,GRD2,DP,F,DF,DEPA,DENA,PRESA,DEPB,DENB,
     &       PRESB,DEPC(3),DENC(3),PRESC(3)

      INTEGER NW($MXWELL),JW($MXWELL),KW($MXWELL),NWE($MXWELL),
     &        IW(IDIM,$MXWELL)
      LOGICAL ONCEONLY,ONLYONCE,TOPI,ONETYP
      CHARACTER*80 AL($MXREAD/80),ALS
      CHARACTER*1 ALS1(80)
      EQUIVALENCE (ALS,ALS1)
      DATA ONCEONLY /.TRUE./, ONLYONCE/.TRUE./,ONETYP/.TRUE./

C  GET LOCAL/GLOBAL INDEX OFFSETS

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)

C  ID WELLS FOR TYPICAL OUTPUT

      MW=0
      DO 14 LW=1,NTYPOUT
      IF (LOCWEL(1,1,LW).EQ.NBLK.AND.NWELPRC(LW).EQ.MYPRC) THEN
         MW=MW+1
         NWE(MW)=0
         NW(MW)=LW
         JW(MW)=LOCWEL(4,1,LW)-JOFF
         KW(MW)=LOCWEL(5,1,LW)-KOFF
      ENDIF
   14 CONTINUE

C  SET UP FOR EQUILIBRIUM CALCULATIONS

      IF (ONCEONLY) THEN
         ONCEONLY=.FALSE.
         DEPA=DINIT
         PRESA=PINIT
         DENA=STFLDEN*EXP(FLCMP*PRESA)
         DO 11 I=1,3
         DEPC(I)=DEPA
         DENC(I)=DENA
   11    PRESC(I)=PRESA
      ENDIF

C  LOOP OVER LOCAL GRID ELEMENTS AND PICK UP MESH SIZES

      DO 2 K=KL1,KL2
      DZ=DZREC(K+KOFF,NBLK)
      JL1=JL1V(K)
      JL2=JL2V(K)
      DO 2 J=JL1,JL2
      DY=DYREC(J+JOFF,NBLK)
      TOPI=.TRUE.
      DO 2 I=IL1,IL2
      IF (KEYOUT(I,J,K).NE.1) GO TO 2
      DX=DXREC(I+IOFF,NBLK)

C  CONVERT POROSITY TO PORE VOLUME

      POR(I,J,K)=DX*DY*DZ*POR(I,J,K)

C  EQUILIBRIUM FLUID PRESSURE 
C  PICK OUT CLOSEST DEPTH FROM PREVIOUS CALCULATIONS

      M=1
      DEPB=DEPTH(I,J,K)
      IF (ABS(DEPB-DEPC(M)).GT.ABS(DEPB-DEPC(2))) M=2
      IF (ABS(DEPB-DEPC(M)).GT.ABS(DEPB-DEPC(3))) M=3

      DEPA=DEPC(M)
      DENA=DENC(M)
      PRESA=PRESC(M)

C  CALCULATE FLUID PRESSURE AND DENSITY AT I,J,K 

      GRD2=.5D0*GRAV*DENA*(DEPB-DEPA)
      DP=2.D0*GRD2/(1.D0-GRD2*FLCMP)

      DO  N=1,3
      DENB=EXP(FLCMP*DP)
      F=DP-GRD2*(1.D0+DENB)
      DF=1.D0-GRD2*FLCMP*DENB
      DP=DP-F/DF
      enddo
      
      PRESB=PRESA+DP
      DENB=STFLDEN*EXP(FLCMP*PRESB)

C  STORE INITIAL EQUILLIBRIUM RESULTS
 
      PRES(I,J,K) = PRESB
      DEPC(2)=DEPB
      DENC(2)=DENB
      PRESC(2)=PRESB

      IF (TOPI)THEN
         TOPI=.FALSE.
         DEPC(3)=DEPB
         DENC(3)=DENB
         PRESC(3)=PRESB
      ENDIF

C  COLLECT TYPICAL GRID COLUMN DATA AT WELLS

      DO 15 LW=1,MW
      IF (J.EQ.JW(LW).AND.K.EQ.KW(LW)) THEN
         NWE(LW)=NWE(LW)+1
         IW(NWE(LW),LW)=I+IOFF
         PWBW(NWE(LW),LW)=PRESB
         DEPBW(NWE(LW),LW)=DEPB
      ENDIF
   15 CONTINUE

    2 CONTINUE

C  PRINT TYPICAL COLUMN DATA

      IF (LEVELC.AND.(NTYPOUT.GT.0).AND.ONLYONCE.AND.NBLK.EQ.1) THEN
         ONLYONCE=.FALSE.
         WRITE (NFOUT,*)
         TITU='******'
         CALL PRTTIT(TITU)
         TITU='TYPICAL ROCK COLUMNS'
         CALL PRTTIT(TITU)
      ENDIF

      DO 16 L=1,MW
      AL(1)=' '
      N=1
      LS=1
      IF (NWE(L).GT.0) THEN

         LS=70
         WRITE (AL(1),20)
   20    FORMAT(' ')
         WRITE (AL(2),8) JW(L)+JOFF,KW(L)+KOFF,NBLK,NW(L)
    8    FORMAT(' J =',I5,4X,'K =',I5,4X,'FAULT BLOCK =',I4,4X,
     &      '(WELL',I4,')')
         WRITE (AL(3),20)
         WRITE (AL(4),9)
    9    FORMAT(T5,'I',T9,'P, psi',T23,'DEPTH, ft')
         WRITE (AL(5),20)
         N=5
         DO 17 M=1,NWE(L)
         N=N+1
   17    WRITE (AL(N),10) IW(M,L),PWBW(M,L),DEPBW(M,L)
   10    FORMAT(I5,4G14.5)

         IF (MYPRC.EQ.0) THEN
            IF (LEVELC) THEN
               DO 18 M=1,N
               ALS=AL(M)
               DO 22 JTO=80,1,-1
               J1O=JTO
               IF (ALS1(JTO).NE.' ') GO TO 18
   22          CONTINUE
   18          WRITE (NFOUT,19) (ALS1(JTO),JTO=1,J1O)
   19          FORMAT(80A1)
            ENDIF
         ENDIF
            
      ENDIF

$MANY      IF (MYPRC.GT.0) CALL TYPEOUT(AL,N)

   16 CONTINUE

      IF (LEVELC.AND.ONETYP) THEN
         ONETYP=.FALSE.
         DO 21 LW=1,NTYPOUT
$MANY      IF (NWELPRC(LW).NE.0.AND.(MODWEL(LW).EQ.MODACT
$MANY$TRCHEM     & .OR. MODACT.EQ.FLOWMODEL
$MANY     &   ))
$MANY     & CALL TYPEOUT(AL,$MXREAD/80)
   21    CONTINUE
      ENDIF
        
      END
