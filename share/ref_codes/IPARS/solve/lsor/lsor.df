C  LSOR.F - LINE SOR LINEAR SOLVER

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE LSOR   (ITLIN,NERR)
C  SUBROUTINE LSORW  (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                     KEYOUT,NBLK,COF,DUNK,RESID)
C  SUBROUTINE RNULL1 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                     KEYOUT,NBLK,COF,DUNK,RESID)
C  SUBROUTINE RNULL2 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                     KEYOUT,NBLK,COF,DUNK,RESID)
C  SUBROUTINE LSORI  (NERR,KINP)
C  SUBROUTINE LSORRO (NERR)
C  SUBROUTINE LSORRI (IU,NERR)
C  SUBROUTINE LSORCK (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                     KEYOUT,NBLK,COF,DUNK,RESID)
C  SUBROUTINE LSORIW (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                     KEYOUT,NBLK,COF,DUNK,RESID)
C  SUBROUTINE LWATTS (ITLIN)

C  CODE HISTORY:

C  JOHN WHEELER     9/15/97    INITIAL CODE
C  JOHN WHEELER     10/9/97    ARBITRARY NUMBER OF EQUATIONS
C  JOHN WHEELER    11/12/97    MULTIPLE FAULT BLOCKS
C  JOHN WHEELER     4/10/98    OPTIMISE SOR FACTOR AND INPUT CONTROL DATA
C  JOHN WHEELER     4/14/98    CHANGE ERROR RETURN FOR TIME STEP CUT
C  JOHN WHEELER      3/5/99    ADD DUAL APPROXIMATION INTERFACE CALLS
C  JOHN WHEELER     6/30/99    ADD MULTIMODEL CAPABILITY
C  RICK DEAN        3/1/01     ADD CHECK ON DUB WHEN SQRT IS NEGATIVE

C*********************************************************************
      SUBROUTINE LSOR (ITLIN,NERR)
C*********************************************************************

C  Line SOR executive routine

C  ITLIN  = NUMBER OF LINEAR ITERATIONS (OUTPUT, INTEGER)

C  NERR = ERROR KEY STEPPED BY ONE FOR EACH ERROR
C         (INPUT AND OUTPUT, INTEGER )

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'

      INCLUDE 'lsorc.h'

      REAL*8 DUB,DSOR,REDM,REDT,T
      INTEGER ISOR(4)
      LOGICAL USEONE

      EXTERNAL LSORW,LSORCK,LSORIW

      DUM=MAXHR
      LWAT=2.5+.009*DUM*DUM
      NWAT=999
      ISOR(1)=3

C  OPTIMISE SOR FACTOR

      IF (SOROPT.AND.NEWT.EQ.1) THEN
         IF (NSORT1.EQ.1) THEN
            NSORT=2
         ELSE
            NSORT=1
         ENDIF
         NSORT1=NSORT
         NT=3
         IF (REDMS(1,3).EQ.0..OR.REDMS(2,3).EQ.0.) NT=2
         IF (REDMS(1,2).EQ.0..OR.REDMS(2,2).EQ.0.) NT=1
         IF (REDMS(1,1).EQ.0..OR.REDMS(2,1).EQ.0.) NT=0
         IF (NT.GT.0) THEN
            IF (NT.GT.1) THEN
               L=0
               DO 27 I=1,NT
               IF (REDMS(1,I).GE.REDMS(2,I)) GO TO 28
   27          CONTINUE
               L=1
               GO TO 29
   28          DO 30 I=1,NT
               IF (REDMS(2,I).GE.REDMS(1,I)) GO TO 29
   30          CONTINUE
               L=2
         
   29          IF (L.GT.0) THEN
                  M=1
                  IF (L.EQ.1) M=2
                  DSOR=.005+.03D0*(2.D0-FSORT(L))
                  IF (FSORT(L).LT.FSORT(M)) THEN
                     FSORT(M)=FSORT(L)-DSOR
                  ELSE
                     FSORT(M)=FSORT(L)+DSOR
                  ENDIF
               ELSE
                  DUB=FSORT(1)
                  FSORT(1)=FSORT(2)
                  FSORT(2)=DUB
               ENDIF
            ENDIF
            DO 33 I=1,3
            REDMS(1,I)=0.
   33       REDMS(2,I)=0.
         ENDIF
         IF (LEVELC.AND.BUGKEY(7)) WRITE(NFOUT,25) FSORT(NSORT)
   25    FORMAT(' LSOR FACTOR =',F10.6)
      ENDIF


C  CLEAR THE UNKNOWNS AND COMPUTE INITIAL RESIDUAL NORMS

      DO 1 I=1,$MXMOD
      DO 2 L=1,MXNUMEQS
      RMXZ(L,I)=0.D0
    2 RTOTZ(L,I)=0.D0
      IF (MODELON(I)) THEN
         ISOR(2)=N_COFV(I)
         ISOR(3)=N_DUNKV(I)
         ISOR(4)=N_RESIDV(I)
         MODACT=I
         CALL CALLWORK(LSORIW,ISOR)
      ENDIF
    1 CONTINUE
      MODACT=0

$MANY      CALL TIMON(4)
$MANY      CALL MAXIT($MXMOD*$MXNUMEQ,RMXZ)
$MANY      CALL SUMIT($MXMOD*$MXNUMEQ,RTOTZ)
$MANY      CALL TIMOFF(4)

      IF (LEVELC.AND.BUGKEY(7)) THEN
         WRITE(NFOUT,25) FSORT(NSORT)
         N=0
         DO 3 I=1,$MXMOD
         IF (MODELON(I)) THEN
            WRITE (NFOUT,4) N,I,(RMXZ(J,I),J=1,MODEQS(I))
    4       FORMAT(' IT',I4,' MODEL',I3,' MAX RESIDS',4G12.4/(6G12.4))
            WRITE (NFOUT,5) N,I,(RTOTZ(J,I),J=1,MODEQS(I))
    5       FORMAT(' IT',I4,' MODEL',I3,' TOT RESIDS',4G12.4/(6G12.4))
         ENDIF
    3    CONTINUE
      ENDIF

C  START ITERATION LOOP

      ITLIN=0
      USEONE=.TRUE.
    6 ITLIN=ITLIN+1

C  SELECT SOR FACTOR

      IF (USEONE) THEN
         USEONE=.FALSE.
         FSOR=1.D0
      ELSE
         FSOR=FSORT(NSORT)
      ENDIF

C  RED/BLACK LOOP

      DO 7 K=1,0,-1
      KRB=K

C  RELAX

      DO 8 I=1,$MXMOD
      IF (MODELON(I)) THEN
         ISOR(2)=N_COFV(I)
         ISOR(3)=N_DUNKV(I)
         ISOR(4)=N_RESIDV(I)
         MODACT=I
         CALL CALLWORK(LSORW,ISOR)
      ENDIF
    8 CONTINUE
      MODACT=0

C  UPDATE UNKNOWNS IN THE COMMUNICATION LAYER

$DUAL      CALL LDUAL(ITLIN,NERR)

$MANY      CALL TIMON(4)
$MANY      DO 9 I=1,$MXMOD
$MANY      IF (MODELON(I)) THEN
$MANY         MODACT=I
$MANY         CALL UPDATE(N_DUNKV(I),1)
$MANY      ENDIF
$MANY    9 CONTINUE
$MANY      MODACT=0
$MANY      CALL TIMOFF(4)

    7 CONTINUE

C  CHECK CONVERGENCE

      IF ((ITLIN.GE.MINLIN).OR.BUGKEY(7)) THEN

         DO 10 I=1,$MXMOD
         DO 11 L=1,MXNUMEQS
         RMX(L,I)=0.D0
   11    RTOT(L,I)=0.D0
         IF (MODELON(I)) THEN
            ISOR(2)=N_COFV(I)
            ISOR(3)=N_DUNKV(I)
            ISOR(4)=N_RESIDV(I)
            MODACT=I
            CALL CALLWORK(LSORCK,ISOR)
         ENDIF
   10    CONTINUE
         MODACT=0

$MANY      CALL TIMON(4)
$MANY      CALL MAXIT($MXMOD*$MXNUMEQ,RMX)
$MANY      CALL SUMIT($MXMOD*$MXNUMEQ,RTOT)
$MANY      CALL TIMOFF(4)

         IF (MYPRC.EQ.0) THEN

            REDM=0.D0
            REDT=0.D0
            DO 15 I=1,$MXMOD
            IF (MODELON(I)) THEN
               DO 14 J=1,MODEQS(I)
               IF (RMXZ(J,I).NE.0.D0) THEN
                  DUB=ABS(RMX(J,I)/RMXZ(J,I))
                  IF (REDM.EQ.0.D0.OR.DUB.LT.REDM) REDM=DUB
               ENDIF
               IF (RTOTZ(J,I).NE.0.D0) THEN
                  DUB=ABS(RTOT(J,I)/RTOTZ(J,I))
                  IF (REDT.EQ.0.D0.OR.DUB.LT.REDT) REDT=DUB
               ENDIF
   14          CONTINUE
            ENDIF
   15       CONTINUE

            IF (LEVELC.AND.BUGKEY(7)) THEN
               DO 12 I=1,$MXMOD
               IF (MODELON(I)) THEN
                  WRITE (NFOUT,4) ITLIN,I,(RMX(J,I),J=1,MODEQS(I))
                  WRITE (NFOUT,5) ITLIN,I,(RTOT(J,I),J=1,MODEQS(I))
               ENDIF
   12          CONTINUE
               WRITE(NFOUT,16) ITLIN,FSOR,REDM,REDT
   16          FORMAT(' IT',I4,' SOR FAC',F8.4,' MAX REDUCT',G12.4,
     &           ' TOT REDUCT',G12.4)
            ENDIF

            T=SORTOL
C           IF (ITLIN.GT.MAXLIN-4) T=5.D0*T
            IF (ITLIN.GT.MAXLIN-4) T=.05
            IF (REDM.LT.T.AND.REDT.LT.T.AND.ITLIN.GE.MINLIN) THEN
               LKVG=1
            ELSE
               LKVG=2
            ENDIF
            IF (ITLIN.GE.MAXLIN) LKVG=3

         ENDIF

$MANY      IF (NUMPRC.GT.1) THEN
$MANY         CALL SPREAD(1,LKVG)
$MANY      ENDIF

         IF (LKVG.EQ.1) GO TO 23
         IF (LKVG.EQ.3) THEN
            NERR=NERR+1
            GO TO 23
         ENDIF

      ENDIF

C  WATTS CORECTION

      NWAT=NWAT+1
      IF (NWAT.GT.LWAT) THEN
         NWAT=0
         CALL LWATTS(ITLIN)
      ENDIF

      GO TO 6

C  OPTIMISE SOR FACTOR - SAVE ERROR REDUCTION RATE

   23 IF (.NOT.SOROPT.OR.NEWT.GT.3) RETURN

$MANY      IF (NUMPRC.GT.1) THEN
$MANY         CALL MAXIT(1,REDM)
$MANY         CALL SPREAD8(1,REDM)
$MANY      ENDIF

      DUB=ITLIN
      REDMS(NSORT,NEWT)=REDM**(1.D0/DUB)
      NSORT=NSORT+1
      IF (NSORT.GT.2) NSORT=1

      END
C*********************************************************************
      SUBROUTINE LSORW (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                  KEYOUT,NBLK,COF,DUNK,RESID)
C*********************************************************************
 
C  ROUTINE MAKES ONE LINE SOR ITERATION.  THIS IS A WORK ROUTINE.

C  COF(I,J,K,N,L,M)  = JACOBIAN COEFFICIENTS (INPUT, REAL*4)

C  DUNK(I,J,K,L) = UNKNOWNS (OUTPUT, REAL*8)

C  RESID(I,J,K,L)= RESIDUALS (INPUT, REAL*8)

C***********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'

      INCLUDE 'lsorc.h'

      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(*)
      REAL*4    COF(*)
      REAL*8    DUNK(*),RESID(*)
      REAL*8    DUB1,DUB2,DUB3,A(IDIM,$MXNUMEQ,3*$MXNUMEQ),R(IDIM,$MXNUMEQ)

C  SET SOME INDEX OFFSETS
C  OFF=I+(J-1)*IDIM+(K-1)*IDIM*JDIM+(L-1)*IDIM*JDIM*KDIM
C      +(M-1)*IDIM*JDIM*KDIM*$NUMCOF+(N-1)*IDIM*JDIM*KDIM*$NUMCOF*MEQ

   49 CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)
      MEQ=NUMEQS(NBLK)
      JKO=JOFF+KOFF
      M2=IDIM
      M3=M2*JDIM
      M4=M3*KDIM
      M5=M4*$NUMCOF
      M6=M5*MEQ
      MEQM=MEQ-1
      MEQP=MEQ+1
      MEQ2=2*MEQ
      MEQ3=3*MEQ

C  START ONE HALF OF A LINE SOR ITERATION

      KOF=(KL1-2)*M3
      DO 1 K=KL1,KL2
      KK=K+JKO
      JL1=JL1V(K)
      JL2=JL2V(K)
      KOF=KOF+M3
      JOF=KOF+(JL1-2)*M2
      DO 1 J=JL1,JL2
      JOF=JOF+M2
      JJ=J+KK
      IF (MOD(JJ,2).NE.KRB) GO TO 1

C  SET UP FOR ONE LINE

      N=0
      IOF=JOF+IL1-1
      DO 2 I=IL1,IL2
      IOF=IOF+1
      IF (KEYOUT(IOF).NE.1) GO TO 2
      N=N+1
      LOF=IOF-M5
      LLOF=IOF-M4

      DO 16 L=1,MEQ
      LOF=LOF+M5
      LLOF=LLOF+M4
      DUB2=RESID(LLOF)
      MOF=LOF-M6
      MMOF=IOF-M4

      DO 15 M=1,MEQ
      MOF=MOF+M6
      MMOF=MMOF+M4

      A(N,L,M+MEQ)=COF(MOF)
      DUB2=DUB2-COF(MOF)*DUNK(MMOF)

      MOFC=MOF+M4
      IF (I.GT.1) THEN
         A(N,L,M)=COF(MOFC)
         DUB2=DUB2-COF(MOFC)*DUNK(MMOF-1)
      ENDIF

      MOFC=MOFC+M4
      IF (I.LT.IDIM) THEN
         A(N,L,M+MEQ2)=COF(MOFC)
         DUB2=DUB2-COF(MOFC)*DUNK(MMOF+1)
      ENDIF

      MOFC=MOFC+M4
      IF (J.GT.1) DUB2=DUB2-COF(MOFC)*DUNK(MMOF-M2)

      MOFC=MOFC+M4
      IF (J.LT.JDIM) DUB2=DUB2-COF(MOFC)*DUNK(MMOF+M2)

      MOFC=MOFC+M4
      IF (K.GT.1) DUB2=DUB2-COF(MOFC)*DUNK(MMOF-M3)

      MOFC=MOFC+M4
      IF (K.LT.KDIM) DUB2=DUB2-COF(MOFC)*DUNK(MMOF+M3)

   15 CONTINUE
   16 R(N,L)=DUB2

    2 CONTINUE

C  SOLVE FOR ONE LINE

      IF (N.EQ.0) GO TO 1
      NM1=N-1

C  FORWARD ELIMINATION

      DO 17 L=1,MEQM
      LM=L+MEQ
      LP=L+MEQP
      DUB1=A(1,L,LM)
      DUB3=R(1,L)
      DO 17 LL=L+1,MEQ
      DUB2=A(1,LL,LM)/DUB1
      R(1,LL)=R(1,LL)-DUB2*DUB3
      DO 17 M=LP,MEQ3
   17 A(1,LL,M)=A(1,LL,M)-DUB2*A(1,L,M)

      LC=MEQ3
      DO 18 NN=2,N
      NNM=NN-1

      DO 19 L=1,MEQ
      LM=L+MEQ
      LP=L+1
      DUB1=A(NNM,L,LM)
      DUB3=R(NNM,L)
      DO 19 LL=1,MEQ
      DUB2=A(NN,LL,L)/DUB1
      R(NN,LL)=R(NN,LL)-DUB2*DUB3
      DO 19 M=LP,MEQ2
   19 A(NN,LL,M)=A(NN,LL,M)-DUB2*A(NNM,L,M+MEQ)

      IF (NN.EQ.N) LC=MEQ2
      DO 20 L=1,MEQM
      LM=L+MEQ
      LP=L+MEQP
      DUB1=A(NN,L,LM)
      DUB3=R(NN,L)
      DO 20 LL=L+1,MEQ
      DUB2=A(NN,LL,LM)/DUB1
      R(NN,LL)=R(NN,LL)-DUB2*DUB3
      DO 20 M=LP,LC
   20 A(NN,LL,M)=A(NN,LL,M)-DUB2*A(NN,L,M)

   18 CONTINUE

C  BACK SUBSTITUTION

      R(N,MEQ)=R(N,MEQ)/A(N,MEQ,MEQ2)
      DO 21 L=MEQM,1,-1
      DUB1=R(N,L)
      DO 22 M=L+1,MEQ
   22 DUB1=DUB1-R(N,M)*A(N,L,M+MEQ)
   21 R(N,L)=DUB1/A(N,L,L+MEQ)

      DO 24 NN=NM1,1,-1
      NNP=NN+1
      DO 24 L=MEQ,1,-1
      DUB1=R(NN,L)
      DO 25 M=1,MEQ
   25 DUB1=DUB1-R(NNP,M)*A(NN,L,M+MEQ2)
      DO 26 M=L+1,MEQ
   26 DUB1=DUB1-R(NN,M)*A(NN,L,M+MEQ)
   24 R(NN,L)=DUB1/A(NN,L,L+MEQ)

C  UPDATE

      N=0
      IOF=JOF+IL1-1
      DO 9 I=IL1,IL2
      IOF=IOF+1
      IF (KEYOUT(IOF).EQ.1) THEN
         N=N+1
         LOF=IOF
         DO 27 L=1,MEQ
         DUNK(LOF)=DUNK(LOF)+FSOR*R(N,L)
   27    LOF=LOF+M4
      ENDIF
    9 CONTINUE

    1 CONTINUE
      END
C*********************************************************************
      SUBROUTINE RNULL1 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                  KEYOUT,NBLK,COF,DUNK,RESID)
C*********************************************************************
 
C  ROUTINE STARTS NULL SUM OF THE RESIDUALS.  THIS IS A WORK ROUTINE.

C  COF(I,J,K,N,L,M)  = JACOBIAN COEFFICIENTS (INPUT, REAL*4)

C  DUNK(I,J,K,L) = UNKNOWNS (OUTPUT, REAL*8)

C  RESID(I,J,K,L)= RESIDUALS (INPUT, REAL*8)

C***********************************************************************

      INCLUDE 'control.h'

      INCLUDE 'lsorc.h'

      INTEGER JL1V(KDIM),JL2V(KDIM), KEYOUT(IDIM,JDIM,KDIM)
      REAL*4    COF(IDIM,JDIM,KDIM,$NUMCOF,*)
      REAL*8    DUNK(IDIM,JDIM,KDIM,*), RESID(IDIM,JDIM,KDIM,*)
      REAL*8    DUB1,C1,C2,C3,C4,C5,C6,C7

      NM=MODBLK(NBLK)
      MEQ=NUMEQS(NBLK)
      MEQP=MEQ+1

      DO 1 K=KL1,KL2
      JL1=JL1V(K)
      JL2=JL2V(K)
      DO 1 J=JL1,JL2
      DO 1 I=IL1,IL2
      IF (KEYOUT(I,J,K).EQ.1) THEN

         DO 3 L=1,MEQ
         DUB1=RESID(I,J,K,L)
         LM=L
         DO 4 M=1,MEQ
         C1=COF(I,J,K,1,LM)
         C2=COF(I,J,K,2,LM)
         C3=COF(I,J,K,3,LM)
         C4=COF(I,J,K,4,LM)
         C5=COF(I,J,K,5,LM)
         C6=COF(I,J,K,6,LM)
         C7=COF(I,J,K,7,LM)

         S(L,M,NM)=S(L,M,NM)+C1+C2+C3+C4+C5+C6+C7

         DUB1=DUB1-C1*DUNK(I,J,K,M)

         IF (I.GT.1) DUB1=DUB1-C2*DUNK(I-1,J,K,M)

         IF (I.LT.IDIM) DUB1=DUB1-C3*DUNK(I+1,J,K,M)

         IF (J.GT.1) DUB1=DUB1-C4*DUNK(I,J-1,K,M)

         IF (J.LT.JDIM) DUB1=DUB1-C5*DUNK(I,J+1,K,M)

         IF (K.GT.1) DUB1=DUB1-C6*DUNK(I,J,K-1,M)

         IF (K.LT.KDIM) DUB1=DUB1-C7*DUNK(I,J,K+1,M)

    4    LM=LM+MEQ
    3    S(L,MEQP,NM)=S(L,MEQP,NM)+DUB1

      ENDIF
    1 CONTINUE

      END
C*********************************************************************
      SUBROUTINE RNULL2 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                  KEYOUT,NBLK,COF,DUNK,RESID)
C*********************************************************************
 
C  ROUTINE FINISHES NULL SUM OF THE RESIDUALS.  THIS IS A WORK ROUTINE.

C  COF(I,J,K,N,L,M)  = JACOBIAN COEFFICIENTS (INPUT, REAL*4)

C  DUNK(I,J,K,L) = UNKNOWNS (OUTPUT, REAL*8)

C  RESID(I,J,K,L)= RESIDUALS (INPUT, REAL*8)

C***********************************************************************

      INCLUDE 'control.h'

      INCLUDE 'lsorc.h'

      INTEGER JL1V(KDIM),JL2V(KDIM), KEYOUT(IDIM,JDIM,KDIM)
      REAL*4    COF(*)
      REAL*8    DUNK(IDIM,JDIM,KDIM,*), RESID(*)
      REAL*8    DUB

      NM=MODBLK(NBLK)
      MEQ=NUMEQS(NBLK)

      DO 2 L=1,MEQ
      DUB=RNUL(L,NM)*1.2D0
      DO 2 K=KL1,KL2
      JL1=JL1V(K)
      JL2=JL2V(K)
      DO 2 J=JL1,JL2
      DO 2 I=IL1,IL2
      IF (KEYOUT(I,J,K).EQ.1) DUNK(I,J,K,L)=DUNK(I,J,K,L)+DUB
    2 CONTINUE

      END
C*********************************************************************
      SUBROUTINE LSORI (NERR,KINP)
C*********************************************************************
 
C  ROUTINE INITIALIZES LINE SOR SOLVER

C  NERR = Error number stepped by 1 on error (input & output, INTEGER)

C  KINP = Input type
C       = 1 ==> initial data
C       = 2 ==> transient data

C***********************************************************************
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'blkary.h'

      INCLUDE 'lsorc.h'

      IF (KINP.EQ.1) THEN
         IF (LEVELC) THEN
            WRITE (NFOUT,*)
            TITU='******'
            CALL PRTTIT(TITU)
            TITU='LINE SOR SOLVER'
            CALL PRTTIT(TITU)
         ENDIF

         MAXHR=0
         DO 1 I=1,NUMBLK
         CALL BLKDIM(I,NX,NY,NZ,KERR)
         J=MAX(NY,NZ)
         IF (J.GT.MAXHR) MAXHR=J
    1    CONTINUE

         CALL GETVAL('MAXJK ',MAXHR,'I4',0,0,0,0,NDUM,NERR)
         IF (LEVELC) WRITE (NFOUT,6) MAXHR
    6    FORMAT(/' LINE SOR MAX J,K (MAXJK) =',T50,I7)

         MINLIN=5+MAXHR
         MAXLIN=6.*MINLIN+.1*MAXHR*MAXHR

         DUB=MAXHR
         DUB=1.D0-4.9348/DUB**2

         IF(ABS(DUB).GT.1.0D0) THEN
            DUB = 1.95D0
         ELSE
            DUB=2.D0/(1+SQRT(1.D0-DUB**2))
         ENDIF
         DSOR=.005+.03D0*(2.D0-DUB)
         FSORT(1)=DUB
         FSORT(2)=DUB-DSOR
         NSORT=1
         NSORT1=2
         DO 5 I=1,2
         DO 5 J=1,3
    5    REDMS(I,J)=0.
         SOROPT=.TRUE.
         SORTOL=.01D0
      ENDIF

      CALL GETVAL('SOROPT ',SOROPT,'L4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,2) SOROPT
    2 FORMAT(' OPTIMISE LINE SOR FACTOR (SOROPT) =',T50,L7)

      CALL GETVAL('SORTOL ',SORTOL,'R8',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,3) SORTOL
    3 FORMAT(' LINE SOR RELATIVE TOLERANCE (SORTOL) =',T45,G12.4)

      CALL GETVAL('SORFAC ',FSORT(1),'R8',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,4) FSORT(1)
    4 FORMAT(' LINE SOR FACTOR (SORFAC) =',T45,F12.5)

      CALL GETVAL('MAXLIN ',MAXLIN,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,7) MAXLIN
    7 FORMAT(' MAX SOR ITERATIONS (MAXLIN) =',T50,I7)

      CALL GETVAL('MINLIN ',MINLIN,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,8) MINLIN
    8 FORMAT(' MIN SOR ITERATIONS (MINLIN) =',T50,I7)

      END
C*********************************************************************
      SUBROUTINE LSORRO (NERR)
C*********************************************************************
 
C  ROUTINE OUTPUTS RESTART DATA FOR LINE SOR SOLVER

C  NERR = Error number stepped by 1 on error (input & output, INTEGER)

C***********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'restc.h'

      INCLUDE 'lsorc.h'

      IF (MYPRC.NE.0) RETURN

      L=6
      IF (FORMOUT) THEN
         WRITE (NFROUT,1) L,NSORT,NSORT1,L,L,L
    1    FORMAT(6I9)
         WRITE (NFROUT,2) SORTOL,FSORT,REDMS
    2    FORMAT(5G22.16)
      ELSE
         WRITE (NFROUT) L,NSORT,NSORT1,L,L,L
         WRITE (NFROUT) SORTOL,FSORT,REDMS
      ENDIF

      END
C*********************************************************************
      SUBROUTINE LSORRI (IU,NERR)
C*********************************************************************
 
C  ROUTINE INPUTS RESTART DATA FOR LINE SOR SOLVER

C  IU() = Utility integers (input, INTEGER)

C  NERR = Error number stepped by 1 on error (input & output, INTEGER)

C***********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'restc.h'

      INCLUDE 'lsorc.h'
      INTEGER IU(6)

      IF (MYPRC.EQ.0) THEN
         IF (FORMIN) THEN
            READ (NFRIN,2) SORTOL,FSORT,REDMS
    2       FORMAT(5G22.16)
         ELSE
            READ (NFRIN) SORTOL,FSORT,REDMS
         ENDIF
      ENDIF

$MANY      IF (NUMPRC.GT.1) THEN
$MANY         CALL SPREAD (3,IU)
$MANY         CALL SPREAD8(1,SORTOL)
$MANY         CALL SPREAD8(2,FSORT)
$MANY         CALL SPREAD4(6,REDMS)
$MANY      ENDIF

         NSORT=IU(2)
         NSORT1=IU(3)

      END
C*********************************************************************
      SUBROUTINE LSORSO ()
C*********************************************************************
 
C  ROUTINE PRINTS LINE SOR STANDARD OUTPUT (IF ANY)

C  NOTE: CALL ONLY IF LEVELC IS TRUE
C***********************************************************************
      INCLUDE 'control.h'

      INCLUDE 'lsorc.h'

      IF (SOROPT) WRITE (NFOUT,1) FSORT(NSORT)
    1 FORMAT(' LINE SOR FACTOR =',T45,F12.4)

      END
C*********************************************************************
      SUBROUTINE LSORCK (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                  KEYOUT,NBLK,COF,DUNK,RESID)
C*********************************************************************
 
C  ROUTINE CHECKS LSOR CONVERGENCE.  THIS IS A WORK ROUTINE.

C  COF(I,J,K,N,L,M)  = JACOBIAN COEFFICIENTS (INPUT, REAL*4)

C  DUNK(I,J,K,L) = UNKNOWNS (OUTPUT, REAL*8)

C  RESID(I,J,K,L)= RESIDUALS (INPUT, REAL*8)

C***********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'

      INCLUDE 'lsorc.h'

      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(*)
      REAL*4    COF(*)
      REAL*8    DUNK(*),RESID(*),DUB1

C  SET SOME INDEX OFFSETS
C  OFF=I+(J-1)*IDIM+(K-1)*IDIM*JDIM+(L-1)*IDIM*JDIM*KDIM
C      +(M-1)*IDIM*JDIM*KDIM*$NUMCOF+(N-1)*IDIM*JDIM*KDIM*$NUMCOF*MEQ

      MEQ=NUMEQS(NBLK)
      NM=MODBLK(NBLK)
      M2=IDIM
      M3=M2*JDIM
      M4=M3*KDIM
      M5=M4*$NUMCOF
      M6=M5*MEQ

C  START CONVERGENCE CHECK

      KOF=(KL1-2)*M3
      DO 2 K=KL1,KL2
      JL1=JL1V(K)
      JL2=JL2V(K)
      KOF=KOF+M3
      JOF=KOF+(JL1-2)*M2
      DO 2 J=JL1,JL2
      JOF=JOF+M2
      IOF=JOF+IL1-1
      DO 2 I=IL1,IL2
      IOF=IOF+1
      IF (KEYOUT(IOF).NE.1) GO TO 2

      LOF=IOF-M5
      LLOF=IOF-M4
      DO 3 L=1,MEQ
      LOF=LOF+M5
      LLOF=LLOF+M4
      DUB1=RESID(LLOF)

      MOF=LOF-M6
      MMOF=IOF-M4
      DO 4 M=1,MEQ
      MOF=MOF+M6
      MMOF=MMOF+M4

      DUB1=DUB1-COF(MOF)*DUNK(MMOF)

      MOFC=MOF+M4
      IF (I.GT.1) DUB1=DUB1-COF(MOFC)*DUNK(MMOF-1)
      MOFC=MOFC+M4
      IF (I.LT.IDIM) DUB1=DUB1-COF(MOFC)*DUNK(MMOF+1)
      MOFC=MOFC+M4
      IF (J.GT.1) DUB1=DUB1-COF(MOFC)*DUNK(MMOF-M2)
      MOFC=MOFC+M4
      IF (J.LT.JDIM) DUB1=DUB1-COF(MOFC)*DUNK(MMOF+M2)
      MOFC=MOFC+M4
      IF (K.GT.1) DUB1=DUB1-COF(MOFC)*DUNK(MMOF-M3)
      MOFC=MOFC+M4
      IF (K.LT.KDIM) DUB1=DUB1-COF(MOFC)*DUNK(MMOF+M3)

    4 CONTINUE

      IF (ABS(DUB1).GT.RMX(L,NM)) RMX(L,NM)=ABS(DUB1)
    3 RTOT(L,NM)=RTOT(L,NM)+DUB1

    2 CONTINUE

      END
C*********************************************************************
      SUBROUTINE LSORIW (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                  KEYOUT,NBLK,COF,DUNK,RESID)
C*********************************************************************
 
C  ROUTINE CLEARS THE UNKNOWNS AND COMPUTES INITIAL RESIDUAL NORMS.
C  THIS IS A WORK ROUTINE.

C  COF(I,J,K,N,L,M)  = JACOBIAN COEFFICIENTS (INPUT, REAL*4) (NOT USED)

C  DUNK(I,J,K,L) = UNKNOWNS (OUTPUT, REAL*8)

C  RESID(I,J,K,L)= RESIDUALS (INPUT, REAL*8)

C***********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'

      INCLUDE 'lsorc.h'

      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(*)
      REAL*4    COF(*)
      REAL*8    DUNK(*),RESID(*)

C  SELECT SOR FACTOR

C  SET SOME INDEX OFFSETS
C  OFF=I+(J-1)*IDIM+(K-1)*IDIM*JDIM+(L-1)*IDIM*JDIM*KDIM
C      +(M-1)*IDIM*JDIM*KDIM*$NUMCOF+(N-1)*IDIM*JDIM*KDIM*$NUMCOF*MEQ

      MEQ=NUMEQS(NBLK)
      NM=MODBLK(NBLK)
      M2=IDIM
      M3=M2*JDIM
      M4=M3*KDIM

C  SET CHANGES IN UNKNOWNS TO ZERO

      LOF=-M4
      DO 1 L=1,MEQ
      LOF=LOF+M4
      KOF=LOF-M3
      DO 1 K=1,KDIM
      KOF=KOF+M3
      JOF=KOF-M2
      DO 1 J=1,JDIM
      JOF=JOF+M2
      IOF=JOF
      DO 1 I=1,IDIM
      IOF=IOF+1
    1 DUNK(IOF)=0.D0

C  COMPUTE INITIAL MAX AND TOTAL RESIDUALS BY MODEL AND EQUATION

      KOF=(KL1-2)*M3
      DO 2 K=KL1,KL2
      JL1=JL1V(K)
      JL2=JL2V(K)
      KOF=KOF+M3
      JOF=KOF+(JL1-2)*M2
      DO 2 J=JL1,JL2
      JOF=JOF+M2
      IOF=JOF+IL1-1
      DO 2 I=IL1,IL2
      IOF=IOF+1
      IF (KEYOUT(IOF).EQ.1) THEN
         LOF=IOF-M4
         DO 3 L=1,MEQ
         LOF=LOF+M4
         IF (ABS(RESID(LOF)).GT.RMXZ(L,NM))
     &      RMXZ(L,NM)=ABS(RESID(LOF))
    3    RTOTZ(L,NM)=RTOTZ(L,NM)+RESID(LOF)
      ENDIF
    2 CONTINUE

      END
C*********************************************************************
      SUBROUTINE LWATTS (ITLIN)
C*********************************************************************
 
C  ROUTINE APPLIES THE WATTS CORRECTION TO ELIMINATE THE MEAN ERROR

C  ITLIN = NUMBER OF LINEAR ITERATIONS

C***********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'unitsex.h'

      INCLUDE 'lsorc.h'

      INTEGER ISOR(4)
      REAL*8 CW,CO,CG,RGO,FO,FM,CV,DUB

      EXTERNAL RNULL1,RNULL2

      DO 17 I=1,$MXMOD
      DO 17 L=1,$MXNUMEQ
      DO 17 M=1,$MXNUMEQ+1
   17 S(L,M,I)=0.D0

$DUAL      KRB=2
$DUAL      CALL LDUAL(ITLIN,NERR)

      ISOR(1)=3
      NMA=0
      DO 18 I=1,$MXMOD
      IF (MODELON(I)) THEN
         NMA=NMA+1
         ISOR(2)=N_COFV(I)
         ISOR(3)=N_DUNKV(I)
         ISOR(4)=N_RESIDV(I)
         MODACT=I
         CALL CALLWORK(RNULL1,ISOR)
      ENDIF
   18 CONTINUE
      MODACT=0

$MANY      CALL TIMON(4)
$MANY      NSIZS=$MXNUMEQ*($MXNUMEQ+1)*$MXMOD
$MANY      CALL SUMIT(NSIZS,S)
$MANY      CALL TIMOFF(4)

      IF (MYPRC.EQ.0) THEN
         IF (NMA.EQ.1) THEN

            I=MODBLK(1)
            CALL LINSOV(MODEQS(I),S(1,1,I),RNUL(1,I),DUB,$MXNUMEQ)

         ELSE

            IF (MODELON($IMODEL)) THEN
               I=$IMODEL
               CO=.178107585530824D0/STDENO
               CW=.178107585530824D0/STDENW
               CG=1.D-3/STDENG
               IF (S(1,1,$IMODEL).EQ.0.D0) THEN
                  RGO=0.D0
               ELSE
                  RGO=S(3,1,$IMODEL)*CO/(S(1,1,$IMODEL)*CG)
                  IF (RGO.LT.0.D0) RGO=0.D0
               ENDIF

               IF (MODELON($TMODEL)) THEN
                  S(2,1,$IMODEL)=S(2,1,$IMODEL)+S(1,1,$TMODEL)*CW
                  S(2,4,$IMODEL)=S(2,4,$IMODEL)+S(1,2,$TMODEL)*CW
               ENDIF

               IF (MODELON($HMODEL)) THEN
                  FO=1.D0/(1.D0+RGO)
                  FM=1.D0-FO
                  CV=.178107585530824D0
                  S(1,1,$IMODEL)=S(1,1,$IMODEL)+S(1,1,$HMODEL)*FO*CO
                  S(1,2,$IMODEL)=S(1,2,$IMODEL)+S(1,2,$HMODEL)*CV
                  S(1,4,$IMODEL)=S(1,4,$IMODEL)+S(1,3,$HMODEL)*FO*CO
                  S(2,1,$IMODEL)=S(2,1,$IMODEL)+S(2,1,$HMODEL)*CW
                  S(2,2,$IMODEL)=S(2,2,$IMODEL)+S(2,2,$HMODEL)*CV*CW/CO
                  S(2,3,$IMODEL)=S(2,3,$IMODEL)+S(2,2,$HMODEL)*CV*CW/CG
                  S(2,4,$IMODEL)=S(2,4,$IMODEL)+S(2,3,$HMODEL)*CW
                  S(3,1,$IMODEL)=S(3,1,$IMODEL)+S(1,1,$HMODEL)*FM*CG
                  S(3,3,$IMODEL)=S(3,3,$IMODEL)+S(1,2,$HMODEL)*CV
                  S(3,4,$IMODEL)=S(3,4,$IMODEL)+S(1,3,$HMODEL)*FM*CG
               ENDIF

               CALL LINSOV(3,S(1,1,$IMODEL),RNUL(1,$IMODEL),DUB,
     &            $MXNUMEQ)

               IF (MODELON($TMODEL)) RNUL(1,$TMODEL)=RNUL(1,$IMODEL)

               IF (MODELON($HMODEL)) THEN
                  RNUL(1,$HMODEL)=RNUL(1,$IMODEL)
                  RNUL(2,$HMODEL)=RNUL(2,$IMODEL)*STDENO
     &               +RNUL(3,$IMODEL)*STDENG*.178107585530824D3
               ENDIF

            ELSE

               IF (MODELON($HMODEL)) THEN
                  I=$HMODEL

                  IF (MODELON($TMODEL)) THEN
                     S(2,1,$HMODEL)=S(2,1,$HMODEL)+S(1,1,$TMODEL)
                     S(2,3,$HMODEL)=S(2,3,$HMODEL)+S(1,2,$TMODEL)
                  ENDIF

                  CALL LINSOV(2,S(1,1,$IMODEL),RNUL(1,$IMODEL),DUB,
     &               $MXNUMEQ)

                  IF (MODELON($TMODEL)) RNUL(1,$TMODEL)=RNUL(1,$HMODEL)

               ENDIF

            ENDIF

         ENDIF

         IF (LEVELC.AND.BUGKEY(7)) THEN
            DO 25 I=1,$MXMOD
   25       WRITE (NFOUT,24) ITLIN,I,(RNUL(J,I),J=1,MODEQS(I))
   24       FORMAT(' IT',I4,' MODEL',I3,' WATTS COR.',4G12.4/(6G12.4))
         ENDIF

      ENDIF

$MANY       CALL TIMON(4)
$MANY       CALL SPREAD8($MXNUMEQ*$MXMOD,RNUL)
$MANY       CALL TIMOFF(4)

      DO 20 I=1,$MXMOD
      IF (MODELON(I)) THEN
         ISOR(2)=N_COFV(I)
         ISOR(3)=N_DUNKV(I)
         ISOR(4)=N_RESIDV(I)
         MODACT=I
         CALL CALLWORK(RNULL2,ISOR)
      ENDIF
   20 CONTINUE
      MODACT=0

$DUAL      KRB=2
$DUAL      CALL LDUAL(ITLIN,NERR)

$MANY      CALL TIMON(4)
$MANY      DO 21 I=1,$MXMOD
$MANY      IF (MODELON(I)) THEN
$MANY         MODACT=I
$MANY         CALL UPDATE(N_DUNKV(I),1)
$MANY      ENDIF
$MANY   21 CONTINUE
$MANY      MODACT=0
$MANY      CALL TIMOFF(4)

      END
