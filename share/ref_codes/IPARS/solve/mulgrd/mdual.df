C  MDUAL.F - MULTIGRID ROUTINES FOR DUAL APPROXIMATION MULTIBLOCK

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE MDUAL   (NERR)
C  SUBROUTINE MDUALB  (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                     KL2,KEYOUT,NBLK,DUNK,NBUFDIM,BUFIF8)
C  SUBROUTINE MDUALV  (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                     KL2,KEYOUT,NBLK,DUNK,NBUFDIM,BUFIF8)
C  SUBROUTINE MDUALS  (NERR)
C  SUBROUTINE MDUALL  (NERR)
C  SUBROUTINE MDUALBL (MGLV,NBLK,JDMG,KDMG,DUKMG,NBUFDIM,BUFIF8)
C  SUBROUTINE MDUALVL (MGLV,NBLK,JDMG,KDMG,DUKMG,NBUFDIM,BUFIF8)
C  SUBROUTINE MDUALC  ()

C  CODE HISTORY:

C  JOHN WHEELER    7/26/00     ALPHA CODE FROM MDUAL.F

C*********************************************************************
      SUBROUTINE MDUAL (NERR)
C*********************************************************************

C  Executive routine for updating 3D primary variables on the interface

C  NERR = Error number steped by 1 on error (input & output, INTEGER)

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'

      INCLUDE 'sblkc.h'
      INCLUDE 'mulgrdc.h'

      INTEGER IA(4),NBEM($MXMOD)
      DATA IA/4*0/,NBEM/$MXMOD*0/

      EXTERNAL MDUALB,MDUALV

      IF (NFACES.EQ.0) RETURN
      CALL TIMON(12)

      IF (MONCE(1)) THEN
         MONCE(1)=.FALSE.
         IA(1)=3
         IA(3)=N_BUFDIM
         IA(4)=N_BUFIF
         NBEM($TMODEL)=1
         NBEM($HMODEL)=2
         NBEM($IMODEL)=3
         NBEM($XMODEL)=1
      ENDIF

C  PUT B BLOCK VARIABLE CHANGES IN INTERFACE BUFFERS

      DO 15 I=1,$MXMOD
      IF (MODELON(I)) THEN
         IA(2)=N_DUNKV(I)
         MODACT=I
         CALL CALLWORK(MDUALB,IA)
      ENDIF
   15 CONTINUE
      MODACT=0

C  PASS BUFFERS FROM B BLOCK PROCESSOR TO A BLOCK PROCESSOR

$MANY      CALL PIFBUF8(NBEM,NERR)

C  PUT VARIABLE CHANGES IN DUNK ON A PROCESSOR (RED OR BLACK ONLY)

      DO 16 I=1,$MXMOD
      IF (MODELON(I)) THEN
         IA(2)=N_DUNKV(I)
         MODACT=I
         CALL CALLWORK(MDUALV,IA)
      ENDIF
   16 CONTINUE
      MODACT=0

      CALL TIMOFF(12)
      END
C*********************************************************************
      SUBROUTINE MDUALB (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                   KL2,KEYOUT,NBLK,DUNK,NBUFDIM,BUFIF8)
C*********************************************************************

C  PUT 3D B BLOCK VARIABLE CHANGES IN INTERFACE BUFFERS

C  DUNK(I,J,K,) = VARIABLE CHANGES (INPUT, REAL*8)

C  NBUFDIM = FIRST DIMENSION OF BUFIF8(,) (INPUT, INTEGER)

C  BUFIF8(,) = INTERFACE BUFFER (OUTPUT, REAL*8)

C*********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'sblkc.h'

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8  DUNK(IDIM,JDIM,KDIM,$MXNUMEQ), BUFIF8(NBUFDIM,*),DUM

      IF (NIEBS(NBLK).EQ.0) RETURN

      NES=NUMEQS(NBLK)
      NMS=MODBLK(NBLK)

      DO 1 M=1,NPAI(NBLK)
      II1=IESNDI(M,NBLK)
      II2=II1+NESNDI(M,NBLK)-1
      NBT=NBSRI(M,NBLK)
      NMT=MODBLK(NBT)
      IF (NMS.EQ.NMT) THEN

C  SAME MODEL IN THE TWO BLOCKS

         DO 2 II=II1,II2
         K=KFESR(II)
         IA=IJKS(1,K)
         JA=IJKS(2,K)
         KA=IJKS(3,K)
         DO 2 NVS=1,NES
    2    BUFIF8(II,NVS)=DUNK(IA,JA,KA,NVS)

      ELSE

C  DIFFERENT MODELS IN THE TWO BLOCKS

         NET=NUMEQS(NBT)
         DO 3 II=II1,II2
         K=KFESR(II)
         IA=IJKS(1,K)
         JA=IJKS(2,K)
         KA=IJKS(3,K)
         DO 3 NVT=1,NET
         DUM=0.D0
         DO 4 NVS=1,NES
    4    DUM=DUM+UNKMAP(NVS,NVT,NMS,NMT)*DUNK(IA,JA,KA,NVS)
         BUFIF8(II,NVT)=DUM
    3    CONTINUE

      ENDIF
    1 CONTINUE

      END
C*********************************************************************
      SUBROUTINE MDUALV (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                   KL2,KEYOUT,NBLK,DUNK,NBUFDIM,BUFIF8)
C*********************************************************************

C  PUT 3D VARIABLE CHANGES IN DUNK ON A PROCESSOR (RED, BLACK, OR ALL)

C  DUNK(I,J,K,) = VARIABLE CHANGES (OUTPUT, REAL*8)

C  NBUFDIM = FIRST DIMENSION OF BUFIF8(,) (INPUT, INTEGER)

C  BUFIF8(,) = INTERFACE BUFFER (OUTPUT, REAL*8)

C  NOTE:
C     KRB  = RED/BLACK UPDATE KEY IN /mulgrdc/
C          = 0 ==> UPDATE INTERFACE ELEMENTS WITH GLOBAL J+K EVEN
C          = 1 ==> UPDATE INTERFACE ELEMENTS WITH GLOBAL J+K ODD
C          = 2 ==> UPDATE ALL INTERFACE ELEMENTS

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'mulgrdc.h'

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8  DUNK(IDIM,JDIM,KDIM,$MXNUMEQ),A($MXNUMEQ,$MXNUMEQ+1),B($MXNUMEQ),
     & DET,BUFIF8(NBUFDIM,*),BB

      IF (NIEBS(NBLK).EQ.0) RETURN

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)
      JRBO=JOFF+KOFF
      NET=NUMEQS(NBLK)
      NETP=NET+1
      NMT=MODBLK(NBLK)

C  LOOP OVER A BLOCK ELEMENTS
C  RED-BLACK ORDERING OF THE UPDATES KEYED ON KRB

      K1=IIEBS(NBLK)
      K2=K1+NIEBS(NBLK)-1
      DO 1 K=K1,K2
      JA=IJKS(2,K)
      KA=IJKS(3,K)

      IF (MOD(JA+KA+JRBO,2).EQ.KRB) GO TO 1

      IA=IJKS(1,K)
      J1=ICGES(K)
      J2=J1+NCGES(K)-1

C  LOOP OVER B BLOCK ELEMENTS BUILDING NET x NET LINEAR SYSTEM

      DO 2 IE=1,NET
      DO 2 IV=1,NETP
    2 A(IE,IV)=0.D0

      DO 6 J=J1,J2
      L=LIBUF(J)

      DO 4 IE=1,NET
      DO 4 IV=1,NET
      BB=COFINF(J,IE,IV)
      A(IE,IV)=A(IE,IV)+BB
    4 A(IE,NETP)=A(IE,NETP)+BB*BUFIF8(L,IV)

    6 CONTINUE

C  TEST AND CORRECT FOR NO COUPLING

      DO 7 IE=1,NET
      DO 8 IV=1,NET
      IF (A(IE,IV).NE.0.D0) GO TO 7
    8 CONTINUE
      GO TO 5
    7 CONTINUE
      GO TO 9

    5 DO 46 J=J1,J2
      L=LIBUF(J)
      DO 44 IE=1,NET
      BB=.0001D0*TFINS(J)
      A(IE,IE)=A(IE,IE)+BB
   44 A(IE,NETP)=A(IE,NETP)+BB*BUFIF8(L,IE)
   46 CONTINUE

    9 CONTINUE

C  SOLVE LINEAR SYSTEM AND PUT RESULT IN DUNK()

      CALL LINSOV (NET,A,B,DET,$MXNUMEQ)

      GO TO (11,12,13,14,15,16),KDIRS(J1)

   11 IF (DET.EQ.0.D0) THEN
         DO 21 IV=1,NET
   21    DUNK(IA+1,JA,KA,IV)=0.D0
      ELSE
         DO 31 IV=1,NET
   31    DUNK(IA+1,JA,KA,IV)=B(IV)
      ENDIF
      GO TO 1

   12 IF (DET.EQ.0.D0) THEN
         DO 22 IV=1,NET
   22    DUNK(IA,JA+1,KA,IV)=0.D0
      ELSE
         DO 32 IV=1,NET
   32    DUNK(IA,JA+1,KA,IV)=B(IV)
      ENDIF
      GO TO 1

   13 IF (DET.EQ.0.D0) THEN
         DO 23 IV=1,NET
   23    DUNK(IA,JA,KA+1,IV)=0.D0
      ELSE
         DO 33 IV=1,NET
   33    DUNK(IA,JA,KA+1,IV)=B(IV)
      ENDIF
      GO TO 1

   14 IF (DET.EQ.0.D0) THEN
         DO 24 IV=1,NET
   24    DUNK(IA-1,JA,KA,IV)=0.D0
      ELSE
         DO 34 IV=1,NET
   34    DUNK(IA-1,JA,KA,IV)=B(IV)
      ENDIF
      GO TO 1

   15 IF (DET.EQ.0.D0) THEN
         DO 25 IV=1,NET
   25    DUNK(IA,JA-1,KA,IV)=0.D0
      ELSE
         DO 35 IV=1,NET
   35    DUNK(IA,JA-1,KA,IV)=B(IV)
      ENDIF
      GO TO 1

   16 IF (DET.EQ.0.D0) THEN
         DO 26 IV=1,NET
   26    DUNK(IA,JA,KA-1,IV)=0.D0
      ELSE
         DO 36 IV=1,NET
   36    DUNK(IA,JA,KA-1,IV)=B(IV)
      ENDIF

    1 CONTINUE

      END
C*********************************************************************
      SUBROUTINE MDUALS (NERR)
C*********************************************************************

C  SET UP COMMUNICATION BETWEEN FAULT BLOCKS FOR MULTIGRID LEVELS

C  NERR = Error number steped by 1 on error (input & output, INTEGER)

C  NOTE:  BOTH SEND AND RECEIVE DATA ARE BUILT FROM THE 3D MESSAGE DATA

C         COMMUNICATION LISTS FOR THE DIRECT SOLUTION WILL BE BUILT WITH
C         THE MULTIGRID LEVELS

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'mulgrdc.h'

      DIMENSION IJKTMG(2,$DMXFELE)

CZZZZZ
C     WRITE(NFOUT,*)' CHK 1, NUMBLK,MGLEV,NPAI(N)=',NUMBLK,MGLEV,
C    & (NPAI(N),N=1,NUMBLK)
C     WRITE(*,*)' CHK 1'

      NMGLP=MGLEV+1

C  CLEAR COUNTERS

      NFKIMG=1
      NFJIMG=1
      DO 51 N=1,NUMBLK
      DO 51 L=1,NMGLP
      NIEBSMG(N,L)=0
      NJMAPC(L,N)=0
      DO 51 M=1,NPAI(N)
      NESNDIMG(M,N,L)=0
   51 NERECIMG(M,N,L)=0

C  BUILD LISTS FOR MULTIGRID LEVELS (RECEIVE BUFFER SEQUENCE)

      MAPFC=1
      DO 1 L=1,NMGLP
      LB=0

      DO 2 NB=1,NUMBLK
      IF (NIEBS(NB).EQ.0) GO TO 2

      DO 3 M=1,NPAI(NB)
      NA=NBSRI(M,NB)
CZZZ
C     WRITE(NFOUT,90) NA,NB,M,L
C  90 FORMAT(' NA,NB,M,L=',4I6)

      IF (L.EQ.1) THEN

C  3D SOURCE FOR 1ST MULTIGRID LEVEL (RECEIVE BUFFER SEQUENCE)

         CALL BLKOFF(NB,IOFFFB,JOFFFB,KOFFFB,MERR)
         JOFFCB=JOFFMG(L,NB)
         KOFFCB=KOFFMG(L,NB)
         K1F=IIEBS(NA)
         K2F=K1F+NIEBS(NA)-1
         IIEBSMG(NA,L)=NFKIMG

         DO 4 KF=K1F,K2F
         IFLB=IJKS(1,KF)
         JFLB=IJKS(2,KF)
         KFLB=IJKS(3,KF)
         JCLB=(JFLB+JOFFFB+1)/2-JOFFCB
         KCLB=(KFLB+KOFFFB+1)/2-KOFFCB
CZZZ
C     WRITE(NFOUT,91) KF,IFLB,JFLB,KFLB,JCLB,KCLB
C  91 FORMAT(' KF,IFLB,JFLB,KFLB,JCLB,KCLB =',6I6)

         KC1=IIEBSMG(NA,L)
         KC2=KC1+NIEBSMG(NA,L)-1
         DO 5 K=KC1,KC2
         KC=K
         IF (JCLB.EQ.IJKSMG(1,K).AND.KCLB.EQ.IJKSMG(2,K)) GO TO 8
    5    CONTINUE

         IF (NFKIMG.GT.$DMXFELE) THEN
            III=$DMXGEI
            WRITE (NFOUT,70) III
   70       FORMAT (/' ERROR # 464; DIMENSION TOO SMALL, $DMXGEI =',I6)
            NERR=NERR+1
            RETURN
         ENDIF

         KC=NFKIMG
         NFKIMG=NFKIMG+1
         NIEBSMG(NA,L)=NIEBSMG(NA,L)+1
         IJKSMG(1,KC)=JCLB
         IJKSMG(2,KC)=KCLB
         ICGESMG(KC,L)=KC
         NCGESMG(KC,L)=0

    8    J1F=ICGES(KF)
         J2F=J1F+NCGES(KF)-1
CZZZ
C     WRITE(NFOUT,92) KF,JFLB,KFLB,J1F,J2F
C  92 FORMAT(' KC,JCLB,KCLB,J1F,J2F =',5I6)

         DO 6 JF=J1F,J2F
         JFGA=IJKT(2,JF)
         KFGA=IJKT(3,JF)
         JCGA=(JFGA+1)/2
         KCGA=(KFGA+1)/2

         J1C=ICGESMG(KC,L)
         J2C=J1C+NCGESMG(KC,L)-1
         DO 7 J=J1C,J2C
         JC=J
         IF (JCGA.EQ.IJKTMG(1,J).AND.KCGA.EQ.IJKTMG(2,J)) GO TO 9
    7    CONTINUE

         IF (NFJIMG.GT.$DMXFELE) THEN
            III=$DMXFELE
            WRITE (NFOUT,69) III
   69       FORMAT (/' ERROR # 463; DIMENSION TOO SMALL, $DMXFELE =',I6)
            NERR=NERR+1
            RETURN
         ENDIF

         JC=NFJIMG
         NFJIMG=NFJIMG+1
         IJKTMG(1,JC)=JCGA
         IJKTMG(2,JC)=KCGA
         LB=LB+1
         LIBUFMG(JC,L)=LB
         KDIRSMG(JC)=KDIRS(JF)
         JBLOCKMG(JC)=NB
         NCGESMG(KC,L)=NCGESMG(KC,L)+1
         TFINSMG(JC)=0.D0
         IF (NJMAPC(L,NA).EQ.0) IJMAPC(L,NA)=MAPFC
         IF (NERECIMG(M,NA,L).EQ.0) IERECIMG(M,NA,L)=LB
         NERECIMG(M,NA,L)=NERECIMG(M,NA,L)+1

    9    TFINSMG(JC)=TFINSMG(JC)+TFINS(JF)
         NJMAPC(L,NA)=NJMAPC(L,NA)+1
         JMAPC(1,MAPFC)=JF
         JMAPC(2,MAPFC)=JC
         MAPFC=MAPFC+1
CZZZ
C     WRITE(NFOUT,96) KF,KC,JF,JC,JFGA,KFGA,JCGA,KCGA
C  96 FORMAT(' KF,KC,JF,JC,JFGA,KFGA,JCGA,KCGA =',8I5)

    6    CONTINUE
    4    CONTINUE

      ELSE

C  2D SOURCE FOR OTHER MULTIGRID LEVEL (RECEIVE BUFFER SEQUENCE)

         JOFFFB=JOFFMG(L-1,NB)
         KOFFFB=KOFFMG(L-1,NB)
         JOFFCB=JOFFMG(L,NB)
         KOFFCB=KOFFMG(L,NB)
         K1F=IIEBSMG(NA,L-1)
         K2F=K1F+NIEBSMG(NA,L-1)-1
         IIEBSMG(NA,L)=NFKIMG

         DO 14 KF=K1F,K2F

         JFLB=IJKSMG(1,KF)
         KFLB=IJKSMG(2,KF)
         JCLB=(JFLB+JOFFFB+1)/2-JOFFCB
         KCLB=(KFLB+KOFFFB+1)/2-KOFFCB
CZZZ
C     WRITE(NFOUT,97) KF,JFLB,KFLB,JCLB,KCLB
C  97 FORMAT(' KF,JFLB,KFLB,JCLB,KCLB =',6I6)

         KC1=IIEBSMG(NA,L)
         KC2=KC1+NIEBSMG(NA,L)-1
         DO 15 K=KC1,KC2
         KC=K
         IF (JCLB.EQ.IJKSMG(1,K).AND.KCLB.EQ.IJKSMG(2,K)) GO TO 18
   15    CONTINUE

         IF (NFKIMG.GT.$DMXFELE) THEN
            III=$DMXGEI
            WRITE (NFOUT,70) III
            NERR=NERR+1
            RETURN
         ENDIF

         KC=NFKIMG
         NFKIMG=NFKIMG+1
         NIEBSMG(NA,L)=NIEBSMG(NA,L)+1
         IJKSMG(1,KC)=JCLB
         IJKSMG(2,KC)=KCLB
         ICGESMG(KC,L)=KC
         NCGESMG(KC,L)=0

   18    J1F=ICGESMG(KF,L-1)
         J2F=J1F+NCGESMG(KF,L-1)-1
CZZZ
C     WRITE(NFOUT,92) KF,JFLB,KFLB,J1F,J2F

         DO 16 JF=J1F,J2F
         JFGA=IJKTMG(1,JF)
         KFGA=IJKTMG(2,JF)
         JCGA=(JFGA+1)/2
         KCGA=(KFGA+1)/2

         J1C=ICGESMG(KC,L)
         J2C=J1C+NCGESMG(KC,L)-1
         DO 17 J=J1C,J2C
         JC=J
         IF (JCGA.EQ.IJKTMG(1,J).AND.KCGA.EQ.IJKTMG(2,J)) GO TO 19
   17    CONTINUE

         IF (NFJIMG.GT.$DMXFELE) THEN
            III=$DMXFELE
            WRITE (NFOUT,69) III
            NERR=NERR+1
            RETURN
         ENDIF

         JC=NFJIMG
         NFJIMG=NFJIMG+1
         IJKTMG(1,JC)=JCGA
         IJKTMG(2,JC)=KCGA
         LB=LB+1
         LIBUFMG(JC,L)=LB
         KDIRSMG(JC)=KDIRS(JF)
         JBLOCKMG(JC)=NB
         NCGESMG(KC,L)=NCGESMG(KC,L)+1
         TFINSMG(JC)=0.D0
         IF (NJMAPC(L,NA).EQ.0) IJMAPC(L,NA)=MAPFC
         IF (NERECIMG(M,NA,L).EQ.0) IERECIMG(M,NA,L)=LB
         NERECIMG(M,NA,L)=NERECIMG(M,NA,L)+1

   19    TFINSMG(JC)=TFINSMG(JC)+TFINSMG(JF)
         NJMAPC(L,NA)=NJMAPC(L,NA)+1
         JMAPC(1,MAPFC)=JF
         JMAPC(2,MAPFC)=JC
         MAPFC=MAPFC+1
CZZZ
C     WRITE(NFOUT,96) KF,KC,JF,JC,JFGA,KFGA,JCGA,KCGA

   16    CONTINUE
   14    CONTINUE

      ENDIF

    3 CONTINUE
    2 CONTINUE
    1 CONTINUE

C  BUILD LISTS FOR MULTIGRID LEVELS (SEND BUFFER SEQUENCE)

      DO 21 L=1,NMGLP
      LB=1

      DO 22 NB=1,NUMBLK
      IF (NIEBS(NB).EQ.0) GO TO 22

      DO 23 M=1,NPAI(NB)
      NA=NBSRI(M,NB)

      IF (L.EQ.1) THEN

C  3D SOURCE FOR 1ST MULTIGRID LEVEL (SEND BUFFER SEQUENCE)

         CALL BLKOFF(NB,IOFFFB,JOFFFB,KOFFFB,MERR)
         JOFFCB=JOFFMG(L,NB)
         KOFFCB=KOFFMG(L,NB)
         II1=IESNDI(M,NB)
         II2=II1+NESNDI(M,NB)-1
CZZZZZZZ
C      WRITE(NFOUT,81) NB,NA,M,L,II1,II2
C  81  FORMAT(' NB,NA,M,L,II1,II2 =',8I6)

         IESNDIMG(M,NB,L)=LB
         DO 24 II=II1,II2
         KF=KFESR(II)
         JFLB=IJKS(2,KF)
         KFLB=IJKS(3,KF)
         JCLB=(JFLB+JOFFFB+1)/2-JOFFCB
         KCLB=(KFLB+KOFFFB+1)/2-KOFFCB

         LC1=IESNDIMG(M,NB,L)
         LC2=LC1+NESNDIMG(M,NB,L)-1
CZZZZZZZ
C      WRITE(NFOUT,86) KF,JFLB,KFLB,JCLB,KCLB,LC1,LC2
C  86  FORMAT(' KF,JFLB,KFLB,JCLB,KCLB,LC1,LC2 =',8I6)

         DO 25 LC=LC1,LC2
         KC=KFESRMG(LC,L)
         IF (JCLB.EQ.IJKSMG(1,KC).AND.KCLB.EQ.IJKSMG(2,KC)) GO TO 24
   25    CONTINUE

         NESNDIMG(M,NB,L)=NESNDIMG(M,NB,L)+1
C        KC1=IIEBSMG(NA,L)
C        KC2=KC1+NIEBSMG(NA,L)-1
         KC1=IIEBSMG(NB,L)
         KC2=KC1+NIEBSMG(NB,L)-1
         DO 26 KC=KC1,KC2

         IF (JCLB.EQ.IJKSMG(1,KC).AND.KCLB.EQ.IJKSMG(2,KC)) THEN
            KFESRMG(LB,L)=KC
CZZZZ
C       WRITE(NFOUT,80) LB,L,KC
C  80   FORMAT('LB,L,KC =',5I6)

            LB=LB+1
            GO TO 24
         ENDIF
   26    CONTINUE

   24    CONTINUE

      ELSE

C  2D SOURCE FOR OTHER MULTIGRID LEVELS (SEND BUFFER SEQUENCE)

         JOFFFB=JOFFMG(L-1,NB)
         KOFFFB=KOFFMG(L-1,NB)
         JOFFCB=JOFFMG(L,NB)
         KOFFCB=KOFFMG(L,NB)
         II1=IESNDIMG(M,NB,L-1)
         II2=II1+NESNDIMG(M,NB,L-1)-1
         IESNDIMG(M,NB,L)=LB
         DO 27 II=II1,II2
         KF=KFESRMG(II,L-1)
         JFLB=IJKSMG(1,KF)
         KFLB=IJKSMG(2,KF)
         JCLB=(JFLB+JOFFFB+1)/2-JOFFCB
         KCLB=(KFLB+KOFFFB+1)/2-KOFFCB

         LC1=IESNDIMG(M,NB,L)
         LC2=LC1+NESNDIMG(M,NB,L)-1
         DO 28 LC=LC1,LC2
         KC=KFESRMG(LC,L)
         IF (JCLB.EQ.IJKSMG(1,KC).AND.KCLB.EQ.IJKSMG(2,KC)) GO TO 27
   28    CONTINUE

   43    NESNDIMG(M,NB,L)=NESNDIMG(M,NB,L)+1
C        KC1=IIEBSMG(NA,L)
C        KC2=KC1+NIEBSMG(NA,L)-1
         KC1=IIEBSMG(NB,L)
         KC2=KC1+NIEBSMG(NB,L)-1
         DO 29 KC=KC1,KC2
         IF (JCLB.EQ.IJKSMG(1,KC).AND.KCLB.EQ.IJKSMG(2,KC)) THEN
            KFESRMG(LB,L)=KC
            LB=LB+1
            GO TO 27
         ENDIF
   29    CONTINUE

   27    CONTINUE

      ENDIF

   23 CONTINUE
   22 CONTINUE
   21 CONTINUE

C  DEBUG OUTPUT

      IF (.NOT.BUGKEY(7)) RETURN

      WRITE(NFOUT,103)
  103 FORMAT(/' MULTIGRID SEND BUFFER DATA:'/)

      DO 100 L=1,NMGLP
      DO 100 NB=1,NUMBLK
      IF (NIEBS(NB).EQ.0) GO TO 100
      DO 101 M=1,NPAI(NB)
      NA=NBSRI(M,NB)
      II1=IESNDIMG(M,NB,L)
      II2=II1+NESNDIMG(M,NB,L)-1
      DO 101 II=II1,II2
      K=KFESRMG(II,L)
      JBL=IJKSMG(1,K)
      KBL=IJKSMG(2,K)
  101 WRITE (NFOUT,102) L,NB,NA,M,II,JBL,KBL
  102 FORMAT(' MGL,NB,NA,MSG,BUF,JBL,KBL',8I4)
  100 CONTINUE

      WRITE(NFOUT,104)
  104 FORMAT(/' MULTIGRID RECEIVE BUFFER DATA:'/)

      DO 110 L=1,NMGLP
      DO 110 NA=1,NUMBLK
      IF (NIEBS(NA).EQ.0) GO TO 110
      DO 111 M=1,NPAI(NA)
      NB=NBSRI(M,NA)
      K1=IIEBSMG(NA,L)
      K2=K1+NIEBSMG(NA,L)-1
      DO 111 K=K1,K2
      JAL=IJKSMG(1,K)
      KAL=IJKSMG(2,K)
      J1=ICGESMG(K,L)
      J2=J1+NCGESMG(K,L)-1
      WRITE (NFOUT,112) L,NB,NA,M,JAL,KAL
  112 FORMAT(' MGL,NB,NA,MSG,KDIR,JAL,KAL',8I4)
      DO 111 J=J1,J2
      LB=LIBUFMG(J,L)
      JAG=IJKTMG(1,J)
      KAG=IJKTMG(2,J)
  111 WRITE (NFOUT,114) LB,JAG,KAG,KDIRSMG(J),TFINSMG(J)
  114 FORMAT('   BUF,JAG,KAG,KDIR,TFIN',4I4,G12.4)
  110 CONTINUE

      END
C*********************************************************************
      SUBROUTINE MDUALL (NERR)
C*********************************************************************

C  Executive routine for updating 2D primary variables on the interface

C  NERR = Error number steped by 1 on error (input & output, INTEGER)

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'

      INCLUDE 'sblkc.h'
      INCLUDE 'mulgrdc.h'

      INTEGER NBEM($MXMOD)
      DATA NBEM/$MXMOD*0/

      EXTERNAL MDUALBL,MDUALVL

      IF (NFACES.EQ.0) RETURN
      CALL TIMON(12)

C  PUT B BLOCK VARIABLE CHANGES IN INTERFACE BUFFERS

      DO 15 I=1,$MXMOD
      IF (MODELON(I)) THEN
         MODACT=I
         CALL MGWORK4(MDUALBL,LEVEL,N_BUFDIM,N_BUFIF)
      ENDIF
   15 CONTINUE
      MODACT=0

C  PASS BUFFERS FROM B BLOCK PROCESSOR TO A BLOCK PROCESSOR

$MANY      CALL PIFBUF8(NBEM,NERR)       CZZZZZZZ

C  PUT VARIABLE CHANGES IN DUNK ON A PROCESSOR (RED OR BLACK ONLY)

      DO 16 I=1,$MXMOD
      IF (MODELON(I)) THEN
         MODACT=I
         CALL MGWORK4(MDUALVL,LEVEL,N_BUFDIM,N_BUFIF)
      ENDIF
   16 CONTINUE
      MODACT=0

      CALL TIMOFF(12)
      END
C*********************************************************************
      SUBROUTINE MDUALBL (MGLV,NBLK,JDMG,KDMG,DUKMG,NBUFDIM,BUFIF8)
C*********************************************************************

C  PUT 2D B BLOCK VARIABLE CHANGES IN INTERFACE BUFFERS
C  THIS IS A MGWORKD ROUTINE.

C  MGLV = CURRENT MULTIGRID LEVEL

C  NBLK = CURRENT FAULT-BLOCK NUMBER

C  DUKMG(J,K,v) = CHANGE IN VARIABLE v

C  NBUFDIM = FIRST DIMENSION OF BUFIF8(,) (INPUT, INTEGER)

C  BUFIF8(,) = INTERFACE BUFFER (OUTPUT, REAL*8)

C*********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'mulgrdc.h'

      REAL*8  DUKMG(JDMG,KDMG,*),BUFIF8(NBUFDIM,*)

      IF (NIEBS(NBLK).EQ.0) RETURN

      NES=NUMEQS(NBLK)
      NMS=MODBLK(NBLK)

      DO 1 M=1,NPAI(NBLK)
      II1=IESNDIMG(M,NBLK,MGLV)
      II2=II1+NESNDIMG(M,NBLK,MGLV)-1
      NBT=NBSRI(M,NBLK)
      NMT=MODBLK(NBT)
      IF (NMS.EQ.NMT) THEN

C  SAME MODEL IN THE TWO BLOCKS

         DO 2 II=II1,II2
         K=KFESRMG(II,MGLV)
         JA=IJKSMG(1,K)
         KA=IJKSMG(2,K)
         DO 2 NVS=1,NES
    2    BUFIF8(II,NVS)=DUKMG(JA,KA,NVS)

      ELSE

C  DIFFERENT MODELS IN THE TWO BLOCKS

         NET=NUMEQS(NBT)
         DO 3 II=II1,II2
         K=KFESR(II)
         JA=IJKSMG(1,K)
         KA=IJKSMG(2,K)
         DO 3 NVT=1,NET
         DUM=0.D0
         DO 4 NVS=1,NES
    4    DUM=DUM+UNKMAP(NVS,NVT,NMS,NMT)*DUKMG(JA,KA,NVS)
         BUFIF8(II,NVT)=DUM
    3    CONTINUE

      ENDIF

    1 CONTINUE   

      END
C*********************************************************************
      SUBROUTINE MDUALVL (MGLV,NBLK,JDMG,KDMG,DUKMG,NBUFDIM,BUFIF8)
C*********************************************************************

C  PUT 2D VARIABLE CHANGES IN DUNK ON A PROCESSOR (RED, BLACK, OR ALL)
C  THIS IS A MGWORKD ROUTINE.

C  MGLV = CURRENT MULTIGRID LEVEL

C  NBLK = CURRENT FAULT-BLOCK NUMBER

C  JDMG = FIRST 2 DIMENSIONS OF DUKMG
C  KDMG 

C  DUKMG(J,K,v) = CHANGE IN VARIABLE v

C  NBUFDIM = FIRST DIMENSION OF BUFIF8(,) (INPUT, INTEGER)

C  BUFIF8(,) = INTERFACE BUFFER (OUTPUT, REAL*8)

C  NOTE:
C     KRB  = RED/BLACK UPDATE KEY IN /mulgrdc/
C          = 0 ==> UPDATE INTERFACE ELEMENTS WITH GLOBAL J+K EVEN
C          = 1 ==> UPDATE INTERFACE ELEMENTS WITH GLOBAL J+K ODD
C          = 2 ==> UPDATE ALL INTERFACE ELEMENTS

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'mulgrdc.h'

      REAL*8  DUKMG(JDMG,KDMG,$MXNUMEQ),A($MXNUMEQ,$MXNUMEQ+1),B($MXNUMEQ),
     & DET,BUFIF8(NBUFDIM,*),BB

      IF (NIEBS(NBLK).EQ.0) RETURN
      JRBO=JOFFMG(MGLV,NBLK)+KOFFMG(MGLV,NBLK)
      NET=NUMEQS(NBLK)
      NETP=NET+1
      NMT=MODBLK(NBLK)

C  LOOP OVER A BLOCK ELEMENTS
C  RED-BLACK ORDERING OF THE UPDATES KEYED ON KRB

      K1=IIEBSMG(NBLK,MGLV)
      K2=K1+NIEBSMG(NBLK,MGLV)-1
      DO 1 K=K1,K2
      JA=IJKSMG(1,K)
      KA=IJKSMG(2,K)

      IF (MOD(JA+KA+JRBO,2).EQ.KRB) GO TO 1

      J1=ICGESMG(K,MGLV)
      J2=J1+NCGESMG(K,MGLV)-1

C  LOOP OVER B BLOCK ELEMENTS BUILDING NET x NET LINEAR SYSTEM

      DO 2 IE=1,NET
      DO 2 IV=1,NETP
    2 A(IE,IV)=0.D0

      DO 6 J=J1,J2
      L=LIBUFMG(J,MGLV)

      DO 4 IE=1,NET
      DO 4 IV=1,NET
      BB=COFINFMG(J,IE,IV)
      A(IE,IV)=A(IE,IV)+BB
    4 A(IE,NETP)=A(IE,NETP)+BB*BUFIF8(L,IV)

    6 CONTINUE

C  TEST AND CORRECT FOR NO COUPLING

      DO 7 IE=1,NET
      DO 8 IV=1,NET
      IF (A(IE,IV).NE.0.D0) GO TO 7
    8 CONTINUE
      GO TO 5
    7 CONTINUE
      GO TO 9

    5 DO 46 J=J1,J2
      L=LIBUFMG(J,MGLV)
      DO 44 IE=1,NET
      BB=.0001D0*TFINSMG(J)
      A(IE,IE)=A(IE,IE)+BB
   44 A(IE,NETP)=A(IE,NETP)+BB*BUFIF8(L,IE)
   46 CONTINUE

    9 CONTINUE

C  SOLVE LINEAR SYSTEM AND PUT RESULT IN DUKMG()

      CALL LINSOV (NET,A,B,DET,$MXNUMEQ)

      GO TO (12,12,13,15,15,16),KDIRSMG(J1)

   12 IF (DET.EQ.0.D0) THEN
         DO 22 IV=1,NET
   22    DUKMG(JA+1,KA,IV)=0.D0
      ELSE
         DO 32 IV=1,NET
   32    DUKMG(JA+1,KA,IV)=B(IV)
      ENDIF
      GO TO 1

   13 IF (DET.EQ.0.D0) THEN
         DO 23 IV=1,NET
   23    DUKMG(JA,KA+1,IV)=0.D0
      ELSE
         DO 33 IV=1,NET
   33    DUKMG(JA,KA+1,IV)=B(IV)
      ENDIF
      GO TO 1

   15 IF (DET.EQ.0.D0) THEN
         DO 25 IV=1,NET
   25    DUKMG(JA-1,KA,IV)=0.D0
      ELSE
         DO 35 IV=1,NET
   35    DUKMG(JA-1,KA,IV)=B(IV)
      ENDIF
      GO TO 1

   16 IF (DET.EQ.0.D0) THEN
         DO 26 IV=1,NET
   26    DUKMG(JA,KA-1,IV)=0.D0
      ELSE
         DO 36 IV=1,NET
   36    DUKMG(JA,KA-1,IV)=B(IV)
      ENDIF

    1 CONTINUE

      END
C*********************************************************************
      SUBROUTINE MDUALC ()
C*********************************************************************

C  RESET 2D INTERFACE COEFFICIENTS ONCE PER NEWTONIAN ITERATION

C*********************************************************************
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'mulgrdc.h'

C  CLEAR MULTIGRID COEFFICIENTS BEFORE SUMMING

      N=NFJIMG-1
      DO 2 J=1,N
      DO 2 IE=1,MXNUMEQS
      DO 2 IV=1,MXNUMEQS
    2 COFINFMG(J,IE,IV)=0.

C  SUM FINE GRID COEFFICIENTS TO OBTAIN COURSE GRID COEFFICIENTS

      DO 3 N=1,NUMBLK
      IF (NIEBS(N).EQ.0) GO TO 3
      NET=NUMEQS(N)

C  LEVEL 1 MULTIGRID COEFFICIENTS FROM 3D COEFFICIENTS

      J1=IJMAPC(1,N)
      J2=J1+NJMAPC(1,N)-1
      DO 4 J=J1,J2
      JF=JMAPC(1,J)
      JC=JMAPC(2,J)
      DO 4 IE=1,NET
      DO 4 IV=1,NET
    4 COFINFMG(JC,IE,IV)=COFINFMG(JC,IE,IV)+COFINF(JF,IE,IV)

C  OTHER LEVEL MULTIGRID COEFFICIENTS FROM 2D COEFFICIENTS

      NMGLP=MGLEV+1
      DO 5 L=2,NMGLP
      J1=IJMAPC(L,N)
      J2=J1+NJMAPC(L,N)-1
      DO 5 J=J1,J2
      JF=JMAPC(1,J)
      JC=JMAPC(2,J)
      DO 5 IE=1,NET
      DO 5 IV=1,NET
    5 COFINFMG(JC,IE,IV)=COFINFMG(JC,IE,IV)+COFINFMG(JF,IE,IV)

    3 CONTINUE

      END
