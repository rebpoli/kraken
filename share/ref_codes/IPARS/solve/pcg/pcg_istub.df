c pcg_istub.f

C  ROUTINES IN THIS MODULE:

c      SUBROUTINE i_ddot (x,y)
c      SUBROUTINE i_dscale (alfa,x,y)
c      SUBROUTINE i_daxpy (alfa,x,y)
c      SUBROUTINE i_dcopy (x,y)
c      SUBROUTINE i_matvec (x,y,a)
c      SUBROUTINE i_msolve (r,z,a)
c      SUBROUTINE i_BJac (r,z,a)
c      SUBROUTINE i_BGS (r,z,a)
c      SUBROUTINE i_BILU (r,z,a)
c      SUBROUTINE i_show (x)
c
c these routines i_* are work routines called by ipars_*
c 
C CODE HISTORY:
c Malgo Peszynska: 4/5-8/98
c
c Joe Eaton    4/1/99  Added BILU preconditioner, block ILU with
c                      blocks being x-direction (columns in IPARS)
c                      Added Bjac prec.  Block Jacobi, column blocks  
c 
C*********************************************************************
      SUBROUTINE i_ddot (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                   KL1,KL2,
     &                   KEYOUT,NBLK,
     &                   x,y)
C*********************************************************************

C*********************************************************************
      implicit none
      integer idim,jdim,kdim,il1,il2,kl1,kl2,nblk,ldim
      include 'pcg.h'
      integer i,j,k

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 X(IDIM,JDIM,KDIM), Y(IDIM,JDIM,KDIM)
c ------------------------	
      real*8 dtemp
c ==================================================================

      dtemp=0.0d0

      DO K=KL1,KL2
         DO J=JL1V(k),JL2V(k)
            DO I=IL1,IL2
               if(keyout(i,j,k).eq.1) then

                  if(debug_flag.eq.1) then
c                     write(*,*) 'IDDOT:',nblk,i,j,k,x(i,j,k),y(i,j,k)
                  endif

                  dtemp=dtemp+x(i,j,k)*y(i,j,k)
               endif
            enddo
         enddo
      ENDDO

      if (debug_flag.eq.1) then
c         write(*,*) 'local value for blk=',nblk,' is', dtemp
      endif
      
      dinrm (NBLK) = dtemp
     
      RETURN
      END

C*********************************************************************
      SUBROUTINE i_daxpy (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                   KL1,KL2,
     &                   KEYOUT,NBLK,
     &                   x,y)
C*********************************************************************

C*********************************************************************
      implicit none
      integer idim,jdim,kdim,il1,il2,kl1,kl2,nblk,ldim
      include 'pcg.h'
      integer i,j,k

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 X(IDIM,JDIM,KDIM), Y(IDIM,JDIM,KDIM)
c ------------------------	
      real*8 ala
c ==================================================================

      

      DO K=KL1,KL2
         DO J=JL1V(k),JL2V(k)
            DO I=IL1,IL2
               if(keyout(i,j,k).eq.1) then
                  ala=y(i,j,k)
                  y(i,j,k)=ala+dconst*x(i,j,k)
               endif
            enddo
         enddo
      ENDDO


      RETURN
      END




C*********************************************************************
      SUBROUTINE i_dscale (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                   KL1,KL2,
     &                   KEYOUT,NBLK,
     &                   x,y)
C*********************************************************************

C*********************************************************************
      implicit none
      integer idim,jdim,kdim,il1,il2,kl1,kl2,nblk,ldim
      include 'pcg.h'
      integer i,j,k

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 X(IDIM,JDIM,KDIM), Y(IDIM,JDIM,KDIM)
c ------------------------	
      real*8 ala
c ==================================================================
c	ipars_dscale(alfa,x,y) realizes x(i)=y(i)+alfa*x(i)

      if(debug_flag.eq.1) then
         write(*,*) 'const is',dconst
      endif

      DO K=KL1,KL2
         DO J=JL1V(k),JL2V(k)
            DO I=IL1,IL2
               if(keyout(i,j,k).eq.1) then
                  ala=x(i,j,k)
                  x(i,j,k)=y(i,j,k)+dconst*x(i,j,k)
               endif
            enddo
         enddo
      ENDDO

      RETURN
      END



C*********************************************************************
      SUBROUTINE i_dcopy (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                   KL1,KL2,
     &                   KEYOUT,NBLK,
     &                   x,y)
C*********************************************************************

C*********************************************************************
      implicit none
      integer idim,jdim,kdim,il1,il2,kl1,kl2,nblk,ldim
      include "pcg.h"
      integer i,j,k

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 X(IDIM,JDIM,KDIM), Y(IDIM,JDIM,KDIM)
c ==================================================================


      DO K=KL1,KL2
         DO J=JL1V(k),JL2V(k)
            DO I=IL1,IL2
               if(keyout(i,j,k).eq.1) then
                  y(i,j,k)=x(i,j,k)
               endif
            enddo
         enddo
      ENDDO


      RETURN
      END


C*********************************************************************
      SUBROUTINE i_matvec (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                   KL1,KL2,
     &                   KEYOUT,NBLK,
     &                   x,y,A)
C*********************************************************************

C*********************************************************************
      implicit none
      integer idim,jdim,kdim,il1,il2,kl1,kl2,nblk,ldim
      include "pcg.h"
      integer i,j,k
	
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*4  A(IDIM,JDIM,KDIM,7)
      REAL*8  X(IDIM,JDIM,KDIM),Y(IDIM,JDIM,KDIM), pom

c ==================================================================

c	write(*,*) 'i_matvec'

      DO K=KL1,KL2
         DO J=JL1V(k),JL2V(k)
            DO I=IL1,IL2

               if(keyout(i,j,k).eq.1) then

                  if(debug_flag.eq.1) then
c	write(*,*) i,j,k,' x=',x(i,j,k),' a=',a(i,j,k,1)
        endif

                  pom=a(i,j,k,1)*x(i,j,k)
		  if(i .gt.1) then
                     if(abs(keyout(i-1,j,k)).eq.1) then
                        pom=pom+a(i,j,k,2)*x(i-1,j,k)
                     endif
		  endif
		  if(i.lt.idim) then
                     if(abs(keyout(i+1,j,k)).eq.1) then
                        pom=pom+a(i,j,k,3)*x(i+1,j,k)
                     endif
		 endif
                 if(j.gt.1) then
                    if(abs(keyout(i,j-1,k)).eq.1) then
                       pom=pom+a(i,j,k,4)*x(i,j-1,k)
                    endif
                 endif
                 if(j.lt.jdim) then
                    if(abs(keyout(i,j+1,k)).eq.1) then
                       pom=pom+a(i,j,k,5)*x(i,j+1,k)
                    endif
                 endif
                 if(k.gt.1) then
                    if(abs(keyout(i,j,k-1)).eq.1) then
                       pom=pom+a(i,j,k,6)*x(i,j,k-1)
                    endif
                 endif
                 if(k.lt.kdim) then
                    if(abs(keyout(i,j,k+1)).eq.1) then
                       pom=pom+a(i,j,k,7)*x(i,j,k+1)
                    endif
                 endif
                 y(i,j,k)=pom

                 if(debug_flag.eq.1) then
c	write(*,*) 'last value computed is',pom
        endif

              endif
            enddo
         enddo
      ENDDO
      
c	write(*,*) 'last value computed is',pom

      RETURN
      END

C*********************************************************************
      SUBROUTINE i_msolve (IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &                   JL1V,JL2V,KL1,KL2,
     &                   KEYOUT,NBLK,
     &                   r,z,A)
C*********************************************************************

C*********************************************************************
      implicit none
      integer idim,jdim,kdim,il1,il2,kl1,kl2,nblk,ldim
      include "pcg.h"
      integer i,j,k

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 r(IDIM,JDIM,KDIM), z(IDIM,JDIM,KDIM)
      REAL*4 A(IDIM,JDIM,KDIM,7)
      real*8 d1mach	
      external d1mach
      intrinsic min, max,abs
c ==================================================================
      real*4 pommin,pommax
      integer ind
      
      ind=0
      pommin=100000.0
      pommax=0.0


      DO K=KL1,KL2
         DO J=JL1V(k),JL2V(k)
            DO I=IL1,IL2
               if(keyout(i,j,k).eq.1) then
			ind =ind +1

		  pommax=max(pommax,abs(a(i,j,k,1)) )
		  pommin=min(pommin,abs(a(i,j,k,1)) )

                  z(i,j,k)=r(i,j,k)/a(i,j,k,1)
                        
                  if (debug_flag.eq.1) then
c         write(*,*) nblk,' r=',r(i,j,k),' a=',a(i,j,k,1),' z=',z(i,j,k)
                endif

               endif
            enddo
         enddo
      ENDDO

c	write(*,*) 'max/min value of array is: ', pommax,pommin,ind

      RETURN
      END

C*********************************************************************
      SUBROUTINE i_BJac (IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &                   JL1V,JL2V,KL1,KL2,
     &                   KEYOUT,NBLK,
     &                   r,z,A)
C*********************************************************************
C   Block Jacobi (tridiagonal) preconditioner for IPARS pcg package.
C*********************************************************************
      implicit none
      integer idim,jdim,kdim,il1,il2,kl1,kl2,nblk,ldim
      include 'pcg.h'
      integer i,j,k

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 r(IDIM,JDIM,KDIM), z(IDIM,JDIM,KDIM)
      REAL*4 A(IDIM,JDIM,KDIM,7)
      Real*8 L($MXRECX),D($MXRECX),U($MXRECX)
      Real*8 Ztmp($MXRECX),Rtmp($MXRECX),Gamma($MXRECX)
c ==================================================================
      integer ind

      DO K=KL1,KL2
         DO J=JL1V(k),JL2V(k)
            ind=0
C Setup and solve tridiagonal system for vertical column block
            DO I=IL1,IL2
               if(keyout(i,j,k).eq.1) then
                 ind =ind +1
                 L(ind)= a(i,j,k,2)
                 D(ind)= a(i,j,k,1)
                 U(ind)= a(i,j,k,3)
                 Rtmp(ind)= r(i,j,k)
               endif
            ENDDO 
            if(ind.gt.0) then
               CALL TRIDAG(L,D,U,Ztmp,Rtmp,Gamma,ind)
               ind=1 
               DO I=IL1,IL2
                  if(keyout(i,j,k).eq.1) then
                     z(i,j,k)=Ztmp(ind)
                     ind=ind+1
                  endif
               ENDDO
            Endif
         ENDDO
      ENDDO

      RETURN
      END

C*********************************************************************
      SUBROUTINE i_BGS (IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &                   JL1V,JL2V,KL1,KL2,
     &                   KEYOUT,NBLK,
     &                   r,z,A)
C*********************************************************************
C   Block SOR preconditioner for IPARS pcg package.

      implicit none
      integer idim,jdim,kdim,il1,il2,kl1,kl2,nblk,ldim
      include 'pcg.h'
      integer i,j,k

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 r(IDIM,JDIM,KDIM), z(IDIM,JDIM,KDIM)
      REAL*4 A(IDIM,JDIM,KDIM,7)
      Real*8 L($MXRECX),D($MXRECX),U($MXRECX)
      Real*8 Ztmp($MXRECX),Rtmp($MXRECX),Gamma($MXRECX)
c ==================================================================
      integer ind,Nswp,Kswp
      Real*8 Omopt,Om
      Parameter (Nswp=6,Omopt=1.3)

      DO K=KL1,KL2
         DO J=JL1V(k),JL2V(k)
            DO I=IL1,IL2
               if(keyout(i,j,k).eq.1) z(i,j,k)=r(i,j,k)/a(i,j,k,1)
            Enddo
         Enddo
      Enddo
              
      DO  kswp=1,Nswp
       OM= 1.d0 + (1.d0 - Omopt)*(kswp-1)/(Nswp -1)
C Forward sweep
      DO K=KL1,KL2
         DO J=JL1V(k),JL2V(k)
            ind=0
C Setup and solve tridiagonal system for vertical column block
C   but add in corrections for off-diagonals to residual.
            DO I=IL1,IL2
               if(keyout(i,j,k).eq.1) then
                 ind =ind +1
                 L(ind)= a(i,j,k,2)
                 D(ind)= a(i,j,k,1)
                 U(ind)= a(i,j,k,3)
                 Rtmp(ind)= OM*r(i,j,k) + (1.-Om)*z(i,j,k)
C       These are the Y connections
                if(keyout(i,j-1,k).eq.1) then
                   Rtmp(ind) =Rtmp(ind) -Om*a(i,j,k,4)*z(i,j-1,k)
                endif
                if(keyout(i,j+1,k).eq.1) then
                   Rtmp(ind) =Rtmp(ind) -Om*a(i,j,k,5)*z(i,j+1,k)
                endif
C       These are the Z connections
                if(keyout(i,j,k-1).eq.1) then
                   Rtmp(ind) =Rtmp(ind) -Om*a(i,j,k,6)*z(i,j,k-1)
                endif
                if(keyout(i,j,k+1).eq.1) then
                   Rtmp(ind) =Rtmp(ind) -Om*a(i,j,k,7)*z(i,j,k+1)
                endif
               endif
            ENDDO 
            if(ind.gt.0) then
               CALL TRIDAG(L,D,U,Ztmp,Rtmp,Gamma,ind)
               ind=1 
               DO I=IL1,IL2
                  if(keyout(i,j,k).eq.1) then
                     z(i,j,k)=Ztmp(ind)
                     ind=ind+1
                  endif
               ENDDO
            Endif
         ENDDO
      ENDDO
  
      Enddo

C Backward Sweep
C      DO K=KL2,KL2,-1
C         DO J=JL2V(k),JL1V(k),-1
C            DO I=IL1,IL2
C               if(keyout(i,j,k).eq.1) then
C                 if(keyout(i,j+1,k).eq.1) then
C                   z(i,j,k)=z(i,j,k) -a(i,j,k,5)*z(i,j+1,k)
C                 endif
C                 if(keyout(i,j,k+1).eq.1) then
C                   z(i,j,k)=z(i,j,k) -a(i,j,k,7)*z(i,j,k+1)
C                 endif
C               Endif
C            Enddo
C         ENDDo
C      ENDDO

      RETURN
      END

C*********************************************************************
      SUBROUTINE i_BILU (IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &                   JL1V,JL2V,KL1,KL2,
     &                   KEYOUT,NBLK,
     &                   r,z,A)
C*********************************************************************
C   Block SGS preconditioner for IPARS pcg package.
C   Perform forward and backward sweeps, decomposing A
C   into a block-lower and a block-upper triangle. 
C    Forward sweep:  solve Ly= r
C            L = A11 
C                A21 ~A22
C                0        A32 ~A33 
C                0         0        A43   ~A44
C                A51A11^-1 0         0         A54  ~A55
C                0       A62A22^-1   0          0        A65 ~A66 
C
C    Backward sweep: solve Uz=y
C            U = I  A11^-1A12   0        0   A11^-1A15  0
C                    I       A22^-1A23   0      0    A22^-1A26
C                               I    A33^-1A34  0       0
C                                        I   A44^-1A45  0
C                                               I  AA55^-156
C                                                       I      

C  One option is to update the diagonals as well.
C  Then ~Ajj = Ajj - Ajj-1Aj-1j-1^-1Aj-1j -Ajk-1Ak-1k-1^-1Ak-1j 
C*********************************************************************
      implicit none
      integer idim,jdim,kdim,il1,il2,kl1,kl2,nblk,ldim
      include 'pcg.h'
      integer i,j,k

      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 r(IDIM,JDIM,KDIM), z(IDIM,JDIM,KDIM)
      REAL*4 A(IDIM,JDIM,KDIM,7)
c ==================================================================
      Real*8 gamma($MXRECX),L($MXRECX),D($MXRECX),U($MXRECX)
      Real*8 Rtmp($MXRECX),Ztmp($MXRECX)
      integer ind,N

C Forward Sweep: Solve Ly= r; Use z to hold y
      DO K=KL1,KL2
         DO J=JL1V(k),JL2V(k)
C       Substitute known values and update RHS
            ind=0
            DO I=IL1,IL2
               if(keyout(i,j,k).eq.1)  then
                 ind =ind +1
                 L(ind)= a(i,j,k,2)
                 D(ind)= a(i,j,k,1)
                 U(ind)= a(i,j,k,3)
                 Rtmp(ind)= r(i,j,k)
C       These are the Y connections
                 if(keyout(i,j-1,k).eq.1) then
                   Rtmp(ind) =Rtmp(ind) -a(i,j,k,4)*z(i,j-1,k)
                 endif
C       These are the Z connections
                 if(keyout(i,j,k-1).eq.1) then
                   Rtmp(ind) =Rtmp(ind) -a(i,j,k,6)*z(i,j,k-1)
                 endif
C       Update diagonal terms
c                 if(keyout(i,j-1,k).eq.1) then
c                    D(ind)= D(ind) -a(i,j,k,4)*a(i,j-1,k,5)/a(i,j-1,k,1)
c                 endif
c                 if(keyout(i,j,k-1).eq.1) then
c                    D(ind)= D(ind) -a(i,j,k,6)*a(i,j,k-1,7)/a(i,j,k-1,1)
c                 endif
               endif
            ENDDO
           if(ind.gt.0) then
            CALL TRIDAG(L,D,U,Ztmp,Rtmp,Gamma,ind)
            ind=1
            DO I=IL1,IL2
               if(keyout(i,j,k).eq.1) then
                 z(i,j,k)=ztmp(ind)
                 ind=ind+1
               endif
            ENDDO
           endif
        Enddo
      ENDDO
c      write(*,*) 'Finished forward sweep'

C Backward sweep. Solve Uz = y
      DO K=KL2,KL1,-1
         DO J=JL2V(k),JL1V(k),-1
C       Start with known values and RHS
C       These are the Y connections
           IF(J.LT.JL2V(K)) then
              ind=0
              DO I=IL1,IL2
                 IF(keyout(i,j,k).eq.1.and.keyout(i,j+1,k).eq.1) then
                    ind=ind+1
                    L(ind) = a(i,j,k,2) 
                    D(ind) = a(i,j,k,1) 
                    U(ind) = a(i,j,k,3) 
                    Rtmp(ind)= z(i,j+1,k)*a(i,j,k,5) 
C       Update diagonal terms
c                    if(keyout(i,j-1,k).eq.1) then
c                    D(ind)= D(ind) -a(i,j,k,4)*a(i,j-1,k,5)/a(i,j-1,k,1)
c                    endif
c                    if(keyout(i,j,k-1).eq.1) then
cc                    D(ind)= D(ind) -a(i,j,k,6)*a(i,j,k-1,7)/a(i,j,k-1,1)
c                    endif
                 Endif
              Enddo
              if(ind.gt.0) then 
                CALL TRIDAG(L,D,U,Ztmp,Rtmp,Gamma,ind)
                ind=1
                DO I=IL1,IL2
                if(keyout(i,j,k).eq.1) then
                   z(i,j,k)=z(i,j,k) -ztmp(ind)
                   ind=ind+1
                endif
                ENDDO
              Endif
           ENDIF

C       These are the Z connections
           IF(K.LT.KL2) then
              ind=0
              DO I=IL1,IL2
                 IF(keyout(i,j,k).eq.1.and.keyout(i,j,k+1).eq.1) then
                    ind=ind+1
                    L(ind) = a(i,j,k,2) 
                    D(ind) = a(i,j,k,1) 
                    U(ind) = a(i,j,k,3) 
                    Rtmp(ind)= z(i,j,k+1)*a(i,j,k,7) 
C       Update diagonal terms
c                    if(keyout(i,j-1,k).eq.1) then
c                    D(ind)= D(ind) -a(i,j,k,4)*a(i,j-1,k,5)/a(i,j-1,k,1)
c                    endif
cc                    if(keyout(i,j,k-1).eq.1) then
c                    D(ind)= D(ind) -a(i,j,k,6)*a(i,j,k-1,7)/a(i,j,k-1,1)
c                    endif
                 Endif
              Enddo
              if(ind.gt.0) then
                 CALL TRIDAG(L,D,U,Ztmp,Rtmp,Gamma,ind)
                 ind=1
                 DO I=IL1,IL2
                    IF(keyout(i,j,k).eq.1) then
                       z(i,j,k) = z(i,j,k)-ztmp(ind)
                       ind=ind+1
                    endif
                 Enddo
              Endif
            ENDIF
           ENDDO
        ENDDO

      RETURN
      END
      
C*********************************************************************
      SUBROUTINE TRIDAG(l,d,u,x,r,gam,n)
C*********************************************************************
C  Solve a simple tridiagonal system
       Integer n
       REAL*8 l(*),d(*),u(*),x(*),r(*),gam(*)
       REAL*8 beta

       Integer j
       Beta = d(1)
       x(1)= r(1)/Beta
       Do j=2,n
          gam(j) = u(j-1)/Beta
          Beta = d(j) - l(j)*gam(j)
          x(j) = (r(j)-l(j)*x(j-1))/Beta
       Enddo
       Do j=n-1,1,-1
          x(j) = x(j)-gam(j+1)*x(j+1)
       Enddo
       Return
       End

C*********************************************************************
      SUBROUTINE i_show (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                   KL1,KL2,
     &                   KEYOUT,NBLK,
     &                   x)
C*********************************************************************

C*********************************************************************
      implicit none
      integer idim,jdim,kdim,il1,il2,kl1,kl2,nblk,ldim
      include "pcg.h"
      integer i,j,k

      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 X(IDIM,JDIM,KDIM)
c ==================================================================


      DO K=KL1,KL2
         DO J=JL1V(k),JL2V(k)
            DO I=IL1,IL2
               if(keyout(i,j,k).eq.1) then
                  write(*,*) x(i,j,k)
               endif
            enddo
         enddo
      ENDDO

      RETURN
      END

















