c pcg_stub.f

C  ROUTINES IN THIS MODULE:

c      REAL*8 FUNCTION ipars_ddot (x,y)
c      SUBROUTINE ipars_dscale (alfa,x,y)
c      SUBROUTINE ipars_daxpy (alfa,x,y)
c      SUBROUTINE ipars_dcopy (x,y)
c      SUBROUTINE ipars_matvec (x,y,a)
c      SUBROUTINE ipars_msolve (r,z,a)
c      SUBROUTINE ipars_show (title,x)
c
c each of these routines ipars_* calls a work routine i_*
c 
C  CODE HISTORY:
c Malgo Peszynska: 4/5-8/98
c
c 
C*********************************************************************
      real*8 function ipars_ddot (x,y)
C*********************************************************************
      implicit none

$POWER        include 'msjunk.h'

      include 'pcg.h'
      include 'control.h'
      
      integer x,y	
C*********************************************************************
      
      INTEGER iddot(4)
      external i_ddot
      DATA iddot/4*0/

      integer i, info(1)
      real*8 dt,dtall
      external gr8sum	
c ======================
c      write(*,*) 'ipars ddot'

c   zero the values for all blocks on this processor

      do i =1, $MXBLKS
         dinrm(i)=0.0D0
      enddo

c call the work routine that sets the values for each faultblock 
c in variable dinrm(i) from common block in pcg.dh

      iddot(1)=2
      iddot(2)=x
      iddot(3)=y

      CALL CALLWORK(i_ddot,iddot)
      
c add the values for all faultblocks : we could use here only the faultblocks
c which are active on this processor

      dt = 0.0D0
      do i=1, $MXBLKS         
         dt = dt + dinrm(i)
      enddo

      if (debug_flag.eq.1) then
c         write(*,*) 'value for all faultblocks on this proc. is ',dt
      endif

c add the value across all the processors

      dtall = dt

$MANY      CALL gr8sum(info,1,DT, DTALL)

      if (debug_flag.eq.1) then
         write(*,*) myprc,' value for all blocks/all processors ',dtall
      endif
         
      ipars_ddot=dtall

      end

C*********************************************************************
      SUBROUTINE ipars_dscale (alfa,x,y)
C*********************************************************************
      implicit none

$POWER       include 'msjunk.h'

      integer x,y
      real*8 alfa	
C*********************************************************************
      include 'pcg.h'
        
      INTEGER iddot(4)
      external i_dscale
      DATA iddot/4*0/
c --------------------------
c      write(*,*) 'ipars dscale'

c      write(*,*) 'const is',dconst
      dconst=alfa

      iddot(1)=2
      iddot(2)=x
      iddot(3)=y

$MANY      call update(x,1)
$MANY      call update(y,1)

      CALL CALLWORK(i_dscale,iddot)
      
$MANY      call update(x,1)

      end
C*********************************************************************
      SUBROUTINE ipars_daxpy (alfa,x,y)
C*********************************************************************
      implicit none

$POWER       include 'msjunk.h'

      integer x,y	
      real*8 alfa
C*********************************************************************
      include 'pcg.h'   
      
      INTEGER iddot(4)
      external i_daxpy	
      DATA iddot/4*0/

c --------------------------
c      write(*,*) 'ipars daxpy'


      dconst=alfa

      iddot(1)=2
      iddot(2)=x
      iddot(3)=y

$MANY      call update(x,1)
$MANY      call update(y,1)

      CALL CALLWORK(i_daxpy,iddot)
      
$MANY      call update(y,1)

      end
C*********************************************************************
      SUBROUTINE ipars_dcopy (x,y)
C*********************************************************************
      implicit none

$POWER       include 'msjunk.h'

      integer x,y	
C*********************************************************************
      
      INTEGER iddot(4)
      external i_dcopy
      DATA iddot/4*0/

c --------------------------
c      write(*,*) 'ipars dcopy'

$MANY      call update(x,1)

      iddot(1)=2
      iddot(2)=x
      iddot(3)=y

      CALL CALLWORK(i_dcopy,iddot)
      
$MANY      call update(y,1)

      end


C*********************************************************************
      SUBROUTINE ipars_matvec (x,y,a)
C*********************************************************************
      implicit none

$POWER       include 'msjunk.h'

      integer x,y,a
c computes y=Ax	
C*********************************************************************
      
      INTEGER iddot(5)
      external i_matvec	
      DATA iddot/5*0/

c --------------------------
c      write(*,*) 'ipars matvec'

$MANY      call update(x,1)

      iddot(1)=3
      iddot(2)=x
      iddot(3)=y
      iddot(4)=a

      CALL CALLWORK(i_matvec,iddot)
      
$MANY      call update(y,1)

      end



C*********************************************************************
      SUBROUTINE ipars_msolve (r,z,a)
C*********************************************************************
      implicit none

$POWER       include 'msjunk.h'
 
      include 'pcg.h'
      integer r,z,a	
c solves Az = r
C*********************************************************************
      
      INTEGER iddot(5)
      external i_msolve,i_BJac,i_BILU,i_BGS
      DATA iddot/5*0/

c -----------------------------
c      write(*,*) 'ipars msolve'

      
$MANY      call update(r,1)

      iddot(1)=3
      iddot(2)=r
      iddot(3)=z
      iddot(4)=a

      if(PCG_PREC.eq.1) then 
         CALL CALLWORK(i_msolve,iddot)
      else if(PCG_PREC.eq.2) then 
         CALL CALLWORK(i_BJac,iddot)
      else if(PCG_PREC.eq.3) then 
         CALL CALLWORK(i_BILU,iddot)
      else if(PCG_PREC.eq.4) then 
         CALL CALLWORK(i_BGS,iddot)
      else
         write(*,*) 'Invalid PCG preconditioner specified. STOP'
         STOP 0 
      endif
      
$MANY      call update(z,1)

      end



C*********************************************************************
      SUBROUTINE ipars_show (title,x)
C*********************************************************************
      implicit none

$POWER       include 'msjunk.h'

      integer x
      character*8 title
C*********************************************************************
      INTEGER iddot(4)
      external i_show
      DATA iddot/4*0/

c --------------------------

      iddot(1)=1
      iddot(2)=x

      write(*,*) title

      CALL CALLWORK(i_show,iddot)
      
      end














