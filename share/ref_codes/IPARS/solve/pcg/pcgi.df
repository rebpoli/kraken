C*********************************************************************
      SUBROUTINE PCGI (NERR,KINP)
C*********************************************************************
C  ROUTINE INITIALIZES Linear Solver parameters 
c 		for PCG and GMRES solver
C  NERR = Error number stepped by 1 on error (input & output, INTEGER)
C  KINP = Input type
C       = 1 ==> initial data
C       = 2 ==> transient data

C***********************************************************************
      implicit none
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INCLUDE 'pcg.h'

      INTEGER NERR,KINP
      INTEGER I,ITM,NX,NY,NZ,NDUM

c set the default value of max number of iterations to 
c the number of unknowns <= sum (nx*ny*nz) over blocks 
c set the default tolerance (relative)  5e - 6
c set the default tolerance (absolute)  1e - 8
c 
      IF (KINP.EQ.1) THEN
         ITM = 0
         DO I=1,NUMBLK
            CALL BLKDIM(I,NX,NY,NZ,NERR)
            ITM = ITM + NX*NY*NZ
         ENDDO 

         PCG_ITMAX = ITM
         PCG_TOL = 0.5E-5
         PCG_ATOL= 1.E-8
	 PCG_ABSFLAG = 0
         PCG_PREC = 2

      ENDIF

c get the values of the parameters from input file, if present

      CALL GETVAL('PCG_TOL ',pcg_tol,'R4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,3) PCG_TOL
    3 FORMAT(' PCG relative tolerance =',T45,G12.4)

      CALL GETVAL('PCG_ATOL ',pcg_atol,'R4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,4) PCG_ATOL
    4 FORMAT(' PCG absolute tolerance =',T45,G12.4)

      CALL GETVAL('PCG_ITMAX ',pcg_itmax,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,5) PCG_ITMAX
    5 FORMAT(' PCG max # iterations =',T45,I5)

      CALL GETVAL('PCG_ABSFLAG ',pcg_absflag,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1))) THEN
         WRITE (NFOUT,6) PCG_ABSFLAG
         if(pcg_absflag.eq.0) write(nfout,70)
         if(pcg_absflag.eq.1) write(nfout,71)
         if(pcg_absflag.eq.2) write(nfout,72)
         if(pcg_absflag.eq.3) write(nfout,73)
         if(pcg_absflag.lt.0.or.pcg_absflag.gt.3) write(nfout,74)
 6       FORMAT(' PCG absflag =',T45,I5)
 70      FORMAT(' PCG absflag: ONLY RELATIVE TOLERANCE IS CHECKED')
 71      FORMAT(' PCG absflag: ONLY ABSOLUTE TOLERANCE IS CHECKED')
 72      FORMAT(' PCG absflag: ABSOLUTE OR RELATIVE TOL. IS CHECKED')
 73      FORMAT(' PCG absflag: ABSOLUTE AND RELATIVE TOL. IS CHECKED')
 74      FORMAT(' PCG absflag out of range (defaults to 0): ',/
     &        'ONLY RELATIVE TOLERANCE IS CHECKED')
      ENDIF

      CALL GETVAL('PCG_PREC ',PCG_PREC,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1))) THEN
         WRITE (NFOUT,8) PCG_PREC
         IF(PCG_PREC.EQ.1) WRITE(NFOUT,81) 
         IF(PCG_PREC.EQ.2) WRITE(NFOUT,82) 
         IF(PCG_PREC.EQ.3) WRITE(NFOUT,83) 
         IF(PCG_PREC.EQ.4) WRITE(NFOUT,84) 
         IF(PCG_PREC.LT.1.OR.PCG_PREC.GT.4) WRITE(NFOUT,85)          
 8       FORMAT(' PCG_PREC =',T45,I5)
 81      FORMAT(' PCG_PREC .. DIAGONAL.')
 82      FORMAT(' PCG_PREC .. BLOCK JACOBI (TRIDIAG) PRECONDITIONER.')
 83      FORMAT(' PCG_PREC .. BLOCK ILU PRECONDITIONER.')
 84      FORMAT(' PCG_PREC .. BLOCK SGS PRECONDITIONER.') 
 85      FORMAT(' PCG_PREC .. (OUT OF RANGE) DEFAULTS TO 1 .. ',/
     &        ' DIAGONAL.')
      ENDIF
 
c -------- TMP values set to default values 

      if (kinp.eq.1) then
         tmp_PCG_ITMAX   = PCG_ITMAX 
         tmp_PCG_TOL     = PCG_TOL
         tmp_PCG_ATOL    = PCG_ATOL  
         tmp_PCG_ABSFLAG = PCG_ABSFLAG  
         tmp_PCG_PREC    = PCG_PREC 

c get the values of the TMP parameters from input file, if present
      CALL GETVAL('TMP_PCG_TOL ',tmp_pcg_tol,
     &	'R4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,31) tmp_PCG_TOL
 31   FORMAT(' tmp_PCG relative tolerance =',T45,G12.4)

      CALL GETVAL('TMP_PCG_ATOL ',TMP_PCG_ATOL,
     &	'R4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,41) tmp_PCG_ATOL
 41   FORMAT(' tmp_PCG absolute tolerance =',T45,G12.4)

      CALL GETVAL('TMP_PCG_ITMAX ',TMP_PCG_ITMAX,
     &     'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,51) TMP_PCG_ITMAX
 51   FORMAT(' TMP_PCG max # iterations =',T45,I5)

      CALL GETVAL('TMP_PCG_ABSFLAG ',TMP_PCG_ABSFLAG,
     &     'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1))) THEN
         WRITE (NFOUT,61) TMP_PCG_ABSFLAG
 61      FORMAT(' TMP_PCG absflag =',T45,I5)
      ENDIF

      CALL GETVAL('TMP_PCG_PREC ',TMP_PCG_PREC,
     &     'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1))) THEN
         WRITE (NFOUT,811) TMP_PCG_PREC
 811     FORMAT(' TMP_PCG_PREC =',T45,I5)
      ENDIF

      endif

      END

c -------------------------------------------------------------------
      SUBROUTINE TMP_PCG_TOLS (flag)
      IMPLICIT NONE
      INTEGER FLAG
      INCLUDE 'pcg.h'

      INTEGER
     &       SAVE_PCG_ITMAX,
     &       SAVE_PCG_ABSFLAG,
     &       SAVE_PCG_PREC

        REAL*4
     &       SAVE_PCG_TOL,
     &       SAVE_PCG_ATOL

	COMMON /PCGSAVE/ 
     &       SAVE_PCG_TOL,
     &       SAVE_PCG_ATOL,
     &       SAVE_PCG_ITMAX,
     &       SAVE_PCG_ABSFLAG,
     &       SAVE_PCG_PREC

c ---------------------------------------------------

        IF(FLAG.EQ.0) THEN
           SAVE_PCG_ITMAX   = PCG_ITMAX 
           SAVE_PCG_TOL     = PCG_TOL
           SAVE_PCG_ATOL    = PCG_ATOL  
           SAVE_PCG_ABSFLAG = PCG_ABSFLAG  
           SAVE_PCG_PREC    = PCG_PREC 

           PCG_ITMAX   = TMP_PCG_ITMAX 
           PCG_TOL     = TMP_PCG_TOL
           PCG_ATOL    = TMP_PCG_ATOL  
           PCG_ABSFLAG = TMP_PCG_ABSFLAG  
           PCG_PREC    = TMP_PCG_PREC 

c           write(*,*) 'pcg tol was ',save_pcg_tol,' is ',tmp_pcg_tol

	ELSE
           PCG_ITMAX   = SAVE_PCG_ITMAX 
           PCG_TOL     = SAVE_PCG_TOL
           PCG_ATOL    = SAVE_PCG_ATOL  
           PCG_ABSFLAG = SAVE_PCG_ABSFLAG  
           PCG_PREC    = SAVE_PCG_PREC 
        ENDIF

	END



