C*********************************************************************
      SUBROUTINE SOLGI (NERR,KINP)
C*********************************************************************
C  ROUTINE INITIALIZES Linear Solver parameters 
c 		for PCG and GMRES solver
C  NERR = Error number stepped by 1 on error (input & output, INTEGER)
C  KINP = Input type
C       = 1 ==> initial data
C       = 2 ==> transient data

C***********************************************************************
      implicit none
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INCLUDE 'sol.h'
      INCLUDE 'sprb.h'
      INCLUDE 'sprhandle.h'
      INCLUDE 'staticums.h'

      integer nerr,kinp

      integer i,itm,nx,ny,nz,ndum
      integer N_Value,N_Index,nl1,nl2,k,levels,NXdummy,NYdummy,n1my

c set the default value of max number of iterations to 
c the number of unknowns <= sum (nx*ny*nz) over blocks 
c set the default tolerance (relative)  5e - 6
c set the default tolerance (absolute)  1e - 8
c 
      IF (KINP.EQ.1) THEN
         itm = 0
         do I=1,NUMBLK
            CALL BLKDIM(I,NX,NY,NZ,NERR)
            itm = itm + nx*ny*nz
         enddo 
         lsol_itmax = itm
         lsol_tol = 0.5e-5
         lsol_atol= 1.e-8
	 lsol_absflag = 0
         n_gs_step = 1
C  Set Line SOR for pressure preconditioner by default
         PREC=4
C  Set forcing term off (by default)
         FORCING = 0.
      ENDIF

c get the values of the parameters from input file, if present

      CALL GETVAL('LSOL_TOL ',lsol_tol,'R4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,3) LSOL_TOL
    3 FORMAT(' LSOL relative tolerance =',T45,G12.4)

      CALL GETVAL('LSOL_ATOL ',lsol_atol,'R4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,4) LSOL_ATOL
    4 FORMAT(' LSOL absolute tolerance =',T45,G12.4)

      CALL GETVAL('LSOL_ITMAX ',lsol_itmax,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
     &   WRITE (NFOUT,5) LSOL_ITMAX
    5 FORMAT(' LSOL max # iterations =',T45,I5)

      CALL GETVAL('LSOL_ABSFLAG ',lsol_absflag,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1))) then
         WRITE (NFOUT,6) LSOL_ABSFLAG
         if(lsol_absflag.eq.0) write(nfout,70)
         if(lsol_absflag.eq.1) write(nfout,71)
         if(lsol_absflag.eq.2) write(nfout,72)
         if(lsol_absflag.eq.3) write(nfout,73)
         if(lsol_absflag.lt.0.or.lsol_absflag.gt.3) write(nfout,74)
 6       FORMAT(' LSOL absflag =',T45,I5)
 70      FORMAT(' LSOL absflag: ONLY RELATIVE TOLERANCE IS CHECKED')
 71      FORMAT(' LSOL absflag: ONLY ABSOLUTE TOLERANCE IS CHECKED')
 72      FORMAT(' LSOL absflag: ABSOLUTE OR RELATIVE TOL. IS CHECKED')
 73      FORMAT(' LSOL absflag: ABSOLUTE AND RELATIVE TOL. IS CHECKED')
 74      FORMAT(' LSOL absflag out of range (defaults to 0): ',/
     &        'ONLY RELATIVE TOLERANCE IS CHECKED')
      ENDIF

cmpesz: add here the call to tmpINsoltol

$TRCHEM      if(kinp.eq.1)call tmpINLSOLTOL(nerr)

      
$GMRES      CALL GETVAL('N_GS_STEP ',N_GS_STEP,'I4',0,0,0,0,NDUM,NERR)
$GMRES      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
$GMRES     &   WRITE (NFOUT,7) N_GS_STEP
$GMRES 7    FORMAT(' N_GS_STEP =',T45,I5)

$GMRES      CALL GETVAL('FORCING ',FORCING,'R4',0,0,0,0,NDUM,NERR)
$GMRES      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1)))
$GMRES     &   WRITE (NFOUT,9) FORCING
$GMRES 9    FORMAT(' FORCING TERM =',T45,G12.4)

      CALL GETVAL('GMRES_PREC ',PREC,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1))) THEN
         WRITE (NFOUT,8) PREC
         IF(PREC.EQ.1) WRITE(NFOUT,81) 
         IF(PREC.EQ.2) WRITE(NFOUT,82) 
         IF(PREC.EQ.3) WRITE(NFOUT,83) 
         IF(PREC.EQ.4) WRITE(NFOUT,84) 
         IF(PREC.EQ.5) WRITE(NFOUT,85) 
         IF(PREC.EQ.6) WRITE(NFOUT,86) 
         IF(PREC.EQ.7) WRITE(NFOUT,87) 
         IF(PREC.EQ.8) WRITE(NFOUT,88) 
         IF(PREC.EQ.10) WRITE(NFOUT,90) 
         IF(PREC.EQ.11) WRITE(NFOUT,91) 
         IF(PREC.EQ.12) WRITE(NFOUT,92) 
         IF(PREC.EQ.13) WRITE(NFOUT,93) 
         IF(PREC.EQ.14) WRITE(NFOUT,94) 
         IF(PREC.EQ.15) WRITE(NFOUT,95) 
         IF(PREC.EQ.16) WRITE(NFOUT,96) 
         IF(PREC.EQ.17) WRITE(NFOUT,97) 
         IF(PREC.LT.1.OR.PREC.GT.17) WRITE(NFOUT,98)          
 8       FORMAT(' GMRES_PREC =',T45,I5)
 81      FORMAT(' GMRES_PREC .. DIAGONAL.')
 82      FORMAT(' GMRES_PREC .. BLOCK JACOBI (TRIDIAG) PRECONDITIONER.')
 83      FORMAT(' GMRES_PREC .. BLOCK  GS PRECONDITIONER.')
 84      FORMAT(' GMRES_PREC .. Line SOR  PRECONDITIONER.') 
 85      FORMAT(' GMRES_PREC .. PCG+ TRUNC.NEUMANN SERIES') 
 86      FORMAT(' GMRES_PREC .. BCGS+TRUNC.NEUMANN SERIES') 
 87      FORMAT(' GMRES_PREC .. GMRES+TRUNC.NEUMAN SERIES') 
 88      FORMAT(' GMRES_PREC .. TRUNC.NEUMANN SERIES PREC') 
 90      FORMAT(' GMRES_PREC .. SEPARABLE PRECONDITIONER') 
 91      FORMAT(' GMRES_PREC .. SEPARABLE AND G-S SMOOTH ') 
 92      FORMAT(' GMRES_PREC .. SEPARABLE BASED ON UMFPACK')
 93      FORMAT(' GMRES_PREC .. MULTILEVEL ILU           ') 
 94      FORMAT(' GMRES_PREC .. MULTILEVEL ILU AND LSOR  ') 
 95      FORMAT(' GMRES_PREC .. ALGEBRAIC MULTIGRID      ') 
 96      FORMAT(' GMRES_PREC .. ALGEBRAIC MULTIGRID AND LSOR') 
 97      FORMAT(' GMRES_PREC .. SPARSE FACTORIZATION    ') 
 98      FORMAT(' GMRES_PREC .. (OUT OF RANGE) DEFAULTS TO 4 .. ',/
     &        ' Line SOR.')
      ENDIF

      IF((PREC.GE.10.and.PREC.LE.12).and.METHOD.NE.4)GOTO 13
      IF((PREC.LT.10.or.PREC.GT.12).or.METHOD.NE.4)RETURN
      IF (KINP.eq.2) RETURN
      DO i=1,NUMBLK
       CALL BLKDIM (i,NX,NY,NZ,NERR)
c Predefine the indexes of the trace lines
       ILINEINDX(i) = NX/2
       JLINEINDX(i) = NY/2
       KLINEINDX(i) = NZ/2
       IF (ILINEINDX(i).eq.0) ILINEINDX(i) = 1
       IF (JLINEINDX(i).eq.0) JLINEINDX(i) = 1
       IF (KLINEINDX(i).eq.0) KLINEINDX(i) = 1
      END DO
      CALL GETVAL('ILINEINDX ',ILINEINDX,'I4',NUMBLK,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1))) THEN
      write(NFOUT,*)'I-TRACES FOR THE JACOBIAN ARE ',
     &                  (ILINEINDX(i),i=1,NUMBLK)
      IF (NDUM.LT.NUMBLK) THEN
          write(NFOUT,*)'Not all ILINEINDX where defined explicitly:'
          write(NFOUT,*)'Predefined values will be used ',
     &                  (ILINEINDX(i),i=1,NUMBLK)
      ELSE IF (NDUM.GT.NUMBLK) THEN
          write(NFOUT,*)'There are too many ILINEINDX entries:'
          write(NFOUT,*)'The last entries are ignored'
      END IF
      END IF
      CALL GETVAL('JLINEINDX ',JLINEINDX,'I4',NUMBLK,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1))) THEN
      write(NFOUT,*)'J-TRACES FOR THE JACOBIAN ARE ',
     &                  (JLINEINDX(i),i=1,NUMBLK)
      IF (NDUM.LT.NUMBLK) THEN
          write(NFOUT,*)'Not all JLINEINDX where defined explicitly:'
          write(NFOUT,*)'Predefined values will be used ',
     &                  (JLINEINDX(i),i=1,NUMBLK)
      ELSE IF (NDUM.GT.NUMBLK) THEN
          write(NFOUT,*)'There are too many JLINEINDX entries:'
          write(NFOUT,*)'The last entries are ignored'
      END IF
      END IF
      CALL GETVAL('KLINEINDX ',KLINEINDX,'I4',NUMBLK,0,0,0,NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1))) THEN
      write(NFOUT,*)'K-TRACES FOR THE JACOBIAN ARE ',
     &                  (KLINEINDX(i),i=1,NUMBLK)
      IF (NDUM.LT.NUMBLK) THEN
          write(NFOUT,*)'Not all KLINEINDX where defined explicitly:'
          write(NFOUT,*)'Predefined values will be used ',
     &                  (KLINEINDX(i),i=1,NUMBLK)
      ELSE IF (NDUM.GT.NUMBLK) THEN
          write(NFOUT,*)'There are too many KLINEINDX entries:'
          write(NFOUT,*)'The last entries are ignored'
      END IF
      END IF
      DO i=1,NUMBLK
       IF (ILINEINDX(i).LT.1.OR.ILINEINDX(i).GT.NX) THEN
          ILINEINDX(i) = NX/2
          IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1))) 
     &    write(NFOUT,*)i,'block: wrong Itrace. Replaced by ',
     &                  ILINEINDX(i)
       END IF
       IF (JLINEINDX(i).LT.1.OR.JLINEINDX(i).GT.NY) THEN
          JLINEINDX(i) = NY/2
          IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1))) 
     &    write(NFOUT,*)i,'block: wrong Jtrace. Replaced by ',
     &                  JLINEINDX(i)
       END IF
       IF (KLINEINDX(i).LT.1.OR.KLINEINDX(i).GT.NZ) THEN
          KLINEINDX(i) = NZ/2
          IF (LEVELC.AND.((NDUM.GT.0).OR.(KINP.EQ.1))) 
     &    write(NFOUT,*)i,'block: wrong Ktrace. Replaced by ',
     &                  KLINEINDX(i)
       END IF
      END DO
C Allocate array to store the traces
      IF (PREC.EQ.10.or.PREC.EQ.11) THEN
c in case of lines
        CALL ALCJAC('SEPARABLE ', 3,3,3, 0,0,0, 0, N_SEPARABLE, NERR )
      ELSE
c in case of plane
        CALL ALCJAC('SEPARABLE ', 0,0,3, 6,0,0, 0, N_SEPARABLE, NERR )
      END IF
      if (NERR.ne.0) goto 133
C Now compute the required memory for right hand sides of the separable solver,
C and real and integer memory required by the separable solver
      DO i=1,NUMBLK
        Lvalue(i) = n3(i)*n2(i)*n1(i)
      END DO
      CALL ALCFIX( 'RHS_SEP ',Lvalue, N_RHS_SEP, NERR )
      if (NERR.ne.0) goto 133
      DO i=1,NUMBLK
        n1my = n1(i)
        CALL BLKDIM (i,NXdummy,NYdummy,n1(i),NERR)
        nl1 = 1 + max(int(1d-13 + log(dble(n1(i)))/log(4.d0)),0)
        nl2 = 1 + max(int(1d-13 + log(dble(n2(i)))/log(4.d0)),0)
        IF (PREC.EQ.10.or.PREC.EQ.11) THEN
         heter = .false.
         Lvalue(i) = 6*(n1(i)*nl1 + n2(i)*nl2)
     &     + max(9*n1(i),7*n2(i)*n3(i))
     &     + max(9*n2(i),10*n3(i))
         Lindex(i) = (4**nl1-1)/3 + (4**nl2-1)/3 + 2*(nl1 + nl2)
     &      + 5*n1(i) + 5*n2(i) + 7
        ELSE
         heter = .true.
         if      ( n2(i)*n3(i) .le. N2Value(1,2) ) then
           Multiplier = N2Value(1,1)
         else if ( n2(i)*n3(i) .le. N2Value(2,2) ) then
           Multiplier = N2Value(2,1)
         else if ( n2(i)*n3(i) .le. N2Value(3,2) ) then
           Multiplier = N2Value(3,1)
         else if ( n2(i)*n3(i) .le. N2Value(4,2) ) then
           Multiplier = N2Value(4,1)
         else
           Multiplier = N2Value(5,1)
         end if
         Lvalue(i) = 6*(n1(i)*nl1 )
     &     + max(9*n1(i),7*n2(i)*n3(i))
     &     + 3*Multiplier*n2(i)*n3(i) / 2
         Lindex(i) = (4**nl1-1)/3 + 2*(nl1 )
     &      + 5*n1(i) + 3 + 3*N2Index*n2(i)*n3(i)
        END IF
$MANY       k = (n1(i) + 2*PRCBLK(i) - 1)/PRCBLK(i)
$MANY       k = min(k,n1(i))
$MANY       Lvalue(i) = max(6*k*nl1 + 11*n2(i)*n3(i) 
$MANY     &              + 6*n2(i)*nl2 + max(9*n2(i),10*n3(i)),
$MANY     &            6*k*nl1 + 9*n1(i) )
$MANY       levels = int( log(dble(PRCBLK(i)))/log(2d0) + 0.5d0 )
$MANY       levels = (levels+1)/2
$MANY       Lindex(i) = (4**nl1-1)/3 + (4**nl2-1)/3 + 2*nl2 + 5*n2(i)
$MANY     &            + 6*n1(i) + 2*nl1 + levels + 12
$MANY       if (PREC.EQ.12) THEN
$MANY       Lvalue(i) = max(6*k*nl1 + 11*n2(i)*n3(i) 
$MANY     &              + 3*Multiplier*n2(i)*n3(i) / 2,
$MANY     &            6*k*nl1 + 9*n1(i) )
$MANY       Lindex(i) = (4**nl1-1)/3 + 3*N2Index*n2(i)*n3(i) 
$MANY     &            + 6*n1(i) + 2*nl1 + levels + 8
$MANY       end if       
$MANY       n1(i) = n1my 
      END DO
      CALL ALCFIX( 'Value ', Lvalue, N_Value, NERR )
      if (NERR.ne.0) goto 133
      CALL ALCFIX( 'Index ', Lindex, N_Index, NERR )
      if (NERR.ne.0) goto 133
      IPRECPREP(1)=6
      IPRECPREP(4)=N_Value
      IPRECPREP(5)=N_Index
      IPRECPREP(6)=N_SEPARABLE
      IPRECPREP(7)=N_RHS_SEP



      RETURN
 13   NERR = NERR + 1
      IF (LEVERR.lt.3) LEVERR = 3
      if(levelc) write(NFOUT,*)
     &     'ERROR in SEPARABLE: METHOD is not equal 4.'
      if(levelc) write(NFOUT,*)
     &     '***************************************************'
      return

 133  NERR = NERR + 1
      IF (LEVERR.lt.3) LEVERR = 3
      if(levelc) write(NFOUT,*)
     &     'ERROR in SEPARABLE: Can not allocate arrays.'
      if(levelc) write(NFOUT,*)
     &     '***************************************************'
      return

      END


      SUBROUTINE SET_GS_STEP (NSTEP)
      INCLUDE 'sol.h'
      INTEGER NSTEP
      
      NSTEP = N_GS_STEP
      
      RETURN
      END
      
      SUBROUTINE SET_N_GS_STEP (NSTEP)
      INCLUDE 'sol.h'
      INTEGER NSTEP

      N_GS_STEP = NSTEP 

      RETURN
      END


c =========================================================================

      SUBROUTINE TMP_LSOLTOL(NERR,FLAG)
c =========================================================================
c resets value of LSOL_* parameters to temporary values which are read
c as TMP_*.
c This is useful in models where pressure and saturation equations are
c solved separately and when they obviously need to be governed by
c different tolerances as pressure eq. (elliptic) typically is harder 
c and where saturation equation is parabolic-hyperbolic. 
c =========================================================================
      IMPLICIT NONE
      INTEGER NERR,FLAG

      INCLUDE 'control.h'
      INCLUDE 'sol.h'

      INTEGER NDUM
      INTEGER SLSOL_ITMAX, SLSOL_ABSFLAG
      REAL*4 SLSOL_TOL,SLSOL_ATOL
      INTEGER NLSOL_ITMAX, NLSOL_ABSFLAG
      REAL*4 NLSOL_TOL,NLSOL_ATOL
      COMMON /TMPSAVE/ SLSOL_ITMAX, SLSOL_ABSFLAG,
     &     SLSOL_TOL,SLSOL_ATOL
      COMMON /TMPNEW/ NLSOL_ITMAX, NLSOL_ABSFLAG,
     &     NLSOL_TOL,NLSOL_ATOL

$TRCHEM      integer nfrom_diff
$TRCHEM      common /tmpstatus/ nfrom_diff
        
C ----------------------------------------------------------------
      IF(FLAG.EQ.0) THEN   ! save and get new values

         SLSOL_ITMAX = LSOL_ITMAX 
         SLSOL_ABSFLAG = LSOL_ABSFLAG
         SLSOL_TOL = LSOL_TOL
         SLSOL_ATOL = LSOL_ATOL
     
         LSOL_ITMAX = NLSOL_ITMAX 
         LSOL_ABSFLAG = NLSOL_ABSFLAG
         LSOL_TOL = NLSOL_TOL
         LSOL_ATOL = NLSOL_ATOL

$TRCHEM         NFROM_DIFF = 1

      ELSE                 ! restore old values
         Lsol_ITMAX = SLSOL_ITMAX 
         LSOL_ABSFLAG = SLSOL_ABSFLAG
         LSOL_TOL = SLSOL_TOL
         LSOL_ATOL = SLSOL_ATOL
     
$TRCHEM         NFROM_DIFF = 0

      ENDIF
      END


c =========================================================================
      SUBROUTINE TMPINLSOLTOL(NERR)
c =========================================================================
c reads in temporary values of LSOL_* parameters to be used
c by models where TICAMA is called more than twice and where
c it is called for equations of different type.
c =========================================================================
      IMPLICIT NONE
      INTEGER NERR,FLAG

      INCLUDE 'control.h'
      INCLUDE 'sol.h'

      INTEGER NDUM

      INTEGER SLSOL_ITMAX, SLSOL_ABSFLAG
      REAL*4 SLSOL_TOL,SLSOL_ATOL
      INTEGER NLSOL_ITMAX, NLSOL_ABSFLAG
      REAL*4 NLSOL_TOL,NLSOL_ATOL
      COMMON /TMPSAVE/ SLSOL_ITMAX, SLSOL_ABSFLAG,
     &     SLSOL_TOL,SLSOL_ATOL
      COMMON /TMPNEW/ NLSOL_ITMAX, NLSOL_ABSFLAG,
     &     NLSOL_TOL,NLSOL_ATOL

c-----------------------------------------
      NLSOL_ITMAX = LSOL_ITMAX 
      NLSOL_ABSFLAG = LSOL_ABSFLAG
      NLSOL_TOL = LSOL_TOL
      NLSOL_ATOL = LSOL_ATOL

      CALL GETVAL('TMP_LSOL_TOL ',nlsol_tol,'R4',0,0,0,0,
     &        NDUM,NERR)

      IF (LEVELC.AND.((NDUM.GT.0)))
     &   WRITE (NFOUT,3) nLSOL_TOL
    3 FORMAT(' tmp_LSOL relative tolerance =',T45,G12.4)

      CALL GETVAL('TMP_LSOL_ATOL ',NLSOL_ATOL,'R4',0,0,0,0,
     &     NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0)))
     &   WRITE (NFOUT,4) nLSOL_ATOL
    4 FORMAT(' tmp_LSOL absolute tolerance =',T45,G12.4)

      CALL GETVAL('TMP_LSOL_ITMAX ',NLSOL_ITMAX,'I4',0,0,0,0,
     &     NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0)))
     &   WRITE (NFOUT,5) nLSOL_ITMAX
    5 FORMAT(' tmp_LSOL max # iterations =',T45,I5)

      CALL GETVAL('TMP_LSOL_ABSFLAG ',NLSOL_ABSFLAG,'I4',0,0,0,0,
     &     NDUM,NERR)
      IF (LEVELC.AND.((NDUM.GT.0))) then
         WRITE (NFOUT,*) 'absflag ',nLSOL_ABSFLAG
      ENDIF


      END

      




















