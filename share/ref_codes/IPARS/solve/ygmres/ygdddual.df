C  YGDDDUAL.F - ADDITIONAL ROUTINES FOR DUAL APPROXIMATION MULTIBLOCK 
C               FOR DIFFUSION-DISPERSION LINEAR SYSTEM.

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE YGDDDUAL   (ITLIN,NERR)
C  SUBROUTINE YGDDDUALB  (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                      KL2,KEYOUT,NBLK,DUNK)
C  SUBROUTINE YGDDDUALV  (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                      KL2,KEYOUT,NBLK,DUNK)

C  CODE HISTORY:

C  JOHN WHEELER     3/05/99     ALPHA CODE
C  JOHN WHEELER     5/28/99     MULTIMODEL CAPABILITY

C  SUNIL G. THOMAS  3/27/08     DUAL APPROXIMATION ROUTINES FROM LSOR 
C                               AND MODIFIED FOR DIFFUSION-DISPERSION 
C                               LINEAR SYSTEM. NOTE: COMMENT AT HEADER 
C                               OF TICAMA.DF STILL APPLIES HERE.

C*********************************************************************
      SUBROUTINE YGDDDUAL (ITLIN,NERR)
C*********************************************************************

C  Executive routine for updating primary variables on the interface

C  ITLIN = Iteration number (input, INTEGER)

C  NERR = Error number steped by 1 on error (input & output, INTEGER)

C  Note:  This routine uses interface buffers as follows:

C  BUFIF8(,i) = Change in variable i (used internal to ygmres)

C  NOTE:
C     KRB  = RED/BLACK UPDATE KEY
C          = 0 ==> UPDATE INTERFACE ELEMENTS WITH GLOBAL J+K EVEN
C          = 1 ==> UPDATE INTERFACE ELEMENTS WITH GLOBAL J+K ODD
C          = 2 ==> UPDATE ALL INTERFACE ELEMENTS

C*********************************************************************
      IMPLICIT NONE
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'

      INCLUDE 'sblkc.h'

      INTEGER IA(4),NBEM($MXMOD),ITLIN,NERR
      LOGICAL ONCEONLY
      DATA IA/4*0/,NBEM/$MXMOD*0/,ONCEONLY/.TRUE./

      EXTERNAL YGDDDUALB,YGDDDUALV

      IF (NFACES.EQ.0) RETURN
      CALL TIMON(12)

      IF (ONCEONLY) THEN
         ONCEONLY=.FALSE.
         IA(1)=3
         IA(3)=N_BUFDIM
         IA(4)=N_BUFIF
         NBEM($HMODEL)=2
         NBEM($TMODEL)=1
         NBEM($IMODEL)=3
         NBEM($XMODEL)=1
         NBEM($TRMODEL)=1
      ENDIF

C  PUT B BLOCK VARIABLE CHANGES IN INTERFACE BUFFERS

         MODACT=MODEL
$TRCHEM      IF(MODELON($TRMODEL)) MODACT=FLOWMODEL
$POROE       IF(MODELON($PEMODEL)) MODACT=FLOWMODEL
         IA(2)=N_DUNKV(MODACT)
         CALL CALLWORK(YGDDDUALB,IA)
      MODACT=0

C  PASS BUFFERS FROM B BLOCK PROCESSOR TO A BLOCK PROCESSOR

$MANY      CALL PIFBUF8(NBEM,NERR)

C  PUT VARIABLE CHANGES IN DUNK ON A PROCESSOR (RED OR BLACK ONLY)

         MODACT=MODEL
$TRCHEM      IF(MODELON($TRMODEL)) MODACT=FLOWMODEL
$POROE       IF(MODELON($PEMODEL)) MODACT=FLOWMODEL
         IA(2)=N_DUNKV(MODACT)
         CALL CALLWORK(YGDDDUALV,IA)
      MODACT=0

      CALL TIMOFF(12)
      END
C*********************************************************************
      SUBROUTINE YGDDDUALB (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                      KL2,KEYOUT,NBLK,DUNK,NBUFDIM,BUFIF8)
C*********************************************************************

C  PUT B BLOCK VARIABLE CHANGES IN INTERFACE BUFFERS

C  DUNK(I,J,K,) = VARIABLE CHANGES (INPUT, REAL*8)

C  NBUFDIM = FIRST DIMENSION OF BUFIF8(,) (INPUT, INTEGER)

C  BUFIF8(,) = INTERFACE BUFFER (OUTPUT, REAL*8)

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'sblkc.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,NBUFDIM
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      INTEGER K,M,IA,JA,KA,NES,NET,NMS,NBT,NMT,NVS,NVT,II,II1,II2
      REAL*8  DUNK(IDIM,JDIM,KDIM,$MXNUMEQ), BUFIF8(NBUFDIM,*),DUM

      IF (NIEBS(NBLK).EQ.0) RETURN

      NES=NUMEQS(NBLK)
      NMS=MODBLK(NBLK)

      DO 1 M=1,NPAI(NBLK)
      II1=IESNDI(M,NBLK)
      II2=II1+NESNDI(M,NBLK)-1
      NBT=NBSRI(M,NBLK)
      NMT=MODBLK(NBT)
      IF (NMS.EQ.NMT) THEN

C  SAME MODEL IN THE TWO BLOCKS

         DO 2 II=II1,II2
         K=KFESR(II)
         IA=IJKS(1,K)
         JA=IJKS(2,K)
         KA=IJKS(3,K)
         DO 2 NVS=1,NES
    2    BUFIF8(II,NVS)=DUNK(IA,JA,KA,NVS)

      ELSE

C  DIFFERENT MODELS IN THE TWO BLOCKS

         NET=NUMEQS(NBT)
         DO 3 II=II1,II2
         K=KFESR(II)
         IA=IJKS(1,K)
         JA=IJKS(2,K)
         KA=IJKS(3,K)
         DO 3 NVT=1,NET
         DUM=0.D0
         DO 4 NVS=1,NES
    4    DUM=DUM+UNKMAP(NVS,NVT,NMS,NMT)*DUNK(IA,JA,KA,NVS)
         BUFIF8(II,NVT)=DUM
    3    CONTINUE

      ENDIF
    1 CONTINUE

      END
C*********************************************************************
      SUBROUTINE YGDDDUALV (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                      KL2,KEYOUT,NBLK,DUNK,NBUFDIM,BUFIF8)
C*********************************************************************

C  PUT VARIABLE CHANGES IN DUNK ON A PROCESSOR (RED, BLACK, OR ALL)

C  DUNK(I,J,K,) = VARIABLE CHANGES (OUTPUT, REAL*8)

C  NBUFDIM = FIRST DIMENSION OF BUFIF8(,) (INPUT, INTEGER)

C  BUFIF8(,) = INTERFACE BUFFER (OUTPUT, REAL*8)

C*********************************************************************
      IMPLICIT NONE
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'sllsorc.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,NBUFDIM
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      INTEGER IOFF,JOFF,KOFF,MERR,JRBO,NET,NETP,NMT,J,J1,J2,K,K1,K2,
     &        IA,JA,KA,L,IE,IV
      REAL*8  DUNK(IDIM,JDIM,KDIM,$MXNUMEQ),A($MXNUMEQ,$MXNUMEQ+1),
     &  B($MXNUMEQ),DET,BUFIF8(NBUFDIM,*),BB

      IF (NIEBS(NBLK).EQ.0) RETURN

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)
      JRBO=JOFF+KOFF
      NET=NUMEQS(NBLK)
      NETP=NET+1
      NMT=MODBLK(NBLK)

C  LOOP OVER A BLOCK ELEMENTS
C  RED-BLACK ORDERING OF THE UPDATES KEYED ON KRB

      K1=IIEBS(NBLK)
      K2=K1+NIEBS(NBLK)-1
      DO 1 K=K1,K2
      JA=IJKS(2,K)
      KA=IJKS(3,K)

      IF (MOD(JA+KA+JRBO,2).EQ.KRB) GO TO 1

      IA=IJKS(1,K)
      J1=ICGES(K)
      J2=J1+NCGES(K)-1

C  LOOP OVER B BLOCK ELEMENTS BUILDING NET x NET LINEAR SYSTEM

      DO 2 IE=1,NET
      DO 2 IV=1,NETP
    2 A(IE,IV)=0.D0

      DO 6 J=J1,J2
      L=LIBUF(J)

      DO 4 IE=1,NET
      DO 4 IV=1,NET
      BB=COFINF(J,IE,IV)
      A(IE,IV)=A(IE,IV)+BB
    4 A(IE,NETP)=A(IE,NETP)+BB*BUFIF8(L,IV)

    6 CONTINUE

C  TEST AND CORRECT FOR NO COUPLING

      DO 7 IE=1,NET
      DO 8 IV=1,NET
      IF (A(IE,IV).NE.0.D0) GO TO 7
    8 CONTINUE
      GO TO 5
    7 CONTINUE
      GO TO 9

    5 DO 46 J=J1,J2
      L=LIBUF(J)
      DO 44 IE=1,NET
      BB=.0001D0*TFINS(J)
      A(IE,IE)=A(IE,IE)+BB
   44 A(IE,NETP)=A(IE,NETP)+BB*BUFIF8(L,IE)
   46 CONTINUE

    9 CONTINUE

C  SOLVE LINEAR SYSTEM AND PUT RESULT IN DUNK()

      CALL LINSOV (NET,A,B,DET,$MXNUMEQ)

      GO TO (11,12,13,14,15,16),KDIRS(J1)

   11 IF (DET.EQ.0.D0) THEN
         DO 21 IV=1,NET
   21    DUNK(IA+1,JA,KA,IV)=0.D0
      ELSE
         DO 31 IV=1,NET
   31    DUNK(IA+1,JA,KA,IV)=B(IV)
      ENDIF
      GO TO 1

   12 IF (DET.EQ.0.D0) THEN
         DO 22 IV=1,NET
   22    DUNK(IA,JA+1,KA,IV)=0.D0
      ELSE
         DO 32 IV=1,NET
   32    DUNK(IA,JA+1,KA,IV)=B(IV)
      ENDIF
      GO TO 1

   13 IF (DET.EQ.0.D0) THEN
         DO 23 IV=1,NET
   23    DUNK(IA,JA,KA+1,IV)=0.D0
      ELSE
         DO 33 IV=1,NET
   33    DUNK(IA,JA,KA+1,IV)=B(IV)
      ENDIF
      GO TO 1

   14 IF (DET.EQ.0.D0) THEN
         DO 24 IV=1,NET
   24    DUNK(IA-1,JA,KA,IV)=0.D0
      ELSE
         DO 34 IV=1,NET
   34    DUNK(IA-1,JA,KA,IV)=B(IV)
      ENDIF
      GO TO 1

   15 IF (DET.EQ.0.D0) THEN
         DO 25 IV=1,NET
   25    DUNK(IA,JA-1,KA,IV)=0.D0
      ELSE
         DO 35 IV=1,NET
   35    DUNK(IA,JA-1,KA,IV)=B(IV)
      ENDIF
      GO TO 1

   16 IF (DET.EQ.0.D0) THEN
         DO 26 IV=1,NET
   26    DUNK(IA,JA,KA-1,IV)=0.D0
      ELSE
         DO 36 IV=1,NET
   36    DUNK(IA,JA,KA-1,IV)=B(IV)
      ENDIF

    1 CONTINUE

      END
