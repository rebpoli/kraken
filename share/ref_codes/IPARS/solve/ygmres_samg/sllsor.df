C  SLLSOR.F - LINE SOR LINEAR SOLVER

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE SLLSOR   (N_COF,N_DUNK,N_RESID,NEQ,LIN,NERR)
C  SUBROUTINE SLLSORW  (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                     KEYOUT,NBLK,COF,DUNK,RESID)
C  SUBROUTINE SLRNULL1 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                     KEYOUT,NBLK,COF,DUNK,RESID)
C  SUBROUTINE SLRNULL2 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                     KEYOUT,NBLK,COF,DUNK,RESID)
C  SUBROUTINE SLLSORI  (NERR,KINP)

C  CODE HISTORY:

C  JOHN WHEELER     9/15/97    INITIAL CODE
C  JOHN WHEELER     10/9/97    ARBITRARY NUMBER OF EQUATIONS
C  JOHN WHEELER    11/12/97    MULTIPLE FAULT BLOCKS
C  JOHN WHEELER     4/10/98    OPTIMISE SOR FACTOR AND INPUT CONTROL DATA
C  JOHN WHEELER     4/14/98    CHANGE ERROR RETURN FOR TIME STEP CUT
C  YURI VASSILEVSKI 12/9/00    CHANGE LSOR names for SLLSOR
C  YURI VASSILEVSKI 12/12/00   REPLACE all KEYWORDS "NUMEQ" by NEQ (MEQ)

C*********************************************************************
      SUBROUTINE SLLSOR (N_COF,N_DUNK,N_RESID,NEQ,LIN,NERR)
C*********************************************************************

C  Line SOR executive routine

C  N_DUNK  = GRID-ELEMENT ARRAY NUMBER FOR LINEAR SOLUTION (INPUT, INTEGER)

C  N_COF  = GRID-ELEMENT ARRAY NUMBER FOR JACOBIAN COEFFICIENTS (INPUT, INTEGER)
C           COF(I,J,K,N,L,M) ==> COEFFICIENT M OF EQUATION L

C           7 POINT TEMPLATE ($NUMCOF=7)
C           COF(I,J,K,1,L,M) ==> DIAGONAL
C           COF(I,J,K,2,L,M) ==> X-
C           COF(I,J,K,3,L,M) ==> X+
C           COF(I,J,K,4,L,M) ==> Y-
C           COF(I,J,K,5,L,M) ==> Y+
C           COF(I,J,K,6,L,M) ==> Z-
C           COF(I,J,K,7,L,M) ==> Z+

C  N_RESID= GRID-ELEMENT ARRAY NUMBER FOR RESIDUALS (INPUT, INTEGER)
C           RESID(I,J,K,N) ==> RESIDUAL OF EQUATION N

C  NEQ    = NUMBER OF EQUATIONS (INPUT, INTEGER)

C  LIN    = NUMBER OF LINEAR ITERATIONS (INPUT/OUTPUT, INTEGER)

C  NERR = ERROR KEY STEPPED BY ONE FOR EACH ERROR
C         (INPUT AND OUTPUT, INTEGER )

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'layout.h'

      INCLUDE 'sllsorc.h'

      REAL*8 RMXB,T,TT,RMXS(1),DUB,DSOR,RED

      EXTERNAL SLLSORW,SLRNULL1,SLRNULL2

      MINLIN=15+MAXHR/2
      MAXLIN=5.*MINLIN+.1*MAXHR*MAXHR
      LINN=2.001+.3*MAXHR
      NSFT=1
      NDIV=0

      MEQ=NEQ
      ISOR(1)=3
      ISOR(2)=N_COF
      ISOR(3)=N_DUNK
      ISOR(4)=N_RESID
      SORTOLT=25.D0*SORTOL

      ITLIN=0
      RMXB=0.D0
      RMXZ=0.D0
      DO 11 L=1,MEQ
   11 RTOTZ(L)=0.D0
      T=0.D0

C  START ITERATION LOOP

    1 ITLIN=ITLIN+1
      RMX=0.D0
      DO 14 L=1,MEQ
   14 RTOT(L)=0.D0

      KRB=1
      CALL CALLWORK(SLLSORW,ISOR)
$MANY      CALL TIMON(4)
$MANY      CALL UPDATE(N_DUNK,1)
$MANY      CALL TIMOFF(4)
      KRB=0
      CALL CALLWORK(SLLSORW,ISOR)
$MANY      CALL TIMON(4)
$MANY      RMXS(1)=RMX
$MANY      CALL MAXIT(1,RMXS)
$MANY      CALL SUMIT(MEQ,RTOT)
$MANY      RTOT(MEQ+1)=RMXS(1)
$MANY      CALL SPREAD8(MEQ+1,RTOT)
$MANY      RMX=RTOT(MEQ+1)
$MANY      CALL TIMOFF(4)

      IF (T.EQ.0.D0) THEN
$MANY      CALL TIMON(4)
$MANY      RMXS(1)=RMXZ
$MANY      CALL MAXIT(1,RMXS)
$MANY      CALL SUMIT(MEQ,RTOTZ)
$MANY      RTOTZ(MEQ+1)=RMXS(1)
$MANY      CALL SPREAD8(MEQ+1,RTOTZ)
$MANY      RMXZ=RTOTZ(MEQ+1)
$MANY      CALL TIMOFF(4)
         T=SORTOL*RMXZ
         TT=ABS(RTOTZ(1))
         DO 8 L=2,MEQ
         IF (ABS(RTOTZ(L)).GT.TT) TT=ABS(RTOTZ(L))
    8    CONTINUE
         TT=SORTOLT*TT
         IF (LEVELC.AND.BUGKEY(7)) THEN
            WRITE(NFOUT,9) T,TT
            WRITE(*,9) T,TT
    9       FORMAT(' LINEAR MAX TOL',G12.4,', TOTAL TOL',G12.4)
         ENDIF
      ENDIF

C  CHECK CONVERGENCE

c     IF (ITLIN.GE.MINLIN.AND.RMX.LT.T) THEN
c        DO 5 L=1,MEQ
c        IF (ABS(RTOT(L)).GT.TT) GO TO 6
c   5    CONTINUE
c        GO TO 4
c     ENDIF

C  ADJUST SOR FACTOR, TRACE OUTPUT, AND NORMALIZE

    6 NSFT=NSFT+1
      IF (NSFT.GT.4.OR.ITLIN.EQ.1) NSFT=4

      IF (ITLIN.LT.MAXLIN) THEN

$MANY      CALL TIMON(4)
$MANY      CALL UPDATE(N_DUNK,1)
$MANY      CALL TIMOFF(4)

         IF (MOD(ITLIN,LINN).EQ.1) THEN

            IF (RMXB.EQ.0.D0) RMXB=RMXZ
            RED=RMX/RMXB

c           IF (LEVELC.AND.BUGKEY(7)) THEN
c              WRITE(NFOUT,2) ITLIN,RMX,RED,FSORT(NSORT),
c    &         (RTOT(L),L=1,MEQ)
c              WRITE(*,2) ITLIN,RMX,RED,FSORT(NSORT),
c    &         (RTOT(L),L=1,MEQ)
c           ENDIF
            RMXB=RMX

            IF (RED.GT..99D0) THEN
               NDIV=0
            ELSE
               NDIV=NDIV+1
            ENDIF
            IF (NDIV.LT.4) NSFT=1

            

         ENDIF

         IF (ITLIN.lt.LIN) GO TO 1
      ENDIF

c   4 IF (LEVELC.AND.BUGKEY(7))
c    &  WRITE(NFOUT,2) ITLIN,RMX,RMX/RMXB,FSORT(NSORT),(RTOT(L),L=1,MEQ)
c   2 FORMAT(' LIN IT',I4,' MAX R',G10.3,' REDUC.',F8.5,' SOR FAC',F6.3/
c    & ' TOT Ri',6G10.3)
      LIN=ITLIN

c     IF (RMX.GT.5.D0*T) THEN
c        NERR=NERR+1
c        RETURN
c     ENDIF

C  OPTIMISE SOR FACTOR

      IF (.NOT.SOROPT) RETURN

      MSORT(NSORT)=MSORT(NSORT)+1
      LSORT(NSORT,MSORT(NSORT))=ITLIN
      NSORT=NSORT+1
      IF (NSORT.GT.2) NSORT=1
      IF (MSORT(1).GT.2.AND.MSORT(2).GT.2) THEN
         MSORT(1)=0
         MSORT(2)=0
         L=0
         IF (LSORT(1,1).LT.LSORT(2,1).AND.LSORT(1,2).LT.LSORT(2,2)
     &      .AND.LSORT(1,3).LT.LSORT(2,3)) L=1
         IF (LSORT(2,1).LT.LSORT(1,1).AND.LSORT(2,2).LT.LSORT(1,2)
     &      .AND.LSORT(2,3).LT.LSORT(1,3)) L=2

         IF (L.GT.0) THEN
            M=1
            IF (L.EQ.1) M=2
            DSOR=.005+.03D0*(2.D0-FSORT(NSORT))
            IF (FSORT(L).LT.FSORT(M)) THEN
               FSORT(M)=FSORT(L)-DSOR
            ELSE
               FSORT(M)=FSORT(L)+DSOR
            ENDIF
         ENDIF
      ENDIF

      END
C*********************************************************************
      SUBROUTINE PRJBLNC (N_COF,N_DUNK,N_RESID,NEQ)
C*********************************************************************

C  Projection balance executive routine

C  N_DUNK  = GRID-ELEMENT ARRAY NUMBER FOR LINEAR SOLUTION (INPUT, INTEGER)

C  N_COF  = GRID-ELEMENT ARRAY NUMBER FOR JACOBIAN COEFFICIENTS (INPUT, INTEGER)
C           COF(I,J,K,N,L,M) ==> COEFFICIENT M OF EQUATION L

C           7 POINT TEMPLATE ($NUMCOF=7)
C           COF(I,J,K,1,L,M) ==> DIAGONAL
C           COF(I,J,K,2,L,M) ==> X-
C           COF(I,J,K,3,L,M) ==> X+
C           COF(I,J,K,4,L,M) ==> Y-
C           COF(I,J,K,5,L,M) ==> Y+
C           COF(I,J,K,6,L,M) ==> Z-
C           COF(I,J,K,7,L,M) ==> Z+

C  N_RESID= GRID-ELEMENT ARRAY NUMBER FOR RESIDUALS (INPUT, INTEGER)
C           RESID(I,J,K,N) ==> RESIDUAL OF EQUATION N

C  NEQ    = NUMBER OF EQUATIONS (INPUT, INTEGER)

C*********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'layout.h'

      INCLUDE 'sllsorc.h'

      REAL*8 DUB

      EXTERNAL SLRNULL1,SLRNULL2

      MEQ=NEQ
      NSIZS=NUMBLK*$MXNUMEQ*($MXNUMEQ+1)
      NSIZR=NUMBLK*$MXNUMEQ
      ISOR(1)=3
      ISOR(2)=N_COF
      ISOR(3)=N_DUNK
      ISOR(4)=N_RESID
$MANY      CALL TIMON(4)
$MANY          CALL UPDATE(N_DUNK,1)
$MANY      CALL TIMOFF(4)

               DO 7 N=1,NUMBLK
               DO 7 L=1,NEQ
               DO 7 M=1,NEQ+1
    7          S(L,M,N)=0.D0
               CALL CALLWORK(SLRNULL1,ISOR)
$MANY      CALL TIMON(4)
$MANY          CALL SUMIT(NSIZS,S)
$MANY      CALL TIMOFF(4)
               IF (MYPRC.EQ.0) THEN
                  DO 12 N=1,NUMBLK
   12             CALL LINSOV(MEQ,S(1,1,N),RNUL(1,N),DUB,$MXNUMEQ)
               ENDIF
$MANY      CALL TIMON(4)
$MANY          CALL SPREAD8(NSIZR,RNUL)
$MANY      CALL TIMOFF(4)
               CALL CALLWORK(SLRNULL2,ISOR)
$MANY      CALL TIMON(4)
$MANY          CALL UPDATE(N_DUNK,1)
$MANY      CALL TIMOFF(4)
      END

C*********************************************************************
      SUBROUTINE SLLSORW (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                  KEYOUT,NBLK,COF,DUNK,RESID)
C*********************************************************************
 
C  ROUTINE MAKES ONE LINE SOR ITERATION.  THIS IS A WORK ROUTINE.

C  COF(I,J,K,N,L,M)  = JACOBIAN COEFFICIENTS (INPUT, REAL*4)

C  DUNK(I,J,K,L) = UNKNOWNS (OUTPUT, REAL*8)

C  RESID(I,J,K,L)= RESIDUALS (INPUT, REAL*8)

C***********************************************************************
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'

      INCLUDE 'sllsorc.h'

      INTEGER JL1V(KDIM),JL2V(KDIM),KEYOUT(*)
      REAL*4 COF(*)
      REAL*8 DUNK(*),RESID(*),FSOR
      REAL*8 DUB1,DUB2,DUB3,A(IDIM,$MXNUMEQ,3*$MXNUMEQ),R(IDIM,$MXNUMEQ)

      GO TO (41,42,43,44),NSFT
   41 FSOR=1
      GO TO 49
   42 FSOR=.5D0+.5D0*FSORT(NSORT)
      GO TO 49
   43 FSOR=.1D0+.9D0*FSORT(NSORT)
      GO TO 49
   44 FSOR=FSORT(NSORT)

   49 CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)
      JKO=JOFF+KOFF

C  SET SOME INDEX OFFSETS
C  OFF=I+(J-1)*IDIM+(K-1)*IDIM*JDIM+(L-1)*IDIM*JDIM*KDIM
C      +(M-1)*IDIM*JDIM*KDIM*$NUMCOF+(N-1)*IDIM*JDIM*KDIM*$NUMCOF*MEQ

      M2=IDIM
      M3=M2*JDIM
      M4=M3*KDIM
      M5=M4*$NUMCOF
      M6=M5*MEQ

C  INITIALIZE

      IF (ITLIN.EQ.1.AND.KRB.EQ.1) THEN

         LOF=-M4
         DO 12 L=1,MEQ
         LOF=LOF+M4
         KOF=LOF-M3
         DO 12 K=1,KDIM
         KOF=KOF+M3
         JOF=KOF-M2
         DO 12 J=1,JDIM
         JOF=JOF+M2
         IOF=JOF
         DO 12 I=1,IDIM
         IOF=IOF+1
   12    DUNK(IOF)=0.D0

         KOF=(KL1-2)*M3
         DO 13 K=KL1,KL2
         JL1=JL1V(K)
         JL2=JL2V(K)
         KOF=KOF+M3
         JOF=KOF+(JL1-2)*M2
         DO 13 J=JL1,JL2
         JOF=JOF+M2
         IOF=JOF+IL1-1
         DO 13 I=IL1,IL2
         IOF=IOF+1
         IF (KEYOUT(IOF).EQ.1) THEN
            LOF=IOF-M4
            DO 30 L=1,MEQ
            LOF=LOF+M4
            IF (ABS(RESID(LOF)).GT.RMXZ) RMXZ=ABS(RESID(LOF))
   30       RTOTZ(L)=RTOTZ(L)+RESID(LOF)
         ENDIF
   13    CONTINUE
      ENDIF

      MEQM=MEQ-1
      MEQP=MEQ+1
      MEQ2=2*MEQ
      MEQ3=3*MEQ

C  START ONE HALF OF A LINE SOR ITERATION

      KOF=(KL1-2)*M3
      DO 1 K=KL1,KL2
      KK=K+JKO
      JL1=JL1V(K)
      JL2=JL2V(K)
      KOF=KOF+M3
      JOF=KOF+(JL1-2)*M2
      DO 1 J=JL1,JL2
      JOF=JOF+M2
      JJ=J+KK
      IF (MOD(JJ,2).NE.KRB) GO TO 1

C  SET UP FOR ONE LINE

      N=0
      IOF=JOF+IL1-1

      DO 2 I=IL1,IL2
      IOF=IOF+1
      IF (KEYOUT(IOF).NE.1) GO TO 2
      N=N+1
      LOF=IOF-M5
      LLOF=IOF-M4

      DO 16 L=1,MEQ
      LOF=LOF+M5
      LLOF=LLOF+M4
      DUB2=RESID(LLOF)
      MOF=LOF-M6
      MMOF=IOF-M4

      DO 15 M=1,MEQ
      MOF=MOF+M6
      MMOF=MMOF+M4

      A(N,L,M+MEQ)=COF(MOF)
      DUB2=DUB2-COF(MOF)*DUNK(MMOF)

      MOFC=MOF+M4
      IF (I.GT.1) THEN
         A(N,L,M)=COF(MOFC)
         DUB2=DUB2-COF(MOFC)*DUNK(MMOF-1)
      ENDIF

      MOFC=MOFC+M4
      IF (I.LT.IDIM) THEN
         A(N,L,M+MEQ2)=COF(MOFC)
         DUB2=DUB2-COF(MOFC)*DUNK(MMOF+1)
      ENDIF

      MOFC=MOFC+M4
      IF (J.GT.1) DUB2=DUB2-COF(MOFC)*DUNK(MMOF-M2)

      MOFC=MOFC+M4
      IF (J.LT.JDIM) DUB2=DUB2-COF(MOFC)*DUNK(MMOF+M2)

      MOFC=MOFC+M4
      IF (K.GT.1) DUB2=DUB2-COF(MOFC)*DUNK(MMOF-M3)

      MOFC=MOFC+M4
      IF (K.LT.KDIM) DUB2=DUB2-COF(MOFC)*DUNK(MMOF+M3)

   15 CONTINUE
      IF (ABS(DUB2).GT.RMX) RMX=ABS(DUB2)
      RTOT(L)=RTOT(L)+DUB2
   16 R(N,L)=DUB2

    2 CONTINUE

C  SOLVE FOR ONE LINE

      IF (N.EQ.0) GO TO 1
      NM1=N-1

C  FORWARD ELIMINATION

      DO 17 L=1,MEQM
      LM=L+MEQ
      LP=L+MEQP
      DUB1=A(1,L,LM)
      DUB3=R(1,L)
      DO 17 LL=L+1,MEQ
      DUB2=A(1,LL,LM)/DUB1
      R(1,LL)=R(1,LL)-DUB2*DUB3
      DO 17 M=LP,MEQ3
   17 A(1,LL,M)=A(1,LL,M)-DUB2*A(1,L,M)

      LC=MEQ3
      DO 18 NN=2,N
      NNM=NN-1

      DO 19 L=1,MEQ
      LM=L+MEQ
      LP=L+1
      DUB1=A(NNM,L,LM)
      DUB3=R(NNM,L)
      DO 19 LL=1,MEQ
      DUB2=A(NN,LL,L)/DUB1
      R(NN,LL)=R(NN,LL)-DUB2*DUB3
      DO 19 M=LP,MEQ2
   19 A(NN,LL,M)=A(NN,LL,M)-DUB2*A(NNM,L,M+MEQ)

      IF (NN.EQ.N) LC=MEQ2
      DO 20 L=1,MEQM
      LM=L+MEQ
      LP=L+MEQP
      DUB1=A(NN,L,LM)
      DUB3=R(NN,L)
      DO 20 LL=L+1,MEQ
      DUB2=A(NN,LL,LM)/DUB1
      R(NN,LL)=R(NN,LL)-DUB2*DUB3
      DO 20 M=LP,LC
   20 A(NN,LL,M)=A(NN,LL,M)-DUB2*A(NN,L,M)

   18 CONTINUE

C  BACK SUBSTITUTION

      R(N,MEQ)=R(N,MEQ)/A(N,MEQ,MEQ2)
      DO 21 L=MEQM,1,-1
      DUB1=R(N,L)
      DO 22 M=L+1,MEQ
   22 DUB1=DUB1-R(N,M)*A(N,L,M+MEQ)
   21 R(N,L)=DUB1/A(N,L,L+MEQ)

      DO 24 NN=NM1,1,-1
      NNP=NN+1
      DO 24 L=MEQ,1,-1
      DUB1=R(NN,L)
      DO 25 M=1,MEQ
   25 DUB1=DUB1-R(NNP,M)*A(NN,L,M+MEQ2)
      DO 26 M=L+1,MEQ
   26 DUB1=DUB1-R(NN,M)*A(NN,L,M+MEQ)
   24 R(NN,L)=DUB1/A(NN,L,L+MEQ)

C  UPDATE

      N=0
      IOF=JOF+IL1-1
      DO 9 I=IL1,IL2
      IOF=IOF+1
      IF (KEYOUT(IOF).EQ.1) THEN
         N=N+1
         LOF=IOF
         DO 27 L=1,MEQ
         DUNK(LOF)=DUNK(LOF)+FSOR*R(N,L)
   27    LOF=LOF+M4
      ENDIF
    9 CONTINUE

    1 CONTINUE
      END
C*********************************************************************
      SUBROUTINE SLRNULL1(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                  KEYOUT,NBLK,COF,DUNK,RESID)
C*********************************************************************
 
C  ROUTINE STARTS NULL SUM OF THE RESIDUALS.  THIS IS A WORK ROUTINE.

C  COF(I,J,K,N,L,M)  = JACOBIAN COEFFICIENTS (INPUT, REAL*4)

C  DUNK(I,J,K,L) = UNKNOWNS (OUTPUT, REAL*8)

C  RESID(I,J,K,L)= RESIDUALS (INPUT, REAL*8)

C***********************************************************************

      INCLUDE 'control.h'

      INCLUDE 'sllsorc.h'

      INTEGER JL1V(KDIM),JL2V(KDIM), KEYOUT(IDIM,JDIM,KDIM)
      REAL*4    COF(IDIM,JDIM,KDIM,$NUMCOF,*)
      REAL*8    DUNK(IDIM,JDIM,KDIM,*), RESID(IDIM,JDIM,KDIM,*)
      REAL*8    DUB1,C1,C2,C3,C4,C5,C6,C7

      MEQP=MEQ+1

      DO 1 K=KL1,KL2
      JL1=JL1V(K)
      JL2=JL2V(K)
      DO 1 J=JL1,JL2
      DO 1 I=IL1,IL2
      IF (KEYOUT(I,J,K).EQ.1) THEN

         DO 3 L=1,MEQ
         DUB1=RESID(I,J,K,L)
         DO 4 M=1,MEQ
         C1=COF(I,J,K,1,L+(M-1)*MEQ)
         C2=COF(I,J,K,2,L+(M-1)*MEQ)
         C3=COF(I,J,K,3,L+(M-1)*MEQ)
         C4=COF(I,J,K,4,L+(M-1)*MEQ)
         C5=COF(I,J,K,5,L+(M-1)*MEQ)
         C6=COF(I,J,K,6,L+(M-1)*MEQ)
         C7=COF(I,J,K,7,L+(M-1)*MEQ)
         IF (KEYOUT(I-1,J,K).EQ.0) C2 = 0d0
         IF (KEYOUT(I+1,J,K).EQ.0) C3 = 0d0
         IF (KEYOUT(I,J-1,K).EQ.0) C4 = 0d0
         IF (KEYOUT(I,J+1,K).EQ.0) C5 = 0d0
         IF (KEYOUT(I,J,K-1).EQ.0) C6 = 0d0
         IF (KEYOUT(I,J,K+1).EQ.0) C7 = 0d0

         S(L,M,NBLK)=S(L,M,NBLK)+C1+C2+C3+C4+C5+C6+C7


         DUB1=DUB1-C1*DUNK(I,J,K,M)

         IF (I.GT.1) DUB1=DUB1-C2*DUNK(I-1,J,K,M)

         IF (I.LT.IDIM) DUB1=DUB1-C3*DUNK(I+1,J,K,M)

         IF (J.GT.1) DUB1=DUB1-C4*DUNK(I,J-1,K,M)

         IF (J.LT.JDIM) DUB1=DUB1-C5*DUNK(I,J+1,K,M)

         IF (K.GT.1) DUB1=DUB1-C6*DUNK(I,J,K-1,M)

         IF (K.LT.KDIM) DUB1=DUB1-C7*DUNK(I,J,K+1,M)

    4    CONTINUE
    3    S(L,MEQP,NBLK)=S(L,MEQP,NBLK)+DUB1

      ENDIF
    1 CONTINUE

      END
C*********************************************************************
      SUBROUTINE SLRNULL2(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                  KEYOUT,NBLK,COF,DUNK,RESID)
C*********************************************************************
 
C  ROUTINE FINISHES NULL SUM OF THE RESIDUALS.  THIS IS A WORK ROUTINE.

C  COF(I,J,K,N,L,M)  = JACOBIAN COEFFICIENTS (INPUT, REAL*4)

C  DUNK(I,J,K,L) = UNKNOWNS (OUTPUT, REAL*8)

C  RESID(I,J,K,L)= RESIDUALS (INPUT, REAL*8)

C***********************************************************************

      INCLUDE 'control.h'

      INCLUDE 'sllsorc.h'

      INTEGER JL1V(KDIM),JL2V(KDIM), KEYOUT(IDIM,JDIM,KDIM)
      REAL*4    COF(IDIM,JDIM,KDIM,$NUMCOF,*)
      REAL*8    DUNK(IDIM,JDIM,KDIM,*), RESID(IDIM,JDIM,KDIM,*)
      REAL*8    DUB

      DO 2 L=1,MEQ
      DUB=RNUL(L,NBLK)
      DO 2 K=KL1,KL2
      JL1=JL1V(K)
      JL2=JL2V(K)
      DO 2 J=JL1,JL2
      DO 2 I=IL1,IL2
      IF (KEYOUT(I,J,K).EQ.1) DUNK(I,J,K,L)=DUNK(I,J,K,L)+DUB
    2 CONTINUE

      END
C*********************************************************************
      SUBROUTINE SLLSORI (NERR)
C*********************************************************************
 
C  ROUTINE INITIALIZES LINE SOR SOLVER

C  NERR = Error number stepped by 1 on error (input & output, INTEGER)

C***********************************************************************
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INCLUDE 'sllsorc.h'

c     IF (KINP.EQ.1) THEN
         MAXHR=0
         DO 1 I=1,NUMBLK
         CALL BLKDIM(I,NX,NY,NZ,KERR)
         J=MAX(NY,NZ)
         IF (J.GT.MAXHR) MAXHR=J
    1    CONTINUE
         DUB=MAXHR
         DUB=1.D0-4.9348/DUB**2
         DUB=2.D0/(1+SQRT(1.D0-DUB**2))
         FSORT(1)=DUB+.01D0*(2.D0-DUB)
         FSORT(2)=DUB-.03D0*(2.D0-DUB)
         NSORT=1
         DO 5 I=1,2
         MSORT(I)=0
         DO 5 J=1,3
    5    LSORT(I,J)=0
         SOROPT=.TRUE.
         SORTOL=.01D0
c     ENDIF


      END
