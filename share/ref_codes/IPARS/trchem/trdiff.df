C SGT  01/01/07-09/31/09  MODS TO TRCHEM FOR DISPERSION AND TO ACCOMODATE 
C                         EVMFEM METHOD WHEN COUPLED TO FLOW. NOTE: IN THE 
C                         CURRENT EVMFEM SETTING, ONLY DIAGONAL DIFFUSION 
C                         TENSOR SUPPORTED (DUE TO THE SOLVER LIMITATION).
C =========================================================================
C  TRDIFF.F - TRCHEM MODEL DIFFUSION/DISPERSION ROUTINES

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE TRDIFFUSE(NALPHA,FLAG,NERR)
C  SUBROUTINE TRGET_DISP_W(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                          KL2,KEYOUT,NBLK,DISP,POR,ROCK,SATN,SAT,
C                          VVELN,VVEL)
C  SUBROUTINE TRDIFF_CPCONC_W(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
C                             KL1,KL2,KEYOUT,NBLK,CONC,CONCNEW)
C  SUBROUTINE TRDIFF_MATSET_W(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
C                             KL1,KL2,KEYOUT,NBLK,DISP,CONC,PHISOLD,
C                             PHIS,TRCOF,TRRESID,TRDUNK)
C  SUBROUTINE TRDIFF_DECAYBAL_W(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
C                             KL1,KL2,KEYOUT,NBLK,CONC,PHIS,ROCK)
C =========================================================================
      SUBROUTINE TRDIFFUSE(NALPHA,FLAG,NERR)
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'trarydat.h'
      INCLUDE 'blkary.h'

      LOGICAL ONCEONLY

      INTEGER NALPHA,NERR,FLAG,ID

C SOLVER INFORMATION
      INTEGER SL_ITER
      REAL*4  SL_RES

      INTEGER IGET_DISP(8), IDIFF_CPCONC(3), IDIFF_MATSET(8),
     &        IDIFF_DECAYBAL_W(4)
$MANY$DUAL     &       ,NBEMTR($MXMOD)
      EXTERNAL TRGET_DISP_W, TRDIFF_MATSET_W, 
     &     TRDIFF_CPCONC_W, TRDIFF_DECAYBAL_W

C ROUTINES FOR BDARY CONDITIONS
      EXTERNAL TRBD_DIFF_W,TRBD_DIFFFLUX_W

      DATA ONCEONLY /.TRUE./
      DATA IGET_DISP /8*0/, IDIFF_CPCONC/3*0/, IDIFF_MATSET /8*0/,
     &     IDIFF_DECAYBAL_W /4*0/
$MANY$DUAL     &    ,NBEMTR/$MXMOD*0/

C -------------------------------------------------------------
C      WRITE(*,*) "ENTER TRDIFF_STEP(NERR): FLOWTIM=",  FLOWTIM,
C     &           " FLOWTIM_NEW=", FLOWTIM_NEW,
C     &           " CONCTIM_HALF=", CONCTIM_HALF

      CALPHA = NALPHA

      IF (ONCEONLY) THEN
         ONCEONLY=.FALSE.

         IGET_DISP(1)=7
         IGET_DISP(2)=N_DISP
         IGET_DISP(3)=N_POR
         IGET_DISP(4)=N_ROCK
         IGET_DISP(5)=N_SATUN
         IGET_DISP(6)=N_SATU
         IGET_DISP(7)=N_TRVELN
         IGET_DISP(8)=N_TRVEL

         IDIFF_MATSET(1)=7
         IDIFF_MATSET(2)=N_DISP
         IDIFF_MATSET(4)=N_PHISN
         IDIFF_MATSET(5)=N_PHIS
         IDIFF_MATSET(6)=N_TRCOF
         IDIFF_MATSET(7)=N_TRRESID
         IDIFF_MATSET(8)=N_TRDUNK

         IDIFF_CPCONC(1)=2
         IDIFF_CPCONC(3)=N_TRDUNK

         IDIFF_DECAYBAL_W(1)=3
         IDIFF_DECAYBAL_W(3)=N_PHIS
         IDIFF_DECAYBAL_W(4)=N_ROCK

$MANY$DUAL         NBEMTR($TMODEL)=3
$MANY$DUAL         NBEMTR($TRMODEL)=1
$MANY$DUAL         NBEMTR($HMODEL)=10
$MANY$DUAL         NBEMTR($IMODEL)=32
$MANY$DUAL       IF(MODELON($XMODEL)) THEN
$MANY$DUAL          NBEMTR($XMODEL)=NBEMC($XMODEL)
$MANY$DUAL       ENDIF
$MANY$DUAL       IF(MODELON($XMMODEL)) THEN
$MANY$DUAL          NBEMTR($XMMODEL)=NBEMC($XMMODEL)
$MANY$DUAL       ENDIF

      ENDIF

      IDIFF_MATSET(3)=N_CONCARR (NALPHA)
      IDIFF_CPCONC(2)=N_CONCARR (NALPHA)
      IDIFF_DECAYBAL_W(2)=N_CONCARR (NALPHA)

C    COMPUTE THE FACTOR FOR INTERPOLATION BETWEEN TIME STEPS 
C    IN FORM APPROPRIATE FOR TIMES AT WHICH TRVEL ARRAY IS AVAILABLE.
      IF(FLAG.EQ.OLD) THEN
         CFAC=(CONCTIM-FLOWTIM)/DELTIM
      ELSEIF(FLAG.EQ.NEW) THEN
         CFAC=(CONCTIM_NEW-FLOWTIM)/DELTIM
      ELSEIF(FLAG.EQ.MID) THEN
         CFAC=(CONCTIM_HALF-FLOWTIM)/DELTIM
      ELSE
         STOP 'ERROR IN TRDIFF_STEP: UNSUPPORTED INTERPOLATION FLAG !!'
      ENDIF

C     CALCULATE THE DISPERSION TENSOR
      CALL CALLWORK (TRGET_DISP_W,IGET_DISP)

C NEED TO UPDATE DISP TO GET CORRECT VALUE AT GHOST CELLS
$MANY      CALL TIMON(22)
$MANY      DO ID = 1, 9
$MANY        CALL UPDATE(N_DISPARR(ID),1)
$MANY      ENDDO
$MANY      CALL TIMOFF(22)

C    RE-COMPUTE THE FACTOR FOR INTERPOLATION BETWEEN TIME STEPS 
C    IN FORM APPROPRIATE FOR TIMES AT WHICH PHIS ARRAY IS AVAILABLE.
      IF(FLAG.EQ.OLD) THEN
         CFAC=0.0D0
      ELSEIF(FLAG.EQ.NEW) THEN
         CFAC=1.0D0
      ELSEIF(FLAG.EQ.MID) THEN
         CFAC=0.5D0
      ELSE
         STOP 'ERROR IN TRDIFF_STEP: UNSUPPORTED INTERPOLATION FLAG !!'
      ENDIF

C     SET UP THE MATRIX AND RIGHT-HAND-SIDE FOR THE DISCRETE FORM
      CALL CALLWORK (TRDIFF_MATSET_W, IDIFF_MATSET)

C     APPLY BDARY CONDITIONS
      CALL CALLWORK (TRBD_DIFF_W, IDIFF_MATSET)

C     APPLY FAULT BLOCK INTERFACE CONDITIONS
$MORTAR      CALL TRMORTAR_DIFF(NALPHA,NERR)
$DUAL      CALL DUALDDTR(NERR)
$DUAL      CALL TRDUALJR(NALPHA,NERR)

C     CALL LINEAR SOLVER
$GMRES      IF(IDDLINSOL.EQ.1) THEN
C USE TEMPORARY VALUES OF GMRES SOLVER TOLERANCE
$GMRES         CALL TMP_LSOLTOL(NERR,0)
$GMRES         CALL TICAMG(N_TRCOF,N_TRDUNK,N_TRRESID,1,SL_ITER,NERR)
C RESTORE ORIGINAL VALUES OF GMRES SOLVER TOLERANCE
$GMRES         CALL TMP_LSOLTOL(NERR,1)
$GMRES      ENDIF
$TICAMA      IF(IDDLINSOL.EQ.2) CALL TICAMAT(N_TRCOF,N_TRDUNK,N_TRRESID
$TICAMA     &                               ,1,SL_ITER,NERR)
$PCG         IF(IDDLINSOL.EQ.3) THEN
$PCG            STOP 'ERROR: PCG FOR DIFF-DISP NOT TESTED YET!'
$PCG         ENDIF

C     UPDATE CONCENTRATION
      CALL CALLWORK (TRDIFF_CPCONC_W, IDIFF_CPCONC)

C     COUNT BALANCE FOR RADIODECAY
      IF (USE_RADIODECAY) THEN
         CALL CALLWORK (TRDIFF_DECAYBAL_W, IDIFF_DECAYBAL_W)
      ENDIF

C     POSTPROCESS SOLUTION TO GET BDARY FLUXES
      CALL CALLWORK (TRBD_DIFFFLUX_W, IDIFF_MATSET)

      END

C =========================================================================
      SUBROUTINE TRGET_DISP_W(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                        KL2,KEYOUT,NBLK,DISP,POR,ROCK,SATN,SAT,
     &                        VVELN,VVEL)
C =========================================================================
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'trmodel.h'

      INTEGER IL1, IL2, JL1, JL2, KL1, KL2, IOFF, JOFF, KOFF, IERR
      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),   KEYOUT(IDIM,JDIM,KDIM)
      INTEGER I, J, K, ND
      INTEGER IPH
      REAL*8 VELX1,VELX2,VELY1,VELY2,VELZ1,VELZ2
      REAL*8 VVELN(IDIM,JDIM,KDIM,NPHASES,3),
     &       VVEL(IDIM,JDIM,KDIM,NPHASES,3),VCELLX(2),VCELLY(2),
     &       VCELLZ(2),SPEED(2),DISPL(2),DISPT(2),MLCDIFF(NPHASES),
     &       EQLCOEF(NPHASES)
      
      REAL*8  DISP(IDIM,JDIM,KDIM,9),TEMP,DX,DY,DZ
      REAL*4  POR(IDIM,JDIM,KDIM)
      REAL*8 SAT(IDIM,JDIM,KDIM,NPHASES-1), 
     &       SATN(IDIM,JDIM,KDIM,NPHASES-1),SW,SO

      INTEGER ROCK(IDIM,JDIM,KDIM)

C     GET THE GLOBAL OFFSETS FOR BLOCK
      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,IERR)
      IF(IERR.NE.0) THEN
         STOP 'ERROR IN BLKOFF CALL IN TRGET_DISP_W !!'
         RETURN
      ENDIF

C    CONSIDER ONLY THE MOL DIFF SO FAR -->
      IF (NPHASES.EQ.1) THEN
        DO K = KL1,KL2
          DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
              IF (KEYOUT(I,J,K).EQ.1) THEN
                DO ND = 1, 9
                   DISP(I,J,K,ND) = 0.0D0
                ENDDO

C     GET ELEMENT DIMENSIONS TO NORMALIZE FACE FLUXES (RETRIEVE
C     DARCY VELOCITY)
                DX=DXREC(I+IOFF,NBLK)
                DY=DYREC(J+JOFF,NBLK)
                DZ=DZREC(K+KOFF,NBLK)

C               NOTICE THAT POR NOW IS POR VOLUME, CU-FT
                DISP(I,J,K,1) = POR(I,J,K) *
     &             MOLDIFF(ROCK(I,J,K),CALPHA,1) 
                DISP(I,J,K,5) = POR(I,J,K) *
     &             MOLDIFF(ROCK(I,J,K),CALPHA,1)
                DISP(I,J,K,9) = POR(I,J,K) *
     &             MOLDIFF(ROCK(I,J,K),CALPHA,1)  

C        WRITE(*,*)  "   ROCK(",I,",",J,",",K,")=", ROCK(I,J,K)
C        WRITE(*,*) 'POR,ROCK, CALPHA', POR(I,J,K), ROCK(I,J,K), CALPHA
C        WRITE(*,*) 'MOLDIFF',  MOLDIFF(ROCK(I,J,K), CALPHA, 1)
C        WRITE(*,*) 'DISP11,22,33=', DISP(I,J,K,1),DISP(I,J,K,5),
C     &               DISP(I,J,K,9)

C DISPERSION (IMPLICITLY MULTIPLIED BY CELL VOLUME ACCOUNTED FOR LATER
C IN TRDIFF_MATSET_W)
                VELX1=VVELN(I,J,K,1,1)
     &            + CFAC*(VVEL(I,J,K,1,1)-VVELN(I,J,K,1,1))
                VELX2=VVELN(I+1,J,K,1,1)
     &            + CFAC*(VVEL(I+1,J,K,1,1)-VVELN(I+1,J,K,1,1))
                VCELLX(1)=0.5D0*(VELX1+VELX2)*DX
                VELY1=VVELN(I,J,K,1,2)
     &            + CFAC*(VVEL(I,J,K,1,2)-VVELN(I,J,K,1,2))
                VELY2=VVELN(I,J+1,K,1,2)
     &            + CFAC*(VVEL(I,J+1,K,1,2)-VVELN(I,J+1,K,1,2))
                VCELLY(1)=0.5D0*(VELY1+VELY2)*DY
                VELZ1=VVELN(I,J,K,1,3)
     &            + CFAC*(VVEL(I,J,K,1,3)-VVELN(I,J,K,1,3))
                VELZ2=VVELN(I,J,K+1,1,3)
     &            + CFAC*(VVEL(I,J,K+1,1,3)-VVELN(I,J,K+1,1,3))
                VCELLZ(1)=0.5D0*(VELZ1+VELZ2)*DZ
                SPEED(1)=SQRT((VCELLX(1))**2 + (VCELLY(1))**2 + 
     &                        (VCELLZ(1))**2)
                DISPL(1)=LONGDISP(ROCK(I,J,K),1)
                DISPT(1)=TRANSDISP(ROCK(I,J,K),1)

                IF($NUMTRCOF.EQ.7) GOTO 7
                IF((SPEED(1).GT.0.0D0).AND.((DISPL(1).GT.0.0D0).OR.
     &             (DISPT(1).GT.0.0D0))) THEN
                    DISP(I,J,K,1) = DISP(I,J,K,1)
     &               +((DISPL(1)-DISPT(1))*VCELLX(1)*VCELLX(1)/SPEED(1)
     &               +SPEED(1)*DISPT(1))
                    DISP(I,J,K,2) = DISP(I,J,K,2)
     &               +((DISPL(1)-DISPT(1))*VCELLX(1)*VCELLY(1)/SPEED(1))
                    DISP(I,J,K,3) = DISP(I,J,K,3)
     &               +((DISPL(1)-DISPT(1))*VCELLX(1)*VCELLZ(1)/SPEED(1))
                    DISP(I,J,K,4)=DISP(I,J,K,2)
                    DISP(I,J,K,5) = DISP(I,J,K,5) 
     &               +((DISPL(1)-DISPT(1))*VCELLY(1)*VCELLY(1)/SPEED(1) 
     &               +SPEED(1)*DISPT(1))
                    DISP(I,J,K,6) = DISP(I,J,K,6)
     &               +((DISPL(1)-DISPT(1))*VCELLY(1)*VCELLZ(1)/SPEED(1))
                    DISP(I,J,K,7)=DISP(I,J,K,3)
                    DISP(I,J,K,8)=DISP(I,J,K,6)
                    DISP(I,J,K,9) = DISP(I,J,K,9)
     &               +((DISPL(1)-DISPT(1))*VCELLZ(1)*VCELLZ(1)/SPEED(1)
     &               +SPEED(1)*DISPT(1))
                ENDIF
    7           CONTINUE
C
C        WRITE(*,*) 'DISP11,12,13,21,22,23,31,32,33=', DISP(I,J,K,1),
C     &              DISP(I,J,K,2),DISP(I,J,K,3),DISP(I,J,K,4),
C     &              DISP(I,J,K,5),DISP(I,J,K,6),DISP(I,J,K,7),
C     &              DISP(I,J,K,8),DISP(I,J,K,9)

              ENDIF
            ENDDO
          ENDDO
        ENDDO

      ELSE IF (NPHASES.EQ.2) THEN

        DO K = KL1,KL2
          DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
              IF (KEYOUT(I,J,K).EQ.1) THEN
                DO ND = 1, 9
                   DISP(I,J,K,ND) = 0.0D0
                ENDDO

C     GET ELEMENT DIMENSIONS TO NORMALIZE FACE FLUXES (RETRIEVE
C     DARCY VELOCITY)
                DX=DXREC(I+IOFF,NBLK)
                DY=DYREC(J+JOFF,NBLK)
                DZ=DZREC(K+KOFF,NBLK)

                DO IPH=1,NPHASES
                   EQLCOEF(IPH)=EQLBCOEF(NPHASES+1-IPH,CALPHA)
                   MLCDIFF(IPH)=
     &                MOLDIFF(ROCK(I,J,K),CALPHA,NPHASES+1-IPH)
                ENDDO
                TEMP = SATN(I,J,K,1) + CFAC*(SAT(I,J,K,1)-SATN(I,J,K,1))
                TEMP = POR(I,J,K)*(TEMP*EQLCOEF(2)*MLCDIFF(2) + 
     &                            (1.0D0-TEMP)*EQLCOEF(1)*MLCDIFF(1))
                DISP(I,J,K,1) = TEMP 
                DISP(I,J,K,5) = TEMP
                DISP(I,J,K,9) = TEMP

C DISPERSION (IMPLICITLY MULTIPLIED BY CELL VOLUME ACCOUNTED FOR LATER
C IN TRDIFF_MATSET_W)
                DO IPH=1,NPHASES
                   VELX1=VVELN(I,J,K,IPH,1)
     &               + CFAC*(VVEL(I,J,K,IPH,1)-VVELN(I,J,K,IPH,1))
                   VELX2=VVELN(I+1,J,K,IPH,1)
     &               + CFAC*(VVEL(I+1,J,K,IPH,1)-VVELN(I+1,J,K,IPH,1))
                   VCELLX(IPH)=0.5D0*(VELX1+VELX2)*DX
                   VELY1=VVELN(I,J,K,IPH,2)
     &               + CFAC*(VVEL(I,J,K,IPH,2)-VVELN(I,J,K,IPH,2))
                   VELY2=VVELN(I,J+1,K,IPH,2)
     &               + CFAC*(VVEL(I,J+1,K,IPH,2)-VVELN(I,J+1,K,IPH,2))
                   VCELLY(IPH)=0.5D0*(VELY1+VELY2)*DY
                   VELZ1=VVELN(I,J,K,IPH,3)
     &               + CFAC*(VVEL(I,J,K,IPH,3)-VVELN(I,J,K,IPH,3))
                   VELZ2=VVELN(I,J,K+1,IPH,3)
     &               + CFAC*(VVEL(I,J,K+1,IPH,3)-VVELN(I,J,K+1,IPH,3))
                   VCELLZ(IPH)=0.5D0*(VELZ1+VELZ2)*DZ
                   SPEED(IPH)=SQRT((VCELLX(IPH))**2 + (VCELLY(IPH))**2
     &                           + (VCELLZ(IPH))**2)
                   DISPL(IPH)=LONGDISP(ROCK(I,J,K),IPH)
                   DISPT(IPH)=TRANSDISP(ROCK(I,J,K),IPH)

                   IF($NUMTRCOF.EQ.7) GOTO 8
                   IF((SPEED(IPH).GT.0.0D0).AND.((DISPL(IPH).GT.0.0D0)
     &            .OR.(DISPT(IPH).GT.0.0D0))) THEN
                      DISP(I,J,K,1) = DISP(I,J,K,1)+((DISPL(IPH)
     &                 -DISPT(IPH))*VCELLX(IPH)*VCELLX(IPH)/SPEED(IPH)
     &                 +SPEED(IPH)*DISPT(IPH))*EQLCOEF(IPH)
                      DISP(I,J,K,2) = DISP(I,J,K,2)+((DISPL(IPH)
     &                 -DISPT(IPH))*VCELLX(IPH)*VCELLY(IPH)/SPEED(IPH))
     &                 *EQLCOEF(IPH)
                      DISP(I,J,K,3) = DISP(I,J,K,3)+((DISPL(IPH)
     &                 -DISPT(IPH))*VCELLX(IPH)*VCELLZ(IPH)/SPEED(IPH))
     &                 *EQLCOEF(IPH)
                      DISP(I,J,K,4)=DISP(I,J,K,2)
                      DISP(I,J,K,5) = DISP(I,J,K,5)+((DISPL(IPH)
     &                 -DISPT(IPH))*VCELLY(IPH)*VCELLY(IPH)/SPEED(IPH)
     &                 +SPEED(IPH)*DISPT(IPH))*EQLCOEF(IPH)
                      DISP(I,J,K,6) = DISP(I,J,K,6)+((DISPL(IPH)
     &                 -DISPT(IPH))*VCELLY(IPH)*VCELLZ(IPH)/SPEED(IPH))
     &                 *EQLCOEF(IPH)
                      DISP(I,J,K,7)=DISP(I,J,K,3)
                      DISP(I,J,K,8)=DISP(I,J,K,6)
                      DISP(I,J,K,9) = DISP(I,J,K,9)+((DISPL(IPH)
     &                 -DISPT(IPH))*VCELLZ(IPH)*VCELLZ(IPH)/SPEED(IPH)
     &                 +SPEED(IPH)*DISPT(IPH))*EQLCOEF(IPH)
                   ENDIF
    8              CONTINUE
                ENDDO

              ENDIF
            ENDDO
          ENDDO
        ENDDO

      ELSEIF(NPHASES.EQ.3) THEN

        DO K = KL1,KL2
          DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
              IF (KEYOUT(I,J,K).EQ.1) THEN
                DO ND = 1, 9
                   DISP(I,J,K,ND) = 0.0D0
                ENDDO

C     GET ELEMENT DIMENSIONS TO NORMALIZE FACE FLUXES (RETRIEVE
C     DARCY VELOCITY)
                DX=DXREC(I+IOFF,NBLK)
                DY=DYREC(J+JOFF,NBLK)
                DZ=DZREC(K+KOFF,NBLK)

                DO IPH=1,NPHASES
                   EQLCOEF(IPH)=EQLBCOEF(IPH,CALPHA)
                   MLCDIFF(IPH)=MOLDIFF(ROCK(I,J,K),CALPHA,IPH)
                ENDDO
                SW = SATN(I,J,K,1)+CFAC*(SAT(I,J,K,1)-SATN(I,J,K,1))
                SO = SATN(I,J,K,2)+CFAC*(SAT(I,J,K,2)-SATN(I,J,K,2))
                TEMP = POR(I,J,K)*(SW*EQLCOEF(1)*MLCDIFF(1)
     &                            +SO*EQLCOEF(2)*MLCDIFF(2)
     &                            +(1-SW-SO)*EQLCOEF(3)*MLCDIFF(3))
                DISP(I,J,K,1) = TEMP
                DISP(I,J,K,5) = TEMP
                DISP(I,J,K,9) = TEMP

C DISPERSION (IMPLICITLY MULTIPLIED BY CELL VOLUME ACCOUNTED FOR LATER
C IN TRDIFF_MATSET_W)
                DO IPH=1,NPHASES
                   VELX1=VVELN(I,J,K,IPH,1)
     &               + CFAC*(VVEL(I,J,K,IPH,1)-VVELN(I,J,K,IPH,1))
                   VELX2=VVELN(I+1,J,K,IPH,1)
     &               + CFAC*(VVEL(I+1,J,K,IPH,1)-VVELN(I+1,J,K,IPH,1))
                   VCELLX(IPH)=0.5D0*(VELX1+VELX2)*DX
                   VELY1=VVELN(I,J,K,IPH,2)
     &               + CFAC*(VVEL(I,J,K,IPH,2)-VVELN(I,J,K,IPH,2))
                   VELY2=VVELN(I,J+1,K,IPH,2)
     &               + CFAC*(VVEL(I,J+1,K,IPH,2)-VVELN(I,J+1,K,IPH,2))
                   VCELLY(IPH)=0.5D0*(VELY1+VELY2)*DY
                   VELZ1=VVELN(I,J,K,IPH,3)
     &               + CFAC*(VVEL(I,J,K,IPH,3)-VVELN(I,J,K,IPH,3))
                   VELZ2=VVELN(I,J,K+1,IPH,3)
     &               + CFAC*(VVEL(I,J,K+1,IPH,3)-VVELN(I,J,K+1,IPH,3))
                   VCELLZ(IPH)=0.5D0*(VELZ1+VELZ2)*DZ
                   SPEED(IPH)=SQRT((VCELLX(IPH))**2 + (VCELLY(IPH))**2
     &                           + (VCELLZ(IPH))**2)
                   DISPL(IPH)=LONGDISP(ROCK(I,J,K),IPH)
                   DISPT(IPH)=TRANSDISP(ROCK(I,J,K),IPH)

                   IF($NUMTRCOF.EQ.7) GOTO 9
                   IF((SPEED(IPH).GT.0.0D0).AND.((DISPL(IPH).GT.0.0D0)
     &            .OR.(DISPT(IPH).GT.0.0D0))) THEN
                      DISP(I,J,K,1) = DISP(I,J,K,1)+((DISPL(IPH)
     &                 -DISPT(IPH))*VCELLX(IPH)*VCELLX(IPH)/SPEED(IPH)
     &                 +SPEED(IPH)*DISPT(IPH))*EQLCOEF(IPH)
                      DISP(I,J,K,2) = DISP(I,J,K,2)+((DISPL(IPH)
     &                 -DISPT(IPH))*VCELLX(IPH)*VCELLY(IPH)/SPEED(IPH))
     &                 *EQLCOEF(IPH)
                      DISP(I,J,K,3) = DISP(I,J,K,3)+((DISPL(IPH)
     &                 -DISPT(IPH))*VCELLX(IPH)*VCELLZ(IPH)/SPEED(IPH))
     &                 *EQLCOEF(IPH)
                      DISP(I,J,K,4)=DISP(I,J,K,2)
                      DISP(I,J,K,5) = DISP(I,J,K,5)+((DISPL(IPH)
     &                 -DISPT(IPH))*VCELLY(IPH)*VCELLY(IPH)/SPEED(IPH)
     &                 +SPEED(IPH)*DISPT(IPH))*EQLCOEF(IPH)
                      DISP(I,J,K,6) = DISP(I,J,K,6)+((DISPL(IPH)
     &                 -DISPT(IPH))*VCELLY(IPH)*VCELLZ(IPH)/SPEED(IPH))
     &                 *EQLCOEF(IPH)
                      DISP(I,J,K,7)=DISP(I,J,K,3)
                      DISP(I,J,K,8)=DISP(I,J,K,6)
                      DISP(I,J,K,9) = DISP(I,J,K,9)+((DISPL(IPH)
     &                 -DISPT(IPH))*VCELLZ(IPH)*VCELLZ(IPH)/SPEED(IPH)
     &                 +SPEED(IPH)*DISPT(IPH))*EQLCOEF(IPH)
                   ENDIF
    9              CONTINUE
                ENDDO

              ENDIF
            ENDDO
          ENDDO
        ENDDO

      ELSE
         STOP 'ERROR IN TRGET_DISP_W: UNSUPPORTED NO. OF PHASES !!'
      ENDIF

      RETURN
      END

C =========================================================================
      SUBROUTINE TRDIFF_CPCONC_W(IDIM,JDIM,KDIM,LDIM,
     &     IL1,IL2,JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,CONC,CONCNEW)
C =========================================================================
      IMPLICIT NONE
      INCLUDE 'control.h'

      INTEGER IL1, IL2, JL1, JL2, KL1, KL2
      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),   KEYOUT(IDIM,JDIM,KDIM)
      INTEGER I, J, K
      REAL*8  CONC(IDIM,JDIM,KDIM), CONCNEW(IDIM,JDIM,KDIM)

C UPDATE THE CONCENTRATIONS
      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
               IF (KEYOUT(I,J,K).EQ.1) THEN
                  CONC(I,J,K) = CONCNEW(I,J,K)
               ENDIF
            ENDDO
         ENDDO
      ENDDO

      END

C =========================================================================
      SUBROUTINE TRDIFF_MATSET_W(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                           KL1,KL2,KEYOUT,NBLK,DISP,CONC,PHISOLD,
     &                           PHIS,TRCOF,TRRESID,TRDUNK)
C =========================================================================
C  SET UP THE MATRIX TRCOF AND RIGHT HAND SIDE TRRESID
C  ALSO SET INITIAL VALUE FOR TRDUNK (USE THE OLD CONC)

C  NOTICE FOR THE DISCRETE FORM THE DIFFUSION:
C    THE COEFFICIENT PHIS AT ACCUMULATION TERM HAS VOLUME FACTOR; 
C    THE DISPERSION/DIFFUSION TENSOR DISP?? ALSO HAS VOLUME FACTOR THROUGH POR. 
 
C  TRCOF(I,J,K,N)= MATRIX COEFFICIENTS (REAL*4) FOR CONCENTRATION
C        TRCOF(I,J,K,1)  ==> DIAGONAL
C        TRCOF(I,J,K,2)  ==> X-     TRCOF(I,J,K,3)  ==> X+
C        TRCOF(I,J,K,4)  ==> Y-     TRCOF(I,J,K,5)  ==> Y+
C        TRCOF(I,J,K,6)  ==> Z-     TRCOF(I,J,K,7)  ==> Z+
C        TRCOF(I,J,K,8)  ==> X-Y-   TRCOF(I,J,K,9)  ==> X+Y-
C        TRCOF(I,J,K,10) ==> X-Y+   TRCOF(I,J,K,11) ==> X+Y+
C        TRCOF(I,J,K,12) ==> X-Z-   TRCOF(I,J,K,13) ==> X+Z-
C        TRCOF(I,J,K,14) ==> Y-Z-   TRCOF(I,J,K,15) ==> Y+Z-
C        TRCOF(I,J,K,16) ==> X-Z+   TRCOF(I,J,K,17) ==> X+Z+
C        TRCOF(I,J,K,18) ==> Y-Z+   TRCOF(I,J,K,19) ==> Y+Z+
C ----------------------------------------------------------------------
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'layout.h'

      INTEGER IL1, IL2, JL1, JL2, KL1, KL2
      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),   KEYOUT(IDIM,JDIM,KDIM)
      INTEGER I, J, K
      INTEGER IOFF,JOFF,KOFF,IERR, L
      REAL*8 DELXY1,DELXY2,DELYZ1,DELYZ2,DELZX1,DELZX2
      REAL*8 DFFX,DFFXM,DFFY,DFFYM,DFFZ,DFFZM
      REAL*8  DISP(IDIM,JDIM,KDIM,9),   CONC(IDIM,JDIM,KDIM),
     &        PHISOLD(IDIM,JDIM,KDIM),  PHIS(IDIM,JDIM,KDIM),
     &        TRRESID(IDIM,JDIM,KDIM),  TRDUNK(IDIM,JDIM,KDIM)
      REAL*4  TRCOF(IDIM,JDIM,KDIM,$NUMTRCOF)
      
      REAL*8 DELX,DELY,DELZ, DELX1,DELY1,DELZ1, CUR_DISP, CUR_COF


C INITIALIZE THE MATRIX AND RESIDUAL
      DO K = 1,KDIM
         DO J = 1,JDIM
            DO I = 1,IDIM
               TRRESID(I,J,K) = 0.D0
               DO L = 1,$NUMTRCOF
                  TRCOF(I,J,K,L) = 0.D0
               ENDDO
            ENDDO
         ENDDO
      ENDDO

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,IERR)
      IF(IERR.NE.0) RETURN

C GET THE FIRST CONTRIBUTION FOR THE DIAGONAL ELEMENT OF THE MATRIX
C AND GET THE RIGHT HAND SIDE TRRESID AND THE GUESS VALUE FOR TRDUNK
      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
               IF (KEYOUT(I,J,K).EQ.1) THEN
                  TRCOF(I,J,K,1)= (PHISOLD(I,J,K)+CFAC*(PHIS(I,J,K)
     &                            -PHISOLD(I,J,K)))/CDELTIM
                  TRRESID(I,J,K)= (PHISOLD(I,J,K)+CFAC*(PHIS(I,J,K)
     &                            -PHISOLD(I,J,K)))*CONC(I,J,K)/CDELTIM
                  TRDUNK(I,J,K) = CONC(I,J,K)
               ENDIF
            ENDDO
         ENDDO
      ENDDO


C EDGES WITH NORMALS IN X-DIRECTION
      DO K=KL1,KL2
         JL1=JL1V(K)
         JL2=JL2V(K)
         DO J=JL1,JL2
            DO I=IL1,IL2
               IF ( ((KEYOUT(I-1,J,K).EQ.1).OR.(KEYOUT(I-1,J,K).EQ.-1))
     &               .AND.(KEYOUT(I,J,K).EQ.1) )  THEN
                  DELX=DXREC(I+IOFF,NBLK)      ! DX(I)
                  DELX1=DXREC(I-1+IOFF,NBLK)   ! DX(I-1)
C      USE THE SIMPLE AVERAGE FOR DISP, MAY USE INTERPOLATION IN FUTURE
C      (BECAUSE NOT SURE THAT INTERPOLATION IS BETTER THAN SIMPLE AVERAGE YET)
                  DFFX=DISP(I,J,K,1)
                  DFFXM=DISP(I-1,J,K,1)
                  IF(DABS(DFFX).GT.0.D0.AND.DABS(DFFXM).GT.0.D0) THEN
                     CUR_COF = 2.0D0/(DELX/DFFX+DELX1/DFFXM)/DELX
                  ELSE
                     CUR_COF = 0.D0
                  ENDIF
                  TRCOF(I,J,K,1)=TRCOF(I,J,K,1) + CUR_COF
                  TRCOF(I,J,K,2)=TRCOF(I,J,K,2) - CUR_COF
               ENDIF
               IF ( ((KEYOUT(I+1,J,K).EQ.1).OR.(KEYOUT(I+1,J,K).EQ.-1))
     &               .AND.(KEYOUT(I,J,K).EQ.1) )  THEN 
                  DELX=DXREC(I+IOFF,NBLK)      ! DX(I)
                  DELX1=DXREC(I+1+IOFF,NBLK)   ! DX(I+1)
                  DFFX=DISP(I+1,J,K,1)
                  DFFXM=DISP(I,J,K,1)
                  IF(DABS(DFFX).GT.0.D0.AND.DABS(DFFXM).GT.0.D0) THEN
                     CUR_COF = 2.0D0/(DELX/DFFXM+DELX1/DFFX)/DELX
                  ELSE
                     CUR_COF = 0.D0
                  ENDIF
                  TRCOF(I,J,K,1)=TRCOF(I,J,K,1) + CUR_COF
                  TRCOF(I,J,K,3)=TRCOF(I,J,K,3) - CUR_COF
               ENDIF
            ENDDO
         ENDDO
      ENDDO


C EDGES WITH NORMALS IN Y-DIRECTION
      DO K=KL1,KL2
         JL1=JL1V(K)
         JL2=JL2V(K)
         DO J=JL1,JL2
            DO I=IL1,IL2
               IF ( ((KEYOUT(I,J-1,K).EQ.1).OR.(KEYOUT(I,J-1,K).EQ.-1))
     &               .AND.(KEYOUT(I,J,K).EQ.1) )  THEN 
                  DELY=DYREC(J+JOFF,NBLK)      ! DY(J)
                  DELY1=DYREC(J-1+JOFF,NBLK)   ! DY(J-1)
                  DFFY=DISP(I,J,K,5)
                  DFFYM=DISP(I,J-1,K,5)
                  IF(DABS(DFFY).GT.0.D0.AND.DABS(DFFYM).GT.0.D0) THEN
                     CUR_COF = 2.0D0/(DELY/DFFY+DELY1/DFFYM)/DELY
                  ELSE
                     CUR_COF = 0.D0
                  ENDIF
                  TRCOF(I,J,K,1) = TRCOF(I,J,K,1) + CUR_COF
                  TRCOF(I,J,K,4) = TRCOF(I,J,K,4) - CUR_COF
               ENDIF
               IF ( ((KEYOUT(I,J+1,K).EQ.1).OR.(KEYOUT(I,J+1,K).EQ.-1))
     &               .AND.(KEYOUT(I,J,K).EQ.1) )  THEN 
                  DELY=DYREC(J+JOFF,NBLK)      ! DY(J)
                  DELY1=DYREC(J+1+JOFF,NBLK)   ! DY(J+1)
                  DFFY=DISP(I,J+1,K,5)
                  DFFYM=DISP(I,J,K,5)
                  IF(DABS(DFFY).GT.0.D0.AND.DABS(DFFYM).GT.0.D0) THEN
                     CUR_COF = 2.0D0/(DELY/DFFYM+DELY1/DFFY)/DELY
                  ELSE
                     CUR_COF = 0.D0
                  ENDIF
                  TRCOF(I,J,K,1) = TRCOF(I,J,K,1) + CUR_COF
                  TRCOF(I,J,K,5) = TRCOF(I,J,K,5) - CUR_COF
               ENDIF
            ENDDO
         ENDDO
      ENDDO


C EDGES WITH NORMALS IN Z-DIRECTION
      DO K=KL1,KL2
         JL1=JL1V(K)
         JL2=JL2V(K)
         DO J=JL1,JL2
            DO I=IL1,IL2
               IF ( ((KEYOUT(I,J,K-1).EQ.1).OR.(KEYOUT(I,J,K-1).EQ.-1))
     &               .AND.(KEYOUT(I,J,K).EQ.1) )  THEN 
                  DELZ = DZREC(K+KOFF,NBLK)       ! DZ(J)
                  DELZ1 = DZREC(K-1+KOFF,NBLK)    ! DZ(J-1)
                  DFFZ=DISP(I,J,K,9)
                  DFFZM=DISP(I,J,K-1,9)
                  IF(DABS(DFFZ).GT.0.D0.AND.DABS(DFFZM).GT.0.D0) THEN
                     CUR_COF = 2.0D0/(DELZ/DFFZ+DELZ1/DFFZM)/DELZ
                  ELSE
                     CUR_COF = 0.D0
                  ENDIF
                  TRCOF(I,J,K,1) = TRCOF(I,J,K,1) + CUR_COF
                  TRCOF(I,J,K,6) = TRCOF(I,J,K,6) - CUR_COF
               ENDIF
               IF ( ((KEYOUT(I,J,K+1).EQ.1).OR.(KEYOUT(I,J,K+1).EQ.-1))
     &               .AND.(KEYOUT(I,J,K).EQ.1) )  THEN 
                  DELZ = DZREC(K+KOFF,NBLK)       ! DZ(J)
                  DELZ1 = DZREC(K+1+KOFF,NBLK)    ! DZ(J+1)
                  DFFZ=DISP(I,J,K+1,9)
                  DFFZM=DISP(I,J,K,9)
                  IF(DABS(DFFZ).GT.0.D0.AND.DABS(DFFZM).GT.0.D0) THEN
                     CUR_COF = 2.0D0/(DELZ/DFFZM+DELZ1/DFFZ)/DELZ
                  ELSE
                     CUR_COF = 0.D0
                  ENDIF
                  TRCOF(I,J,K,1) = TRCOF(I,J,K,1) + CUR_COF
                  TRCOF(I,J,K,7) = TRCOF(I,J,K,7) - CUR_COF
               ENDIF
            ENDDO
         ENDDO
      ENDDO

C HANDLE THE FIRST ORDER DECAY CHEMICAL REACTION (RADIOACTIVE DECAY)
      IF (USE_RADIODECAY) THEN
C     NOTE CUR_COF IS THE LAMBDA;   LOG2=0.69314718D0 (SAVE COMPUTING TIME)
         CUR_COF = 0.69314718D0 / HALFLIFTIM(CALPHA)
         DO K = KL1,KL2
            DO J = JL1V(K),JL2V(K)
               DO I = IL1,IL2
                  IF (KEYOUT(I,J,K).EQ.1) THEN
                     TRCOF(I,J,K,1)=TRCOF(I,J,K,1)+ PHIS(I,J,K)*CUR_COF
                  ENDIF
               ENDDO
            ENDDO
         ENDDO
      ENDIF

      END

C =========================================================================
      SUBROUTINE TRDIFF_DECAYBAL_W(IDIM,JDIM,KDIM,LDIM,
     &     IL1,IL2,JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,
     &     CONC,PHIS, ROCK )
C =========================================================================

      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'trmodel.h'

      INTEGER IL1, IL2, JL1, JL2, KL1, KL2
      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),   KEYOUT(IDIM,JDIM,KDIM)
      INTEGER I, J, K

      INTEGER ROCK(IDIM,JDIM,KDIM)

      REAL*8  CONC(IDIM,JDIM,KDIM), PHIS(IDIM,JDIM,KDIM)
 
      REAL*8  SUMC($MXROCKTYPE)
      REAL*8  CUR_COF
      INTEGER NR

C HANDLE THE FIRST ORDER DECAY CHEMICAL REACTION (RADIOACTIVE DECAY)
C      IF (USE_RADIODECAY) THEN   ! ALREADY CHECK THAT ON DRIVER ROUTINE
C     NOTE CUR_COF IS THE LAMBDA;   LOG2=0.69314718D0 (SAVE COMPUTING TIME)
      DO NR = 1, NROCKTYPE
         SUMC(NR) = 0.D0
      ENDDO
      CUR_COF = 0.69314718D0 *  CDELTIM / HALFLIFTIM(CALPHA)
      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
               IF (KEYOUT(I,J,K).EQ.1) THEN
C     DBG CHECK
               IF ((ROCK(I,J,K).GT.NROCKTYPE).
     &             OR.(ROCK(I,J,K).LT.1))  THEN
                  WRITE(*,*)  " ERROR:  ROCK_TYPE OUT OF RANGE"
                  WRITE(*,*)  "   ROCK_TYPE(",I,",",J,",",K,")=", 
     &                         ROCK(I,J,K)
               ENDIF
                  SUMC(ROCK(I,J,K)) =  SUMC(ROCK(I,J,K))+
     &                     PHIS(I,J,K)*CUR_COF*CONC(I,J,K)
               ENDIF
            ENDDO
         ENDDO
      ENDDO

C UPDATE OVER ALL FAULTBLOCKS
      DO NR = 1, NROCKTYPE
         CBAL_DECAY(NR, CALPHA) = CBAL_DECAY(NR, CALPHA) + SUMC(NR)
         COUT_DECAY(CALPHA) = COUT_DECAY(CALPHA) + SUMC(NR)
      ENDDO

      END

C =========================================================================


