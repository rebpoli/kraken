C  TDUAL.F - SINGLE PHASE IMPLICIT MODEL DUAL APPROXIMATION MULTIBLOCK ROUTINES

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE TRDUALS  (NAPLPH,IFLG)
C  SUBROUTINE TRLODBUF (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                       KL2,KEYOUT,NBLK,CONC,TRSLP,NBUFDIM,BUFIF8,
C                       IFLG,FLMTR)
C  SUBROUTINE TRDUALR  (NALPHA)
C  SUBROUTINE TRRCVBUF (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                       KL2,KEYOUT,NBLK,CONC,NBUFDIM,BUFIF8)
C  SUBROUTINE TRDUALJR (NALPHA,NERR)
C  SUBROUTINE TRJRCAL  (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                       KEYOUT,NBLK,COF)
C  SUBROUTINE TRDADV   (NALPHA,NERR)
C  SUBROUTINE TRDADVW  (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                       KEYOUT,NBLK,VELX,VELY,VELZ,CONC,CONCOLD,PHISOLD)
C  SUBROUTINE TRDCSLP  (NALPHA)
C  SUBROUTINE TRDCSLPW (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                       KEYOUT,NBLK,CONC,TRSLP,NBUFDIM,BUFIF8)
C  SUBROUTINE TRDADVECT(NALPHA,NERR)
C  SUBROUTINE TRDADVW  (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
C                       KEYOUT,NBLK,VELX,VELY,VELZ,NBUFDIM,BUFIF8,CONC,
C                       CONCO,PHISO,TRSLP)
C  SUBROUTINE DUALDDTR (NERR)
C  SUBROUTINE IFDDTRAN ()
C  SUBROUTINE IFDDTRANW(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                       KL2,KEYOUT,NBLK,DMX,DMY,DMZ,NBUFDIM,BUFIF8)
C  SUBROUTINE IFGES8v2 (N_A,NBUF,NERR)
C  SUBROUTINE IFTOBUF8v2 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
C                         KL2,KEYOUT,NBLK,A,NBUFDIM,BUFIF8)

C  CODE HISTORY:

C  SUNIL G. THOMAS  3/24/08   DUAL APPROXIMATION FRAMEWORK ADDED.
C                            (BASED ON SINGLEI VERSION BY J. A. WHEELER. 
C                             NOTE: THIS IS A LINEAR SYSTEM UNLIKE THE 
C                             NON-LINEAR SYSTEMS FOR FLOW, WHETHER ONE 
C                             OR TWO-PHASE)
C  SUNIL G. THOMAS  6/20/08   SUBROUTINE MODIFICATIONS AND TESTING.

C*********************************************************************
      SUBROUTINE TRDUALS (NALPHA,IFLG)
C*********************************************************************

C  Loads buffers for advection contributions for the dual approximation 
C  block interfaces

C*********************************************************************
      IMPLICIT NONE
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'trarydat.h'
      INCLUDE 'trmodel.h'

      INTEGER IA(7),NALPHA,IFLG
      LOGICAL ONCEONLY
      DATA ONCEONLY /.TRUE./,IA/7*0/

      EXTERNAL TRLODBUF

      IF (NFACES.EQ.0) RETURN
      CALL TIMON(12)

      IF (ONCEONLY) THEN
         ONCEONLY=.FALSE.

         IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)'PROC',MYPRC,
     &    ' ENTERING SUBROUTINE TRDUALS, OLD TAG =',MSGTAG($TRMODEL+1)

         IA(1)=6
         IA(3)=N_TRSLP
         IA(4)=N_BUFDIM
         IA(5)=N_BUFIF
         IA(6)=N_I4U
         IA(7)=N_R8U

      ENDIF

C  PUT B BLOCK QUANTITIES FOR THE CONCENTRATION EQUATION IN INTERFACE 
C  BUFFERS

      I4UTIL=IFLG
      R8UTIL=TRFLXLMTR
      IA(2)=N_CONCARR(NALPHA)
      CALL CALLWORK(TRLODBUF,IA)

      CALL TIMOFF(12)

      RETURN
      END

C*********************************************************************
      SUBROUTINE TRDUALR (NALPHA)
C*********************************************************************

C  Receives buffers for advection contributions for dual approximation 
C  block interfaces

C*********************************************************************
      IMPLICIT NONE
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'trarydat.h'

      INTEGER IA(4),NALPHA
      LOGICAL ONCEONLY
      DATA ONCEONLY /.TRUE./,IA/4*0/

      EXTERNAL TRRCVBUF

      IF (NFACES.EQ.0) RETURN
      CALL TIMON(12)

      IF (ONCEONLY) THEN
         ONCEONLY=.FALSE.

         IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)'PROC',MYPRC,
     &    ' ENTERING SUBROUTINE TRDUALR, OLD TAG =',MSGTAG($TRMODEL+1)

         IA(1)=3
         IA(3)=N_BUFDIM
         IA(4)=N_BUFIF

      ENDIF
      
C  RECEIVE B BLOCK QUANTITIES FOR THE CONCENTRATION EQUATION IN 
C  INTERFACE BUFFERS

      IA(2)=N_CONCARR(NALPHA)
      CALL CALLWORK(TRRCVBUF,IA)

      CALL TIMOFF(12)

      RETURN
      END

C*********************************************************************
      SUBROUTINE TRDUALJR (NALPHA,NERR)
C*********************************************************************

C  Computes Jocabian and residual contributions for the dual 
C  approximation block interface

C*********************************************************************
      IMPLICIT NONE
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'trarydat.h'

      INTEGER IA(2),NALPHA,NERR
      LOGICAL ONCEONLY
      DATA ONCEONLY /.TRUE./,IA/2*0/

      EXTERNAL TRJRCAL

      IF (NFACES.EQ.0) RETURN
      CALL TIMON(12)

      IF (ONCEONLY) THEN
         ONCEONLY=.FALSE.

         IF (LEVELE.AND.BUGKEY(1)) WRITE (NFBUG,*)'PROC',MYPRC,
     &    ' ENTERING SUBROUTINE TDUALR, OLD TAG =',MSGTAG($TMODEL+1)

         IA(1)=1
         IA(2)=N_TRCOF
      ENDIF
      
C  COMPUTE JACOBIAN AND RESIDUAL CONTRIBUTIONS FOR THE WATER BALANCE

      CALL CALLWORK(TRJRCAL,IA)

      CALL TIMOFF(12)

      RETURN
      END

C*********************************************************************
      SUBROUTINE TRDCSLP(NALPHA)
C*********************************************************************
C  DRIVER ROUTINE TO COMPUTE ELEMENT "SLOPES" FOR ADVECTION SCALAR
C  VARIABLE FOR USE IN HIGHER ORDER GODUNOV FLUX RECONSTRUCTION.
C  INPUT:
C     NALPHA = TAG (NUMBER) OF SPECIES
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'trarydat.h'

      INTEGER NALPHA,ISLP(5)
      LOGICAL ONCEONLY
      EXTERNAL TRDCSLPW
      DATA ISLP/5*0/,ONCEONLY/.TRUE./

      IF(ONCEONLY) THEN
         ONCEONLY = .FALSE.
         ISLP (1) = 4
         ISLP (3) = N_TRSLP
         ISLP (4) = N_BUFDIM
         ISLP (5) = N_BUFIF
      ENDIF

      ISLP (2) = N_CONCARR(NALPHA)
      CALL CALLWORK(TRDCSLPW,ISLP)

      RETURN
      END

C*********************************************************************
      SUBROUTINE TRDADVECT(NALPHA,NERR)
C*********************************************************************
C  PERFORM ADVECTION AT THE INTERFACES BETWEEN FAULT BLOCKS
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'trarydat.h'
      INCLUDE 'trmodel.h'

      INTEGER NALPHA,NERR,IADV(10)
      LOGICAL ONCEONLY
      EXTERNAL TRDADVW
      DATA IADV/10*0/,ONCEONLY/.TRUE./
C -----------------------------------------------------
      IF(ONCEONLY) THEN
         ONCEONLY=.FALSE.
         IADV(1)=9
         IADV(2)=N_TRVX
         IADV(3)=N_TRVY
         IADV(4)=N_TRVZ
         IADV(5)=N_BUFDIM
         IADV(6)=N_BUFIF
         IADV(8)=N_CONCOLD
         IADV(9)=N_PHISN
         IADV(10)=N_TRSLP
      ENDIF

      CALPHA=NALPHA

      IADV(7)=N_CONCARR(NALPHA)
      CALL CALLWORK (TRDADVW,IADV)

      RETURN
      END

C*********************************************************************
      SUBROUTINE TRLODBUF (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &          KL2,KEYOUT,NBLK,CONC,TRSLP,NBUFDIM,BUFIF8,IFLG,FLMTR)
C*********************************************************************

C  PUT B BLOCK QUANTITIES FOR CONCENTRATION EQUATION IN INTERFACE 
C  BUFFERS

C  INPUT:

C  CONC(I,J,K) = COMPONENT CONCENTRATION, LB-M/CU-FT (INPUT, REAL*8)
C  TRSLP(I,J,K) = SCALAR ELEMENT SLOPES, LB-M/QU-FT (INPUT, REAL*8)
C  NBUFDIM = FIRST DIMENSION OF BUFIF8(,) (INPUT, INTEGER)
C  IFLG = FLAG FOR INCLUDING SCALAR ELEMENT SLOPE (INPUT, INTEGER)
C  FLMTR = FLUX LIMITER FOR SLOPE (INPUT, REAL*8)

C  OUTPUT:

C  BUFIF8(,1) = CONC(,,) = CONCENTRATION, LB-M/CU-FT (OUTPUT, REAL*8)

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'unitsex.h'
      INCLUDE 'layout.h'
      INCLUDE 'sblkc.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,NBUFDIM
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      INTEGER M,II,JJ,II1,II2,IA,JA,KA,IAG,JAG,KAG,K,NBT,NMT,
     &        IOFFA,JOFFA,KOFFA,MERR,IFLG,J1
      REAL*8 CONC(IDIM,JDIM,KDIM),BUFIF8(NBUFDIM,*),
     &       TRSLP(IDIM,JDIM,KDIM,3)
      REAL*8 FLMTR,DX,DY,DZ,DCONCX,DCONCY,DCONCZ

      IF (NPAI(NBLK).EQ.0) RETURN

      CALL BLKOFF(NBLK,IOFFA,JOFFA,KOFFA,MERR)

      DO 90 M=1,NPAI(NBLK)
      II1=IESNDI(M,NBLK)
      II2=II1+NESNDI(M,NBLK)-1
      NBT=NBSRI(M,NBLK)
      NMT=MODBLK(NBT)

      IF (NMT.EQ.$TRMODEL) THEN

C  IMPLICIT SINGLE PHASE MODEL TARGET

         DO 61 II=II1,II2

         K=KFESR(II)
         IA=IJKS(1,K)
         JA=IJKS(2,K)
         KA=IJKS(3,K)

         IF(IFLG.EQ.0) THEN
            BUFIF8(II,1)=CONC(IA,JA,KA)
         ELSEIF(IFLG.EQ.1) THEN
            IAG=IA+IOFFA
            JAG=JA+JOFFA
            KAG=KA+KOFFA
            DCONCX=0.5D0*DXREC(IAG,NBLK)*TRSLP(IA,JA,KA,1)*FLMTR
            DCONCY=0.5D0*DYREC(JAG,NBLK)*TRSLP(IA,JA,KA,2)*FLMTR
            DCONCZ=0.5D0*DZREC(KAG,NBLK)*TRSLP(IA,JA,KA,3)*FLMTR

            J1=ICGES(K)

            GO TO (11,12,13,14,15,16),KDIRS(J1)

   11       BUFIF8(II,1)=CONC(IA,JA,KA)+DCONCX
            GO TO 61

   12       BUFIF8(II,1)=CONC(IA,JA,KA)+DCONCY
            GO TO 61

   13       BUFIF8(II,1)=CONC(IA,JA,KA)+DCONCZ
            GO TO 61

   14       BUFIF8(II,1)=CONC(IA,JA,KA)-DCONCX
            GO TO 61

   15       BUFIF8(II,1)=CONC(IA,JA,KA)-DCONCY
            GO TO 61

   16       BUFIF8(II,1)=CONC(IA,JA,KA)-DCONCZ
            GO TO 61

         ELSE
            IF(LEVELC) WRITE(0,*) 'UNKNOWN FLAG IN TRLODBUF! QUITTING..'
            STOP
         ENDIF

   61    CONTINUE

      ELSE

         IF(LEVELC) 
     &   WRITE(0,*) 'IF TRMODEL IS PRESENT IT HAS TO BE DRIVING MODEL. '
     &             ,' USE FMODBLK TO ASSIGN MULTIPLE FLOWING MODELS.'
         STOP

      ENDIF

   90 CONTINUE

      RETURN
      END

C*********************************************************************
      SUBROUTINE TRRCVBUF (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                KL2,KEYOUT,NBLK,CONC,NBUFDIM,BUFIF8)
C*********************************************************************

C  COMPUTE JACOBIAN AND RESIDUAL CONTRIBUTIONS FOR THE BALANCE

C  COF(I,J,K,N) = JACOBIAN COEFFICIENTS (INPUT AND OUTPUT, REAL*4)

C  OUTPUT:

C  COFINF(,1,1) = DERIVATIVE OF Q     WRT C
C                                AiBl      Bl

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'layout.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      INTEGER J1,J2,I,J,K,L,K1,K2,IA,JA,KA,NBUFDIM
      REAL*8 CONC(IDIM,JDIM,KDIM),BUFIF8(NBUFDIM,*),CA,SCA,SDSA,
     &       CONCB

      IF (NIEBS(NBLK).EQ.0) RETURN

C  LOOP OVER A BLOCK INTERFACE ELEMENTS

      K1=IIEBS(NBLK)
      K2=K1+NIEBS(NBLK)-1
      DO 1 K=K1,K2
      J1=ICGES(K)
      J2=J1+NCGES(K)-1

      IA=IJKS(1,K)
      JA=IJKS(2,K)
      KA=IJKS(3,K)

C  LOOP OVER THE B BLOCK INTERFACE ELEMENTS

      SCA=0.D0
      SDSA=0.D0
      DO 2 J=J1,J2

C  COMPUTE COUPLING FOR A BLOCK INTERFACIAL CONCENTRATIONS

      L=LIBUF(J)
      CONCB=BUFIF8(L,1)*TDDFINS0(J)
      SCA=SCA+CONCB
      SDSA=SDSA+TDDFINS0(J)

    2 CONTINUE

      CA=SCA/SDSA

C  STORE REFERENCE SPECIES CONCENTRATIONS IN THE GHOST LAYERS FOR USE 
C  IN ADVECTION ACROSS THE FAULT BLOCK INTERFACES

      GO TO (11,12,13,14,15,16),KDIRS(J1)

   11 CONC(IA+1,JA,KA)=CA
      GO TO 17

   12 CONC(IA,JA+1,KA)=CA
      GO TO 17

   13 CONC(IA,JA,KA+1)=CA
      GO TO 17

   14 CONC(IA-1,JA,KA)=CA
      GO TO 17

   15 CONC(IA,JA-1,KA)=CA
      GO TO 17

   16 CONC(IA,JA,KA-1)=CA

   17 CONTINUE

    1 CONTINUE

      RETURN
      END

C*********************************************************************
      SUBROUTINE TRJRCAL (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &   KEYOUT,NBLK,TRCOF)
C*********************************************************************

C  COMPUTE JACOBIAN AND RESIDUAL CONTRIBUTIONS FOR THE BALANCE

C  COF(I,J,K,N) = JACOBIAN COEFFICIENTS (INPUT AND OUTPUT, REAL*4)

C  OUTPUT:

C  COFINF(,1,1) = DERIVATIVE OF Q     WRT C
C                                AiBl      Bl

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'layout.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      INTEGER J1,J2,I,J,K,L,K1,K2,IA,JA,KA,NMS
      REAL*4  TRCOF(IDIM,JDIM,KDIM,$NUMTRCOF)
      REAL*8  SDQDCA,TD

      IF (NIEBS(NBLK).EQ.0) RETURN

C  LOOP OVER A BLOCK INTERFACE ELEMENTS

      K1=IIEBS(NBLK)
      K2=K1+NIEBS(NBLK)-1
      DO 1 K=K1,K2
      J1=ICGES(K)
      J2=J1+NCGES(K)-1

      IA=IJKS(1,K)
      JA=IJKS(2,K)
      KA=IJKS(3,K)

C  SUM OVER THE B BLOCK INTERFACE ELEMENTS

      SDQDCA=0.D0
      DO 2 J=J1,J2

C  COMPUTE COUPLING

      L= LIBUF(J)
      TD=TDDFINS(J)
      SDQDCA=SDQDCA+TD
      COFINF(J,1,1)=-TD

    2 CONTINUE

C  STORE REFERENCE SPECIES STIFFNESS MATRIX COEFFICIENTS AND RESIDUALS
C  NOTE THAT ALL INTERFACE OFF-DIAGANOL COEFFICIENTS ARE CONSOLIDATED
C  IN ONE COEFFICIENT PER EQUATION

      GO TO (11,12,13,14,15,16),KDIRS(J1)

   11 TRCOF(IA,JA,KA,3)=-SDQDCA
      GO TO 17

   12 TRCOF(IA,JA,KA,5)=-SDQDCA
      GO TO 17

   13 TRCOF(IA,JA,KA,7)=-SDQDCA
      GO TO 17

   14 TRCOF(IA,JA,KA,2)=-SDQDCA
      GO TO 17

   15 TRCOF(IA,JA,KA,4)=-SDQDCA
      GO TO 17

   16 TRCOF(IA,JA,KA,6)=-SDQDCA

   17 TRCOF(IA,JA,KA,1)=TRCOF(IA,JA,KA,1)+SDQDCA

    1 CONTINUE

      RETURN
      END

C*********************************************************************
      SUBROUTINE DUALDDTR(NERR)
C*********************************************************************
C  This routine calls IFDDTRANW specific for time-variant tensors, in 
C  this case, only for the diffusion-dispersion tensor (for example 
C  this tensor can vary with concentration). Invoked by diffusion-
C  dispersion step TRDIFF
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INTEGER NERR
      LOGICAL ONCEONLY
      DATA ONCEONLY/.TRUE./

      CALL IFDDTRAN ()

      IF(ONCEONLY) THEN
         ONCEONLY=.FALSE.
         CALL MDUALS2(NERR)
      ENDIF

      RETURN
      END

C*********************************************************************
      SUBROUTINE IFDDTRAN ()
C*********************************************************************
     
C  Completes definition of interface diffusion-dispersion
C  'transmissibility'. Computes depth differences between interface
C  elements.

C*********************************************************************
      IMPLICIT NONE
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'trarydat.h'
      INCLUDE 'blkary.h'
      INCLUDE 'layout.h'
      INCLUDE 'sblkc.h'

      INTEGER I,IA(6),NBEMDD($MXMOD),NERR
      EXTERNAL IFDDTRANW

C  PUT DIFFUSION-DISPERSION TENSOR COMPONENTS FOR THE B BLOCK(S) IN
C  BUFFERS 1 TO 3 (ASSUME DIAGONAL FOR NOW)

      NERR=0
      CALL IFGES8v2 (N_DISPARR(1),1,NERR)
      CALL IFGES8v2 (N_DISPARR(5),2,NERR)
      CALL IFGES8v2 (N_DISPARR(9),3,NERR)

      IF (NERR.GT.0) THEN
         WRITE(0,*) 'ERROR IN IFDDTRAN AFTER IFGES8v2: CONTINUING...'
      ENDIF

      DO 1 I=1,$MXMOD
    1 NBEMDD(I)=3

$MANY      CALL PIFBUF8(NBEMDD,NERR)

      IF (NERR.GT.0) THEN
         WRITE(0,*) 'ERROR IN IFDDTRAN AFTER PIFBUF8: TERMINATING!'
         RETURN
      ENDIF

C  COMPUTE DIFFUSION-DISPERSION TRANSMISSABILITIES IN A WORK ROUTINE

      IA(1)=5
      IA(2)=N_DISPARR(1)
      IA(3)=N_DISPARR(5)
      IA(4)=N_DISPARR(9)
      IA(5)=N_BUFDIM
      IA(6)=N_BUFIF
      CALL CALLWORK(IFDDTRANW,IA)

      END

C*********************************************************************
      SUBROUTINE IFDDTRANW (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &           KL2,KEYOUT,NBLK,DMX,DMY,DMZ,NBUFDIM,BUFIF8)
C*********************************************************************

C  Work routine for computing interface diffusion-dispersion
C  'tranmissability'.

C  DMX() = Diffusion tensor (input, REAL*4)
C  DMY()
C  DMZ()

C  NBUFDIM = the first dimension of BUFIF8(,) (input, INTEGER)

C  BUFIF8(i,j) = Location i in interface buffer j (output, REAL*8)

C*********************************************************************
      IMPLICIT NONE
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'layout.h'
      INCLUDE 'sblkc.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,NBUFDIM
      INTEGER JL1V(KDIM), JL2V(KDIM), KEYOUT(IDIM,JDIM,KDIM)
      INTEGER IA,JA,KA,IAG,JAG,KAG,IOFFA,JOFFA,KOFFA,MERR,
     &        J,K,J1,J2,K1,K2,IB,NB,IBG,JBG,KBG
      REAL*8 DMA,DMB,DA,DB,CVC,DXA,DYA,DZA,VOLA
      REAL*8 DMX(IDIM,JDIM,KDIM), DMY(IDIM,JDIM,KDIM),
     &  DMZ(IDIM,JDIM,KDIM), BUFIF8(NBUFDIM,*)

      IF (NIEBS(NBLK).EQ.0) RETURN

C bag8 - CVC = 2 * sq-ft cp / md psi day
      CVC = 2 * CONV_FACTOR

      CALL BLKOFF(NBLK,IOFFA,JOFFA,KOFFA,MERR)

      K1=IIEBS(NBLK)
      K2=K1+NIEBS(NBLK)-1
      DO 1 K=K1,K2
      IA=IJKS(1,K)
      JA=IJKS(2,K)
      KA=IJKS(3,K)
      IAG=IA+IOFFA
      JAG=JA+JOFFA
      KAG=KA+KOFFA
      DXA=DXREC(IAG,NBLK)
      DYA=DYREC(JAG,NBLK)
      DZA=DZREC(KAG,NBLK)
      VOLA=DXA*DYA*DZA

      J1=ICGES(K)
      J2=J1+NCGES(K)-1
      DO 1 J=J1,J2
      NB=JBLOCK(J)
      IBG=TRDDIJKT(1,J)
      JBG=TRDDIJKT(2,J)
      KBG=TRDDIJKT(3,J)
      IB=LIBUF(J)

      GO TO (11,12,13,11,12,13),KDIRS(J)

   11 DMA=DMX(IA,JA,KA)/VOLA
      DA=DXREC(IAG,NBLK)
      DMB=BUFIF8(IB,1)
      DB=DXREC(IBG,NB)
      GO TO 3

   12 DMA=DMY(IA,JA,KA)/VOLA
      DA=DYREC(JAG,NBLK)
      DMB=BUFIF8(IB,2)
      DB=DYREC(JBG,NB)
      GO TO 3

   13 DMA=DMZ(IA,JA,KA)/VOLA
      DA=DZREC(KAG,NBLK)
      DMB=BUFIF8(IB,3)
      DB=DZREC(KBG,NB)

    3 IF (ABS(DMA).GT.0.D0.AND.ABS(DMB).GT.0.D0) THEN
         TDDFINS(J)=CVC*TDDFINS0(J)/(DA/DMA+DB/DMB)
      ELSE
         TDDFINS(J)=0.D0
      ENDIF

    1 CONTINUE

      END

C**********************************************************************
      SUBROUTINE TRDADVW(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                   KEYOUT,NBLK,VELX,VELY,VELZ,NBUFDIM,BUFIF8,CONC,
     &                   CONCO,PHISO,TRSLP)
C**********************************************************************
C INPUT: 

C VELX,VELY,VELZY - DARCY VELOCITY IN X,Y,Z DIRECTIONS
C CONC - CONCENTRATION OF CURRENT SPECUM

C OUTPUT: 

C**********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'sblkc.h'
      INCLUDE 'layout.h'
      INCLUDE 'trmodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,JL1V(KDIM),JL2V(KDIM),
     &        NBUFDIM,KEYOUT(IDIM,JDIM,KDIM),NBLK,IOFFA,JOFFA,KOFFA,IERR
      INTEGER J,K,L,J1,J2,K1,K2,IA,JA,KA,IAG,JAG,KAG
      REAL*8  CONC(IDIM,JDIM,KDIM),CONCO(IDIM,JDIM,KDIM),
     &        PHISO(IDIM,JDIM,KDIM),TRSLP(IDIM,JDIM,KDIM,3),
     &        VELX(IDIM,JDIM,KDIM),VELY(IDIM,JDIM,KDIM),
     &        VELZ(IDIM,JDIM,KDIM),BUFIF8(NBUFDIM,*)
      REAL*8  CONCB,CFLUX,DCFLUX,DX,DY,DZ,CEA,SCA,SDSA,VEL_IN

      IF (NIEBS(NBLK).EQ.0) RETURN

C  GET A BLOCK OFFSETS

      CALL BLKOFF(NBLK,IOFFA,JOFFA,KOFFA,IERR)

C  LOOP OVER A BLOCK INTERFACE ELEMENTS

      K1=IIEBS(NBLK)
      K2=K1+NIEBS(NBLK)-1
      DO 1 K=K1,K2
      J1=ICGES(K)
      J2=J1+NCGES(K)-1

      IA=IJKS(1,K)
      JA=IJKS(2,K)
      KA=IJKS(3,K)

      IAG=IA+IOFFA
      JAG=JA+JOFFA
      KAG=KA+KOFFA

C  LOOP OVER THE B BLOCK INTERFACE ELEMENTS

      SCA=0.D0
      SDSA=0.D0
      DO 2 J=J1,J2

C  COMPUTE COUPLING FOR A BLOCK INTERFACIAL CONCENTRATIONS

      L=LIBUF(J)
      CONCB=BUFIF8(L,1)*TDDFINS0(J)
      SCA=SCA+CONCB
      SDSA=SDSA+TDDFINS0(J)

    2 CONTINUE

      CEA=SCA/SDSA

C  UPDATE INTERFACIAL ELEMENT CONCENTRATIONS FOR A BLOCK USING 
C  UPWINDED DARCY FLUXES

      CFLUX=0.D0
      DCFLUX=0.D0
      GO TO (11,12,13,14,15,16),KDIRS(J1)

   11 VEL_IN=-VELX(IA+1,JA,KA)*CDELTIM
      IF(VEL_IN.GT.0.D0) THEN              ! INFLOW
         CFLUX=CEA
      ELSEIF(VEL_IN.LE.0.D0) THEN          ! OUTFLOW
         DX=DXREC(IAG,NBLK)
         CFLUX=CONCO(IA,JA,KA) 
         DCFLUX=0.5D0*TRFLXLMTR*TRSLP(IA,JA,KA,1)*DX
      ENDIF
      GO TO 17

   12 VEL_IN=-VELY(IA,JA+1,KA)*CDELTIM
      IF(VEL_IN.GT.0.D0) THEN              ! INFLOW
         CFLUX=CEA
      ELSEIF(VEL_IN.LE.0.D0) THEN          ! OUTFLOW
         DY=DYREC(JAG,NBLK)
         CFLUX=CONCO(IA,JA,KA) 
         DCFLUX=0.5D0*TRFLXLMTR*TRSLP(IA,JA,KA,2)*DY
      ENDIF
      GO TO 17

   13 VEL_IN=-VELZ(IA,JA,KA+1)*CDELTIM
      IF(VEL_IN.GT.0.D0) THEN              ! INFLOW
         CFLUX=CEA
      ELSEIF(VEL_IN.LE.0.D0) THEN          ! OUTFLOW
         DZ=DZREC(KAG,NBLK)
         CFLUX=CONCO(IA,JA,KA)
         DCFLUX=0.5D0*TRFLXLMTR*TRSLP(IA,JA,KA,3)*DZ
      ENDIF
      GO TO 17

   14 VEL_IN=VELX(IA,JA,KA)*CDELTIM
      IF(VEL_IN.GT.0.D0) THEN              ! INFLOW
         CFLUX=CEA
      ELSEIF(VEL_IN.LE.0.D0) THEN          ! OUTFLOW
         DX=DXREC(IAG,NBLK)
         CFLUX=CONCO(IA,JA,KA) 
         DCFLUX=-0.5D0*TRFLXLMTR*TRSLP(IA,JA,KA,1)*DX
      ENDIF
      GO TO 17

   15 VEL_IN=VELY(IA,JA,KA)*CDELTIM
      IF(VEL_IN.GT.0.D0) THEN              ! INFLOW
         CFLUX=CEA
      ELSEIF(VEL_IN.LE.0.D0) THEN          ! OUTFLOW
         DY=DYREC(JAG,NBLK)
         CFLUX=CONCO(IA,JA,KA)
         DCFLUX=-0.5D0*TRFLXLMTR*TRSLP(IA,JA,KA,2)*DY
      ENDIF
      GO TO 17

   16 VEL_IN=VELZ(IA,JA,KA)*CDELTIM
      IF(VEL_IN.GT.0.D0) THEN              ! INFLOW
         CFLUX=CEA
      ELSEIF(VEL_IN.LE.0.D0) THEN          ! OUTFLOW
         DZ=DZREC(KAG,NBLK)
         CFLUX=CONCO(IA,JA,KA)
         DCFLUX=-0.5D0*TRFLXLMTR*TRSLP(IA,JA,KA,3)*DZ
      ENDIF

   17 CONTINUE

C     CHECK CFL CONDITION
      IF(DABS(VEL_IN).GT.0.D0.AND.
     &   CDELTIM.GT.DABS(PHISO(IA,JA,KA)/VEL_IN)) THEN
         WRITE(0,*) IA,JA,KA,' ON CFL BOUNDARY ',KDIRS(J1),
     &              ' CDELTIM, CFLTSTEP ',CDELTIM,
     &              PHISO(IA,JA,KA)/VEL_IN
         CFLERR=.TRUE.
         CFLTSTEP=DABS(PHISO(IA,JA,KA)/VEL_IN)
         RETURN
      ENDIF
C     PERFORM ADVECTION
      CFLUX=VEL_IN*(CFLUX+DCFLUX)
      CONC(IA,JA,KA)=CONC(IA,JA,KA)+CFLUX
      CIN(CALPHA)=CIN(CALPHA)+CFLUX

    1 CONTINUE 

      RETURN
      END

C***********************************************************************
      SUBROUTINE TRDCSLPW(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &                    KEYOUT,NBLK,CONC,TRSLP,NBUFDIM,BUFIF8)
C***********************************************************************
C Subroutine computes scalar variable element slopes for those elements 
C adjacent to fault block interfaces 
C INPUT:     
C    CONC - CURRENT CONCENTRATION OF SPECIES [REAL*8, lbM/cu-ft]
C OUTPUT
C    TRSLP - SCALAR ELEMENT "SLOPES".
C***********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'sblkc.h' 
      INCLUDE 'trmodel.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,JL1V(KDIM),JL2V(KDIM),
     &        NBUFDIM,KEYOUT(IDIM,JDIM,KDIM),NBLK,NB
      REAL*8 CONC(IDIM,JDIM,KDIM),TRSLP(IDIM,JDIM,KDIM,3),
     &       BUFIF8(NBUFDIM,*)
C-----------------------------------------------------------------------
      INTEGER IERR,JERR,NXA,NYA,NZA,IA,JA,KA,IAG,JAG,KAG,IBG,JBG,KBG
      INTEGER I,J,K,L,J1,J2,K1,K2,IOFFA,JOFFA,KOFFA
      REAL*8 DXA,DYA,DZA,DXB,DYB,DZB,DXC,DXM,DXP,DYC,DYM,DYP,DZC,DZM,
     &    DZP,CNCA,CNCM,CNCP,DCNCADX,DCNCADY,DCNCADZ,DCNCMDX,DCNCPDX,
     &    DCNCMDY,DCNCPDY,DCNCMDZ,DCNCPDZ,SDSA,SIGNT,ARG1,ARG2
      REAL*8 HRMNCAVG,SGNUMT
C-----------------------------------------------------------------------

C  GET BLOCK OFFSETS AND GLOBAL DIMENSIONS

      CALL BLKOFF(NBLK,IOFFA,JOFFA,KOFFA,IERR)
      CALL BLKDIM(NBLK,NXA,NYA,NZA,JERR)

C  LOOP OVER A BLOCK INTERFACIAL ELEMENTS

      K1=IIEBS(NBLK)
      K2=K1+NIEBS(NBLK)-1

      DO 1 K=K1,K2

      J1=ICGES(K)
      J2=J1+NCGES(K)-1

      IA=IJKS(1,K)
      JA=IJKS(2,K)
      KA=IJKS(3,K)

      IAG=IA+IOFFA
      JAG=JA+JOFFA
      KAG=KA+KOFFA

      DXA=DXREC(IAG,NBLK)
      DYA=DYREC(JAG,NBLK)
      DZA=DZREC(KAG,NBLK)
      CNCA=CONC(IA,JA,KA)

C  LOOP OVER THE B BLOCK INTERFACIAL ELEMENTS

      DCNCADX=0.D0
      DCNCMDX=0.D0
      DCNCPDX=0.D0
      DCNCADY=0.D0
      DCNCMDY=0.D0
      DCNCPDY=0.D0
      DCNCADZ=0.D0
      DCNCMDZ=0.D0
      DCNCPDZ=0.D0
      SDSA=0.D0
      DO 2 J=J1,J2

C  COMPUTE COUPLING FOR A BLOCK INTERFACIAL CONCENTRATIONS

      L= LIBUF(J)
      NB=JBLOCK(J)
      IBG=TRDDIJKT(1,J)
      JBG=TRDDIJKT(2,J)
      KBG=TRDDIJKT(3,J)
      DXB=DXREC(IBG,NB)
      DYB=DYREC(JBG,NB)
      DZB=DZREC(KBG,NB)
      SDSA=SDSA+TDDFINS0(J)

      GO TO (11,12,13,14,15,16),KDIRS(J)

   11 CNCP=BUFIF8(L,1) 
      DXP=DXB
      IF(IAG.GT.1) THEN
         CNCM=CONC(IA-1,JA,KA)
         DXM=DXREC(IAG-1,NBLK)
         DXC=DXA+0.5D0*(DXP+DXM)
      ELSE
         CNCM=CNCA
         DXM=DXA
         DXC=0.5D0*(DXM+DXP)
      ENDIF
      DCNCADX=DCNCADX+(CNCP-CNCM)*TDDFINS0(J)/DXC
      DCNCMDX=DCNCMDX+2.D0*(CNCA-CNCM)*TDDFINS0(J)/(DXM+DXA)
      DCNCPDX=DCNCPDX+2.D0*(CNCP-CNCA)*TDDFINS0(J)/(DXP+DXA)
      GO TO 2

   12 CNCP=BUFIF8(L,1)
      DYP=DXB
      IF(JAG.GT.1) THEN
         CNCM=CONC(IA,JA-1,KA)
         DYM=DYREC(JAG-1,NBLK)
         DYC=DYA+0.5D0*(DYP+DYM)
      ELSE
         CNCM=CNCA
         DYM=DYA
         DYC=0.5D0*(DYM+DYP)
      ENDIF
      DCNCADY=DCNCADY+(CNCP-CNCM)*TDDFINS0(J)/DYC
      DCNCMDY=DCNCMDY+2.D0*(CNCA-CNCM)*TDDFINS0(J)/(DYM+DYA)
      DCNCPDY=DCNCPDY+2.D0*(CNCP-CNCA)*TDDFINS0(J)/(DYP+DYA)
      GO TO 2

   13 CNCP=BUFIF8(L,1)
      DZP=DZB
      IF(KAG.GT.1) THEN
         CNCM=CONC(IA,JA,KA-1)
         DZM=DZREC(KAG-1,NBLK)
         DZC=DZA+0.5D0*(DZP+DZM)
      ELSE
         CNCM=CNCA
         DZM=DZA
         DZC=0.5D0*(DZM+DZP)
      ENDIF
      DCNCADZ=DCNCADZ+(CNCP-CNCM)*TDDFINS0(J)/DZC
      DCNCMDZ=DCNCMDZ+2.D0*(CNCA-CNCM)*TDDFINS0(J)/(DZM+DZA)
      DCNCPDZ=DCNCPDZ+2.D0*(CNCP-CNCA)*TDDFINS0(J)/(DZP+DZA)
      GO TO 2

   14 CNCM=BUFIF8(L,1)
      DXM=DXB
      IF(IAG.LT.NXA) THEN
         CNCP=CONC(IA+1,JA,KA)
         DXP=DXREC(IAG+1,NBLK)
         DXC=DXA+0.5D0*(DXP+DXM)
      ELSE
         CNCP=CNCA
         DXP=DXA
         DXC=0.5D0*(DXM+DXP)
      ENDIF
      DCNCADX=DCNCADX+(CNCP-CNCM)*TDDFINS0(J)/DXC
      DCNCMDX=DCNCMDX+2.D0*(CNCA-CNCM)*TDDFINS0(J)/(DXM+DXA)
      DCNCPDX=DCNCPDX+2.D0*(CNCP-CNCA)*TDDFINS0(J)/(DXP+DXA)
      GO TO 2

   15 CNCM=BUFIF8(L,1)
      DYM=DYB
      IF(JAG.LT.NYA) THEN
         CNCP=CONC(IA,JA+1,KA)
         DYP=DYREC(JAG+1,NBLK)
         DYC=DYA+0.5D0*(DYP+DYM)
      ELSE
         CNCP=CNCA
         DYP=DYA
         DYC=0.5D0*(DYM+DYP)
      ENDIF
      DCNCADY=DCNCADY+(CNCP-CNCM)*TDDFINS0(J)/DYC
      DCNCMDY=DCNCMDY+2.D0*(CNCA-CNCM)*TDDFINS0(J)/(DYM+DYA)
      DCNCPDY=DCNCPDY+2.D0*(CNCP-CNCA)*TDDFINS0(J)/(DYP+DYA)
      GO TO 2

   16 CNCM=BUFIF8(L,1)
      DZM=DZB
      IF(KAG.LT.NZA) THEN
         CNCP=CONC(IA,JA,KA+1)
         DZP=DZREC(KAG+1,NBLK)
         DZC=DZA+0.5D0*(DZP+DZM)
      ELSE
         CNCP=CNCA
         DZP=DZA
         DZC=0.5D0*(DZM+DZP)
      ENDIF
      DCNCADZ=DCNCADZ+(CNCP-CNCM)*TDDFINS0(J)/DZC
      DCNCMDZ=DCNCMDZ+2.D0*(CNCA-CNCM)*TDDFINS0(J)/(DZM+DZA)
      DCNCPDZ=DCNCPDZ+2.D0*(CNCP-CNCA)*TDDFINS0(J)/(DZP+DZA) 

    2 CONTINUE

      DCNCADX=DCNCADX/SDSA
      DCNCMDX=DCNCMDX/SDSA
      DCNCPDX=DCNCPDX/SDSA
      DCNCADY=DCNCADY/SDSA
      DCNCMDY=DCNCMDY/SDSA
      DCNCPDY=DCNCPDY/SDSA
      DCNCADZ=DCNCADZ/SDSA
      DCNCMDZ=DCNCMDZ/SDSA
      DCNCPDZ=DCNCPDZ/SDSA

C  CALCULATE AND STORE SCALAR VARIABLE SLOPES FOR FAULT BLOCK 
C  INTERFACIAL ELEMENTS

      GO TO (17,18,19,17,18,19),KDIRS(J1)

   17 IF(NTRFLXLMT.EQ.0) THEN
         TRSLP(IA,JA,KA,1)=DCNCADX
      ELSEIF(NTRFLXLMT.EQ.1) THEN
         TRSLP(IA,JA,KA,1)=
     &      MIN(MAX(DCNCMDX,0.D0),MAX(DCNCPDX,0.D0))
     &     +MAX(MIN(DCNCMDX,0.D0),MIN(DCNCPDX,0.D0))
      ELSEIF(NTRFLXLMT.EQ.2) THEN
         TRSLP(IA,JA,KA,1)=HRMNCAVG(DCNCMDX,DCNCPDX)
      ELSEIF(NTRFLXLMT.EQ.3) THEN
         SIGNT=SGNUMT(DCNCMDX,DCNCPDX)
         ARG1=MIN(ABS(DCNCMDX),ABS(DCNCPDX))
         ARG2=0.5D0*MAX(ABS(DCNCMDX),ABS(DCNCPDX))
         TRSLP(IA,JA,KA,1)=SIGNT*MIN(ARG1,ARG2)
      ELSE
         WRITE(0,*) 'WARNING: FLUX LIMITER TYPE UNDEFINED ',
     &              'DEFAULTS TO 0 (CENTERED DIFFERENCES)'
         TRSLP(IA,JA,KA,1)=DCNCADX
      ENDIF
      GO TO 1

   18 IF(NTRFLXLMT.EQ.0) THEN
         TRSLP(IA,JA,KA,2)=DCNCADY
      ELSEIF(NTRFLXLMT.EQ.1) THEN
         TRSLP(IA,JA,KA,2)=
     &      MIN(MAX(DCNCMDY,0.D0),MAX(DCNCPDY,0.D0))
     &     +MAX(MIN(DCNCMDY,0.D0),MIN(DCNCPDY,0.D0))
      ELSEIF(NTRFLXLMT.EQ.2) THEN
         TRSLP(IA,JA,KA,2)=HRMNCAVG(DCNCMDY,DCNCPDY)
      ELSEIF(NTRFLXLMT.EQ.3) THEN
         SIGNT=SGNUMT(DCNCMDY,DCNCPDY)
         ARG1=MIN(ABS(DCNCMDY),ABS(DCNCPDY))
         ARG2=0.5D0*MAX(ABS(DCNCMDY),ABS(DCNCPDY))
         TRSLP(IA,JA,KA,2)=SIGNT*MIN(ARG1,ARG2)
      ELSE
         WRITE(0,*) 'WARNING: FLUX LIMITER TYPE UNDEFINED ',
     &              'DEFAULTS TO 0 (CENTERED DIFFERENCES)'
         TRSLP(IA,JA,KA,2)=DCNCADY
      ENDIF
      GO TO 1

   19 IF(NTRFLXLMT.EQ.0) THEN
         TRSLP(IA,JA,KA,3)=DCNCADZ
      ELSEIF(NTRFLXLMT.EQ.1) THEN
         TRSLP(IA,JA,KA,3)=
     &      MIN(MAX(DCNCMDZ,0.D0),MAX(DCNCPDZ,0.D0))
     &     +MAX(MIN(DCNCMDZ,0.D0),MIN(DCNCPDZ,0.D0))
      ELSEIF(NTRFLXLMT.EQ.2) THEN
         TRSLP(IA,JA,KA,3)=HRMNCAVG(DCNCMDZ,DCNCPDZ)
      ELSEIF(NTRFLXLMT.EQ.3) THEN
         SIGNT=SGNUMT(DCNCMDZ,DCNCPDZ)
         ARG1=MIN(ABS(DCNCMDZ),ABS(DCNCPDZ))
         ARG2=0.5D0*MAX(ABS(DCNCMDZ),ABS(DCNCPDZ))
         TRSLP(IA,JA,KA,3)=SIGNT*MIN(ARG1,ARG2)
      ELSE
         WRITE(0,*) 'WARNING: FLUX LIMITER TYPE UNDEFINED ',
     &              'DEFAULTS TO 0 (CENTERED DIFFERENCES)'
         TRSLP(IA,JA,KA,3)=DCNCADZ
      ENDIF

    1 CONTINUE

      RETURN
      END

C*********************************************************************
      SUBROUTINE IFGES8v2 (N_A,NBUF,NERR)
C*********************************************************************

C  Loads an interface buffer from a REAL*8 grid-element array.  Does not
C  (repeat not) send it to other processors.  This routine can (and should)
C  be used even on single processor machines.  The routine can be called
C  only from executive routines.  Interfaces on all fault blocks are
C  processed by a single call.

C  N_A = Array number of the REAL*8 grid element array that is the source
C        of the transfer (input, INTEGER).

C  NBUF = Buffer number of a REAL*8 buffer used in the transfer
C         (input, INTEGER).

C  NERR = Error number stepped by 1 on error (input & output, INTEGER)

C*********************************************************************
      IMPLICIT NONE
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'sblkc.h'

      INTEGER N_A,NBUF,NERR,IA(4)

      EXTERNAL IFTOBUF8v2

C  LOAD BUFFER VIA A WORK ROUTINE

      IA(1)=3
      IA(2)=N_A
      IA(3)=N_BUFDIM
      IA(4)=N_BUFIF
      NUMBUFU=NBUF

      CALL CALLWORK (IFTOBUF8v2,IA)

      END

C*********************************************************************
      SUBROUTINE IFTOBUF8v2 (IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                       KL2,KEYOUT,NBLK,A,NBUFDIM,BUFIF8)
C*********************************************************************

C  Copies interface data from a REAL*8 grid-element array to a buffer.
C  This is a work routine.

C  A() = Grid-element array (input, REAL*8)

C  NBUFDIM = First dimension of BUFIF8() (input, INTEGER)

C  BUFIF8(,) = Buffer (output, REAL*8)

C  NOTE: The buffer number is passed in NUMBUFU

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'layout.h'
      INCLUDE 'sblkc.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,NBLK,NBUFDIM
      INTEGER JL1V(KDIM), JL2V(KDIM), KEYOUT(IDIM,JDIM,KDIM)
      INTEGER II,II1,II2,K,M,IG,JG,KG,IOFF,JOFF,KOFF,IERR
      REAL*8 A(IDIM,JDIM,KDIM), BUFIF8(NBUFDIM,*),DX,DY,DZ,VOL

      IF (NIEBS(NBLK).EQ.0) RETURN

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,IERR)

      DO 1 M=1,NPAI(NBLK)
      II1=IESNDI(M,NBLK)
      II2=II1+NESNDI(M,NBLK)-1
      DO 1 II=II1,II2
      K=KFESR(II)
      IG=IJKS(1,K)+IOFF
      JG=IJKS(2,K)+JOFF
      KG=IJKS(3,K)+KOFF
      DX=DXREC(IG,NBLK)
      DY=DYREC(JG,NBLK)
      DZ=DZREC(KG,NBLK)
      VOL=DX*DY*DZ
    1 BUFIF8(II,NUMBUFU)=A(IJKS(1,K),IJKS(2,K),IJKS(3,K))/VOL

      END
