C TRFIM - FULLY IMPLICIT REACTIVE, FLOW AND TRANSPORT

C ROUTINES IN THIS MODULE:

C SUBROUTINE TRFIM

C CODE HISTORY

C G. SINGH,  6/16  INITIAL VERSION
C  
C*********************************************************************
      SUBROUTINE TRFIM (NERR)
C*********************************************************************

C  ROUTINE MAKES ONE TIME STEP FOR REACTIVE 
C  FLOW+TRANSPORT/CHEMISTRY MULTIMODEL IN IPARS

C  NERR = ERROR NUMBER STEPED BY 1 ON ERROR (INPUT & OUTPUT, INTEGER)

C*********************************************************************
      IMPLICIT NONE

      INCLUDE 'control.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'trarydat.h'
      INCLUDE 'blkary.h'

      EXTERNAL CPYARYR8N,TRPROP,TRTRAN,TRWELLFIM,TRUP,TRMAXRES,
     &         RXN_STEP_WK,TRREAFIM

      LOGICAL ONCEONLY
      
      INTEGER NERR,NC,NKONVG

C  SOLVER INFORMATION
     
      INTEGER SL_ITER,FIM_NEWT

      INTEGER IPROP(8),ITRAN(8),IWELL(5),ICPY(4),IUP(4),IRES(3),
     &        IRXN(5),IREA(6)
      DATA IPROP /8*0/, ITRAN /8*0/, IWELL /5*0/, ICPY /4*0/, 
     &     IUP /4*0/, IRES /3*0/, IRXN /5*0/, IREA /6*0/,
     &     ONCEONLY /.TRUE./

      IF(ONCEONLY) THEN
        ONCEONLY = .FALSE.

        IPROP (1) = 7
        IPROP (2) = N_POR
        IPROP (3) = N_CONC
        IPROP (4) = N_CONCN
        IPROP (5) = N_TRCOF
        IPROP (6) = N_TRRESID
        IPROP (7) = N_TRDUNK
  
        ITRAN (1) = 7
        ITRAN (2) = N_TRVEL
        ITRAN (3) = N_DISP
        ITRAN (4) = N_CONC
        ITRAN (5) = N_CONCN
        ITRAN (6) = N_TRCOF
        ITRAN (7) = N_TRRESID

        IWELL (1) = 4
        IWELL (2) = N_CONC
        IWELL (3) = N_TRCOF
        IWELL (4) = N_TRRESID

        IUP(1) = 3
        IUP(2) = N_CONC
        IUP(3) = N_TRDUNK
     
        IRES(1) = 2
        IRES(2) = N_TRRESID
        IRES(3) = N_POR

        IREA (1) = 5
        IREA (2) = N_CONCR
        IREA (3) = N_CONC
        IREA (4) = N_POR
        IREA (5) = N_TRRESID

        IRXN (1) = 4
        IRXN (3) = N_SATU
        IRXN (4) = N_SATUN
        IRXN (5) = N_POR
      ENDIF

CGUS ---- TEMPORARY
      FIM_CVTOL = 1.D-8

C INITIAL CONCENTRATION AT EQUILIBRIUM
      IF (INITIALCHEM) THEN
        NERRCHEM = 0
        IF (NRQ.GT.0) THEN
          IRXN (2) = N_CONC
          CALL CALLWORK (RXN_STEP_WK, IRXN)
        ENDIF
        INITIALCHEM = .FALSE.

C COPY CONC TO CONCR
        ICPY(1) = 3
        ICPY(2) = N_CONC
        ICPY(3) = N_CONCR
        I4UTIL = NSPECIES
        ICPY(4) = N_I4U
        CALL CALLWORK (CPYARYR8N,ICPY)
      ENDIF

C SAVE OLD TIMESTEP CONCENTRATIONS TO CONCN
      ICPY(1) = 3
      ICPY(2) = N_CONC
      ICPY(3) = N_CONCN
      I4UTIL = NSPECIES
      ICPY(4) = N_I4U
      CALL CALLWORK (CPYARYR8N,ICPY)

      FIM_NEWT = 0

      DO WHILE (NKONVG<NSPECIES)       

      NKONVG = 0
      DO NC = 1,NSPECIES

C
C ACCUMULATION TERM
C
      I4UTIL = NC
      IPROP (8) = N_I4U
      CALL CALLWORK (TRPROP,IPROP)

C  ONLY SPECIES IN FLOWING PHASE UNDERGO ADVECTION/DIFFUSION
      IF (PHASETYPE(NC)==1) THEN
C
C TRANSPORT/DIFFUSION TERM
C
        I4UTIL = NC
        ITRAN (8) = N_I4U
        CALL CALLWORK (TRTRAN,ITRAN)
C
C WELL TERM
C
        I4UTIL = NC
        IWELL (5) = N_I4U
        CALL CALLWORK (TRWELLFIM,IWELL)

      ENDIF
C
C REACTIVE TERM
C
        I4UTIL = NC
        IREA (6) = N_I4U
        CALL CALLWORK (TRREAFIM,IREA)
C    
C LINEAR SOLVER
C
$GMRES      IF(IDDLINSOL.EQ.1) THEN
C USE TEMPORARY VALUES OF GMRES SOLVER TOLERANCE
$GMRES         CALL TMP_LSOLTOL(NERR,0)
$GMRES         CALL TICAMG(N_TRCOF,N_TRDUNK,N_TRRESID,1,SL_ITER,NERR)
C RESTORE ORIGINAL VALUES OF GMRES SOLVER TOLERANCE
$GMRES         CALL TMP_LSOLTOL(NERR,1)
$GMRES      ELSE
$GMRES         WRITE(*,*)'TRDDLINSOL IS =',IDDLINSOL,
$GMRES     &                   'AND NOT 1 IN INPUT; EXITING'
$GMRES         STOP
$GMRES      ENDIF
$TICAMA      IF(IDDLINSOL.EQ.2) CALL TICAMAT(N_TRCOF,N_TRDUNK,N_TRRESID
$TICAMA     &                               ,1,SL_ITER,NERR)
$PCG         IF(IDDLINSOL.EQ.3) THEN
$PCG            STOP 'ERROR: PCG FOR DIFF-DISP NOT TESTED YET!'
$PCG         ENDIF
$HYPRE      IF(IDDLINSOL.EQ.4) THEN
$HYPRE         CALL HYPRE_TRCHEM(SL_ITER,NERR)
$HYPRE      ELSE
$HYPRE         WRITE(*,*)'TRDDLINSOL IS =',IDDLINSOL,
$HYPRE     &                   'AND NOT 4 IN INPUT; EXITING'
$HYPRE         STOP
$HYPRE      ENDIF

C
C UPDATE CONCENTRATIONS
C
        I4UTIL = NC
        IUP(4) = N_I4U
        CALL CALLWORK (TRUP,IUP)
C
C CHECK MAXIMUM RESIDUAL
C
        CALL CALLWORK (TRMAXRES,IRES)       
      
        NKONVG = NKONVG + FIM_KONVG

      ENDDO

C PERFORM REACTIVE CHEMISTRY USING PREVIOUS NEWTON CONC

C COPY CONC TO CONCR
      ICPY(1) = 3
      ICPY(2) = N_CONC
      ICPY(3) = N_CONCR
      I4UTIL = NSPECIES
      ICPY(4) = N_I4U
      CALL CALLWORK (CPYARYR8N,ICPY)

      IF (NPRODUCTS.GT.0) THEN
         NERRCHEM = 0
         IRXN (2) = N_CONCR
         CALL CALLWORK (RXN_STEP_WK, IRXN)
      ELSE
C SKIP CHEMISTRY SINCE NPPRODUCTS <= 0
      ENDIF
      IF (NERRCHEM.NE.0) THEN
         NERR = NERR+1
         STOP  ' ERROR IN RXN_STEP: NERRCHEM > 0'
      ENDIF

      
      FIM_NEWT = FIM_NEWT+1

      ENDDO
      
      WRITE(*,*)'CDELTIM,FIM_NEWT',CDELTIM,FIM_NEWT

      END

C **************************************************************
      SUBROUTINE TRPROP(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &     JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,POR,
     &     CONC,CONCN,COF,RESID,DUNK,IC)
C **************************************************************
C VELX,VELY,VELZ - VELOCITY IN X,Y,Z DIRECTION
C CONC - CONCENTRATION OF SPECIES
C PHIS - CAPACITY
C **************************************************************
C  
C    THE COEFFICIENT PHIS AT ACCUMULATION TERM HAS VOLUME FACTOR;
C    THE DISPERSION/DIFFUSION TENSOR ALSO HAS VOLUME FACTOR THROUGH POR.

C  TRCOF(I,J,K,N)= MATRIX COEFFICIENTS (REAL*4) FOR CONCENTRATION
C        COF(I,J,K,1)  ==> DIAGONAL
C        COF(I,J,K,2)  ==> X-     COF(I,J,K,3)  ==> X+
C        COF(I,J,K,4)  ==> Y-     COF(I,J,K,5)  ==> Y+
C        COF(I,J,K,6)  ==> Z-     COF(I,J,K,7)  ==> Z+
C        COF(I,J,K,8)  ==> X-Y-   COF(I,J,K,9)  ==> X+Y-
C        COF(I,J,K,10) ==> X-Y+   COF(I,J,K,11) ==> X+Y+
C        COF(I,J,K,12) ==> X-Z-   COF(I,J,K,13) ==> X+Z-
C        COF(I,J,K,14) ==> Y-Z-   COF(I,J,K,15) ==> Y+Z-
C        COF(I,J,K,16) ==> X-Z+   COF(I,J,K,17) ==> X+Z+
C        COF(I,J,K,18) ==> Y-Z+   COF(I,J,K,19) ==> Y+Z+
C ----------------------------------------------------------------------

      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'trarydat.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,KL1,KL2,JL1V(KDIM),JL2V(KDIM),
     &        IL1,IL2,KEYOUT(IDIM,JDIM,KDIM),NBLK,IC

      REAL*4 COF(IDIM,JDIM,KDIM,$NUMTRCOF),POR(IDIM,JDIM,KDIM)

      REAL*8 RESID(IDIM,JDIM,KDIM),DUNK(IDIM,JDIM,KDIM),
     &       CONC(IDIM,JDIM,KDIM,NSPECIES),
     &       CONCN(IDIM,JDIM,KDIM,NSPECIES)
      
      REAL*8 CUR_COF

      INTEGER I,J,K,NC

C INITIALIZE ARRAYS
      
      COF = 0.0
      RESID = 0.D0

      DO K = KL1,KL2
      DO J = JL1V(K),JL2V(K)
      DO I = IL1,IL2
      IF (KEYOUT(I,J,K)/=1) CYCLE
         COF(I,J,K,1) = POR(I,J,K)
         RESID(I,J,K) = -POR(I,J,K)*(CONC(I,J,K,IC)-CONCN(I,J,K,IC))
         DUNK(I,J,K) = CONC(I,J,K,IC)
      ENDDO
      ENDDO
      ENDDO

CGUS NEED TO MOVE THIS TO THE REACTIVE SECTION LATER

C HANDLE THE FIRST ORDER DECAY CHEMICAL REACTION (RADIOACTIVE DECAY)
      IF (USE_RADIODECAY) THEN
C     NOTE CUR_COF IS THE LAMBDA;   LOG2=0.69314718D0 (SAVE COMPUTING TIME)
         CUR_COF = 0.69314718D0 / HALFLIFTIM(CALPHA)
         DO K = KL1,KL2
            DO J = JL1V(K),JL2V(K)
               DO I = IL1,IL2
                  IF (KEYOUT(I,J,K).EQ.1) THEN
                     COF(I,J,K,1)=COF(I,J,K,1)+ POR(I,J,K)*CUR_COF
                  ENDIF
               ENDDO
            ENDDO
         ENDDO
      ENDIF

      END

C **************************************************************
      SUBROUTINE TRTRAN(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &     JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,VEL,DISP,
     &     CONC,CONCN,COF,RESID,IC)
C **************************************************************
C VEL(,,,1 TO 3) - VELOCITY IN X,Y,Z DIRECTION
C CONC - CONCENTRATION OF SPECIES
C **************************************************************

      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'trarydat.h'
      INCLUDE 'layout.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,KL1,KL2,JL1V(KDIM),JL2V(KDIM),
     &        IL1,IL2,KEYOUT(IDIM,JDIM,KDIM),NBLK,IC

      REAL*4 COF(IDIM,JDIM,KDIM,$NUMTRCOF)

      REAL*8 VEL(IDIM,JDIM,KDIM,3),CONC(IDIM,JDIM,KDIM,NSPECIES),
     &       CONCN(IDIM,JDIM,KDIM,NSPECIES),
     &       DISP(IDIM,JDIM,KDIM,9),RESID(IDIM,JDIM,KDIM)

      INTEGER I,J,K,NC,JL1,JL2,IOFF,JOFF,KOFF,NERR

      REAL*8 DGX,DGY,DGZ,DELX,DELY,DELZ,DELX1,DELY1,DELZ1,DFFX,DFFY,
     &       DFFZ,DFFXM,DFFYM,DFFZM,CUR_COF,DUP1,DUP2,DUPR

CGUS !!!! HARDCODED: SETTING DIFFUSION ZERO
      DISP = 0.D0

       
      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,NERR)


C EDGES WITH NORMALS IN X-DIRECTION
      DO K=KL1,KL2
         JL1=JL1V(K)
         JL2=JL2V(K)
         DO J=JL1,JL2
            DO I=IL1,IL2+1
               IF ( ((KEYOUT(I-1,J,K).EQ.1).OR.(KEYOUT(I-1,J,K).EQ.-1))
     &               .AND.(KEYOUT(I,J,K).EQ.1) )  THEN
                  DELX=DXREC(I+IOFF,NBLK)      ! DX(I)
                  DELX1=DXREC(I-1+IOFF,NBLK)   ! DX(I-1)
C      HARMONIC AVERAGE FOR DIFFUSION
                  DFFX=DISP(I,J,K,1)
                  DFFXM=DISP(I-1,J,K,1)
                  IF(DABS(DFFX).GT.0.D0.AND.DABS(DFFXM).GT.0.D0) THEN
                     CUR_COF = 2.0D0/(DELX/DFFX+DELX1/DFFXM)/DELX
                  ELSE
                     CUR_COF = 0.D0
                  ENDIF
                  DGX = CUR_COF*(CONC(I,J,K,IC)
     &                  -CONC(I-1,J,K,IC))*CDELTIM
                  
C      UPWINDED CONCENTRATIONS
                  IF (VEL(I,J,K,1).GE.0.D0) THEN
                     DUP1 = 0.D0
                     DUP2 = VEL(I,J,K,1)*CDELTIM
                     DUPR = DUP2*CONC(I-1,J,K,IC)
                  ELSE
                     DUP1 = VEL(I,J,K,1)*CDELTIM
                     DUP2 = 0.D0
                     DUPR = DUP1*CONC(I,J,K,IC)
                  ENDIF

                  COF(I,J,K,1)=COF(I,J,K,1) + CUR_COF*CDELTIM - DUP1
                  COF(I,J,K,2)=COF(I,J,K,2) - CUR_COF*CDELTIM - DUP2
                  RESID(I,J,K) = RESID(I,J,K) - DGX + DUPR

                  COF(I-1,J,K,1)=COF(I-1,J,K,1) 
     &                           + CUR_COF*CDELTIM + DUP2
                  COF(I-1,J,K,3)=COF(I-1,J,K,3) 
     &                           - CUR_COF*CDELTIM + DUP1
                  RESID(I-1,J,K) = RESID(I-1,J,K) + DGX - DUPR
               ENDIF
            ENDDO
         ENDDO
      ENDDO


C EDGES WITH NORMALS IN Y-DIRECTION
      DO K=KL1,KL2
         JL1=JL1V(K)
         JL2=JL2V(K)
         DO J=JL1,JL2+1
            DO I=IL1,IL2
               IF ( ((KEYOUT(I,J-1,K).EQ.1).OR.(KEYOUT(I,J-1,K).EQ.-1))
     &               .AND.(KEYOUT(I,J,K).EQ.1) )  THEN
                  DELY=DYREC(J+JOFF,NBLK)      ! DY(J)
                  DELY1=DYREC(J-1+JOFF,NBLK)   ! DY(J-1)
C      HARMONIC AVERAGE FOR DIFFUSION
                  DFFY=DISP(I,J,K,5)
                  DFFYM=DISP(I,J-1,K,5)
                  IF(DABS(DFFY).GT.0.D0.AND.DABS(DFFYM).GT.0.D0) THEN
                     CUR_COF = 2.0D0/(DELY/DFFY+DELY1/DFFYM)/DELY
                  ELSE
                     CUR_COF = 0.D0
                  ENDIF
                  DGY = CUR_COF*(CONC(I,J,K,IC)
     &                  -CONC(I,J-1,K,IC))*CDELTIM

C      UPWINDED CONCENTRATIONS
                  IF (VEL(I,J,K,2).GE.0.D0) THEN
                     DUP1 = 0.D0
                     DUP2 = VEL(I,J,K,2)*CDELTIM
                     DUPR = DUP2*CONC(I,J-1,K,IC)
                  ELSE
                     DUP1 = VEL(I,J,K,2)*CDELTIM
                     DUP2 = 0.D0
                     DUPR = DUP1*CONC(I,J,K,IC)
                  ENDIF

                  COF(I,J,K,1)=COF(I,J,K,1) + CUR_COF*CDELTIM - DUP1
                  COF(I,J,K,4)=COF(I,J,K,4) - CUR_COF*CDELTIM - DUP2
                  RESID(I,J,K) = RESID(I,J,K) - DGY + DUPR

                  COF(I,J-1,K,1)=COF(I,J-1,K,1) 
     &                           + CUR_COF*CDELTIM + DUP2
                  COF(I,J-1,K,5)=COF(I,J-1,K,5) 
     &                           - CUR_COF*CDELTIM + DUP1
                  RESID(I,J-1,K) = RESID(I,J-1,K) + DGY - DUPR
               ENDIF
            ENDDO
         ENDDO
      ENDDO


C EDGES WITH NORMALS IN Z-DIRECTION
      DO K=KL1,KL2+1
       IF(K.EQ.KL1)THEN
        JL1=JL1V(K)
        JL2=JL2V(K)
       ELSE IF(K.LT.KL2+1)THEN
        JL1=MIN(JL1V(K-1),JL1V(K))
        JL2=MAX(JL2V(K-1),JL2V(K))
       ELSE
        JL1=JL1V(KL2)
        JL2=JL2V(KL2)
       ENDIF 
         DO J=JL1,JL2
            DO I=IL1,IL2
               IF ( ((KEYOUT(I,J,K-1).EQ.1).OR.(KEYOUT(I,J,K-1).EQ.-1))
     &               .AND.(KEYOUT(I,J,K).EQ.1) )  THEN
                  DELZ=DZREC(K+KOFF,NBLK)      ! DZ(K)
                  DELZ1=DZREC(K-1+KOFF,NBLK)   ! DZ(K-1)
C      HARMONIC AVERAGE FOR DIFFUSION
                  DFFZ=DISP(I,J,K,9)
                  DFFZM=DISP(I,J,K-1,9)
                  IF(DABS(DFFZ).GT.0.D0.AND.DABS(DFFZM).GT.0.D0) THEN
                     CUR_COF = 2.0D0/(DELZ/DFFZ+DELZ1/DFFZM)/DELZ
                  ELSE
                     CUR_COF = 0.D0
                  ENDIF
                  DGZ = CUR_COF*(CONC(I,J,K,IC)
     &                  -CONC(I,J,K-1,IC))*CDELTIM

C      UPWINDED CONCENTRATIONS
                  IF (VEL(I,J,K,3).GE.0.D0) THEN
                     DUP1 = 0.D0
                     DUP2 = VEL(I,J,K,3)*CDELTIM
                     DUPR = DUP2*CONC(I,J,K-1,IC)
                  ELSE
                     DUP1 = VEL(I,J,K,3)*CDELTIM
                     DUP2 = 0.D0
                     DUPR = DUP1*CONC(I,J,K,IC)
                  ENDIF

                  COF(I,J,K,1)=COF(I,J,K,1) + CUR_COF*CDELTIM - DUP1
                  COF(I,J,K,6)=COF(I,J,K,6) - CUR_COF*CDELTIM - DUP2
                  RESID(I,J,K) = RESID(I,J,K) - DGZ + DUPR

                  COF(I,J,K-1,1)=COF(I,J,K-1,1) 
     &                           + CUR_COF*CDELTIM + DUP1
                  COF(I,J,K-1,7)=COF(I,J,K-1,7) 
     &                           - CUR_COF*CDELTIM + DUP2
                  RESID(I,J,K-1) = RESID(I,J,K-1) + DGZ - DUPR
               ENDIF
            ENDDO
         ENDDO
      ENDDO

      END


C********************************************************
      SUBROUTINE TRWELLFIM(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &                   JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,CONC,
     &                   COF,RESID,IC)
C********************************************************
      IMPLICIT NONE
      INTEGER IDIM,JDIM,KDIM,LDIM,NBLK,IL1,IL2,KL1,KL2,IC,
     &        JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)

      REAL*4 COF(IDIM,JDIM,KDIM,$NUMTRCOF)

      REAL*8 CONC(IDIM,JDIM,KDIM,NSPECIES),RESID(IDIM,JDIM,KDIM)

      INCLUDE 'wells.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'

      INTEGER IOFF,JOFF,KOFF,IG,JG,KG,I,J,K,MERR,IW,L
      REAL*8 CWELL,CADD,DUM,VOL,VOLR

C---------------------------

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)

C LOOP OVER WELLS

      DO IW=1,NUMWEL

C  LOOK UP CONCENTRATION AT WELL

         CWELL=0.D0

         IF(NTRXTAB(IW,IC).NE.0) THEN

            CALL LOOKUP(NTRXTAB(IW,IC),CONCTIM_NEW,CWELL,DUM)
            IF(CWELL.LE.0.D0) CWELL = 0.D0

         ENDIF

         DO L=1,NUMELE(IW)

$MMODEL      IF (LOCWEL(6,L,IW).EQ.MYPRC_ALL.AND.LOCWEL(1,L,IW).EQ.NBLK) THEN
$NOMMOD      IF (LOCWEL(6,L,IW).EQ.MYPRC.AND.LOCWEL(1,L,IW).EQ.NBLK) THEN

            IG=LOCWEL(3,L,IW)
            JG=LOCWEL(4,L,IW)
            KG=LOCWEL(5,L,IW)

            I=IG-IOFF
            J=JG-JOFF
            K=KG-KOFF

            IF(KWELL(IW).GT.0) THEN ! CONNECT TO FLOW RATES FROM FLOW MODEL

               VOLR = VOLRATE(1,L,IW)
               IF(VOLR.GT.0.D0) THEN
C     INJECTION: USE INJECTION QUANTITY CWELL
                  CADD = CWELL
               ELSE
C     PRODUCTION: USE CONCENTRATION IN THE CELL
                  CADD = CONC(I,J,K,IC)
                  COF(I,J,K,1) = COF(I,J,K,1) - VOLR*CDELTIM
               ENDIF

               CADD = CADD *VOLR * CDELTIM
               RESID(I,J,K) = RESID(I,J,K) + CADD

            ELSE ! USE THE WELL RATE AS POINT SOURCE / SINK
               CADD = CWELL * CDELTIM
     &               * DXREC(IG,NBLK)*DYREC(JG,NBLK)*DZREC(KG,NBLK)
CGUS CHECK WHAT THIS DOES
               RESID(I,J,K) = RESID(I,J,K) + CADD

            ENDIF

          ENDIF

         ENDDO
      ENDDO

      END

C********************************************************
      SUBROUTINE TRUP(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &                   JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,CONC,
     &                   DUNK,IC)
C********************************************************
      IMPLICIT NONE
      
      INCLUDE 'trmodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,NBLK,IL1,IL2,KL1,KL2,IC,
     &        JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)
         
      REAL*8 CONC(IDIM,JDIM,KDIM,NSPECIES),DUNK(IDIM,JDIM,KDIM)
     
      INTEGER I,J,K

      DO K = KL1,KL2
      DO J = JL1V(K),JL2V(K)
      DO I = IL1,IL2
      IF (KEYOUT(I,J,K)/=1) CYCLE
         CONC(I,J,K,IC) = CONC(I,J,K,IC) + DUNK(I,J,K)
      ENDDO
      ENDDO
      ENDDO

      END

C********************************************************
      SUBROUTINE TRMAXRES(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &                   JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,
     &                   RESID,POR)
C********************************************************
      IMPLICIT NONE
      
      INCLUDE 'trmodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,NBLK,IL1,IL2,KL1,KL2,
     &        JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)

      REAL*8 RESID(IDIM,JDIM,KDIM),RESMAX
     
      REAL*4 POR(IDIM,JDIM,KDIM)

      RESMAX = MAXVAL(ABS(RESID(:,:,:)))
       
      FIM_KONVG = 0
      IF (RESMAX<FIM_CVTOL*MAXVAL(ABS(POR(:,:,:)))) FIM_KONVG = 1

      END         


C********************************************************
      SUBROUTINE TRREAFIM(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &                   JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,
     &                   CONCR,CONCN,POR,RESID,IC)
C********************************************************
      IMPLICIT NONE
      
      INCLUDE 'trmodel.h'

      INTEGER IDIM,JDIM,KDIM,LDIM,NBLK,IL1,IL2,KL1,KL2,IC,
     &        JL1V(KDIM),JL2V(KDIM),KEYOUT(IDIM,JDIM,KDIM)

      REAL*8 RESID(IDIM,JDIM,KDIM),CONCR(IDIM,JDIM,KDIM,NSPECIES),
     &       CONCN(IDIM,JDIM,KDIM,NSPECIES)
     
      REAL*4 POR(IDIM,JDIM,KDIM)

      INTEGER I,J,K

      DO K = KL1,KL2
      DO J = JL1V(K),JL2V(K)
      DO I = IL1,IL2
      IF (KEYOUT(I,J,K)/=1) CYCLE
      RESID(I,J,K) = RESID(I,J,K) + POR(I,J,K)
     &               * (CONCR(I,J,K,IC)-CONCN(I,J,K,IC))
      ENDDO
      ENDDO
      ENDDO

      END
