C  TRFLOW.F - UTILITY/POSTPROCESSING ROUTINES FOR FLOW 

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE TRPHIS
C  SUBROUTINE TRPHIS_IN
C  SUBROUTINE TRVEL
C  SUBROUTINE TRVEL_COMBINE

C  CODE HISTORY:

C M. PESZYNSKA, 1/01	INITIAL VERSION
C **************************************************************
      SUBROUTINE TRPHIS (NCALPHA,FLAG)
C **************************************************************
C COMPUTE PHASE SUMMED VELOCITIES FOR COMPONENT ALPHA
C AND STORES THEM IN PHISOLD (FLAG =0) OR IN PHIS (FLAG =1)
C
C IF (FLAG=OLD), COMPUTES PHISOLD CORRESPONDING TO T_N. 
C OTHERWISE., INTERPOLATES BETWEEN VALUES
C AT TIME T_N AND T_{N+1} TO GET PHIS CORRESPONDING TO THE MIDDLE OF 
C THE CONCENTRATION STEP.
C **************************************************************
      IMPLICIT NONE 

$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'

      INCLUDE 'trarydat.h'
      INCLUDE 'trmodel.h'

      INTEGER NCALPHA, FLAG

      LOGICAL ONCEONLY
      DATA ONCEONLY /.TRUE./

      INTEGER IPHI(6),  IPHI_SORP(3)
      DATA  IPHI /6*0/, IPHI_SORP/3*0/

      EXTERNAL TRPHIS_IN, GETPOR, CPYARYR8, TRPHIS_SORP

C --------------------------------
C SET PARAMETERS TO CALLWORK ARRAYS

      IF(ONCEONLY) THEN
         ONCEONLY = .FALSE.

         IPHI_SORP(1) = 2
         IPHI_SORP(2) = N_ROCK

         IF(NPHASES.EQ.1) THEN 
            
            IPHI(1)=2
  
         ELSE IF(NPHASES.GE.2) THEN

            IPHI(1)=4
            IPHI(2)=N_POR
            IPHI(3)=N_SATUN
            IPHI(4)=N_SATU

         ENDIF

      ENDIF

      IF(FLAG.EQ.OLD) THEN
         IPHI_SORP(3) = N_PHISN
      ELSE
         IPHI_SORP(3) = N_PHIS
      ENDIF

C PASS THE SPECIES NUMBER NCALPHA TO WORK ROUTINE

      CALPHA = NCALPHA

C FOR MORE THAN SINGLE PHASE FLOW DECIDE IF THE CAPACITIES
C ARE INTERPOLATED OR FROM THE FIRST TIME STEP. FOR SINGLE PHASE
C ONLY, COPY THE POROSITIES (NOT THE VOLUME FRACTIONS) TO PHIS AND PHISN.
C THIS HAS TO BE DONE AT ONLY THE FIRST TIME STEP

C      WRITE(*,*) 'COMPUTE OR NOT ? ' ,NPHASES,NSTEP,ICSTEP

      IF(NPHASES.EQ.1.)  THEN

         IF(NSTEP.EQ.1.AND.ICSTEP.EQ.1) THEN

            IF(FLAG.EQ.OLD) THEN
C               WRITE(*,*) 'RETRIEVE POROSITIES '
               IPHI(2)=N_POR
               IPHI(3)=N_PHISN
               CALL CALLWORK(GETPOR,IPHI)
            ELSE               
C               WRITE(*,*) 'COPY POROSITIES '
               IPHI(2)=N_PHISN
               IPHI(3)=N_PHIS
               CALL CALLWORK(CPYARYR8,IPHI)
            ENDIF
         ENDIF
      ELSE
         IF(FLAG.EQ.OLD) THEN            
            IPHI(5)=N_PHISN
            CFAC = (CONCTIM - FLOWTIM)/DELTIM
         ELSEIF(FLAG.EQ.NEW) THEN
            IPHI(5)=N_PHIS
            CFAC = (CONCTIM_NEW - FLOWTIM)/DELTIM
         ELSE
            STOP 'ERROR IN TRPHIS: UNSUPPORTED INTERPOLATION FLAG !!'
         ENDIF
         
         CALL CALLWORK(TRPHIS_IN,IPHI)
      ENDIF


C  COUNT LINEAR ADSORPTION INTO PHIS
      IF (USE_LIN_SORP) THEN
         IF(NPHASES.EQ.1.)  THEN

            IF(FLAG.EQ.OLD) THEN
               IPHI(2)=N_POR
               IPHI(3)=N_PHISN
            ELSE
               IPHI(2)=N_POR
               IPHI(3)=N_PHIS
            ENDIF
            CALL CALLWORK(GETPOR,IPHI)
            CALL CALLWORK(TRPHIS_SORP,IPHI_SORP)

         ELSE
            CALL CALLWORK(TRPHIS_SORP,IPHI_SORP)
         ENDIF

      ENDIF

      END


C ==================================================================
       SUBROUTINE TRPHIS_IN(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,
     &                      KL2,KEYOUT,NBLK,POR,SATN,SAT,PHIS)
C ------------------------------------------------------------------
C COMPUTES PHASE WEIGHTED VOLUME FRACTION FOR SPECIES CALPHA USING
C PARTITIONING COEFFICIENTS DEFINED IN TRANSPORT-CHEMISTRY MODULE.
C
C ROUTINE WORKS FOR TWO PHASE PROBLEMS WHERE SATURATION IS ASSUMED
C TO BE WATER SATURATION.
C
C NOTE THAT IF CFAC DEFINED IN THE CALLING ROUTINE 
C IS 0. (FLAG=OLD), COMPUTES VALUE CORRESPONDING
C TO THE OLD TIME STEP. OTHERWISE, IT INTERPOLATES BETWEEN VALUES
C AT TIME T_N AND T_{N+1} TO GET VALUE IN THE MIDDLE OF 
C THE CONCENTRATION STEP. FACTOR FOR INTERPOLATION IS PASSED IN CFAC.
C-------------------------------------------------------------------
       IMPLICIT NONE
$POWER       INCLUDE 'msjunk.h'

      INCLUDE 'layout.h'
      INCLUDE 'trmodel.h'
      
      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK
      INTEGER IL1, IL2, JL1, JL2, KL1, KL2
      
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
       
      REAL*8  SATN(IDIM,JDIM,KDIM,NPHASES-1),PHIS(IDIM,JDIM,KDIM),
     &     SAT(IDIM,JDIM,KDIM,NPHASES-1)
      REAL*4  POR(IDIM,JDIM,KDIM)
C -------------------------------------------------------------
      INTEGER I,J,K,IOFF,JOFF,KOFF,IERR
      
      REAL*8 SSAT,COF(NPHASES),COFS,DX,DY,DZ,SSAT1,SSAT2,SWAT1,SWAT2,
     &       SOIL1,SOIL2,SW,SO
      
C     INNER ORDERING OF PHASES IN HYDRO MODEL, SEE RELPRMS ETC.
      
      INTEGER OIL,WATER,GAS
      PARAMETER (WATER=1,OIL=2,GAS=3)    
      
C --------------------------------------------------------------
      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,IERR)
      IF(IERR.NE.0) RETURN

      IF(NPHASES.EQ.2) THEN
         COF(1) = EQLBCOEF(OIL,CALPHA)
         COF(2) = EQLBCOEF(WATER,CALPHA)
      ELSEIF(NPHASES.EQ.3) THEN
         COF(1) = EQLBCOEF(WATER,CALPHA)
         COF(2) = EQLBCOEF(OIL,CALPHA)
         COF(3) = EQLBCOEF(GAS,CALPHA)
      ELSE
         STOP 'ERROR IN TRPHIS_IN: UNSUPPORTED NO. OF PHASES'
      ENDIF

C ------------------
      DO K=KL1,KL2
         DO J=JL1V(K),JL2V(K)
            DO I=IL1,IL2
               IF(KEYOUT(I,J,K).EQ.1) THEN
                  
                DX=DXREC(I+IOFF,NBLK) 
                DY=DYREC(J+JOFF,NBLK)
                DZ=DZREC(K+KOFF,NBLK)

                IF(NPHASES.EQ.2) THEN
                   SSAT1 = SATN(I,J,K,1)
                   SSAT2 = SAT(I,J,K,1)
                   SSAT = SSAT1
                   IF(CFAC.NE.0.0D0) SSAT = SSAT + CFAC*(SSAT2-SSAT1)
                   PHIS (I,J,K) = POR(I,J,K)*((1.0D0-SSAT)*COF(1) 
     &                                               +SSAT*COF(2))
                ELSEIF(NPHASES.EQ.3) THEN
                   SWAT1=SATN(I,J,K,1)
                   SWAT2=SAT(I,J,K,1)
                   SOIL1=SATN(I,J,K,2)
                   SOIL2=SAT(I,J,K,2)
                   SW=SWAT1
                   SO=SOIL1
                   IF(CFAC.NE.0.0D0) THEN
                      SW = SW + CFAC*(SWAT2-SWAT1)
                      SO = SO + CFAC*(SOIL2-SOIL1)
                   ENDIF
                   PHIS (I,J,K) = POR(I,J,K)*(SW*COF(1)+SO*COF(2)
     &                                      +(1.0D0-SW-SO)*COF(3))
                ELSE
                   STOP 'ERROR IN TRPHIS_IN: UNSUPPORTED NO. OF PHASES'
                ENDIF 
C     WRITE (*,*) I,J,K,' PHIS =', SSAT,PHIS(I,J,K),CFAC,SATN(I,J,K,1),
C     &                            SAT(I,J,K,1)

             ENDIF
             
          ENDDO
       ENDDO
      ENDDO
      
      END


C ==================================================================
       SUBROUTINE TRPHIS_SORP(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &     JL1V,JL2V,KL1,KL2,
     &     KEYOUT,NBLK,
     &     ROCK, PHIS)
C ------------------------------------------------------------------
C COUNT LINEAR ADSORPTION INTO PHIS
C-------------------------------------------------------------------
       IMPLICIT NONE
$POWER       INCLUDE 'msjunk.h'

      INCLUDE 'layout.h'
      INCLUDE 'trmodel.h'

      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK
      INTEGER IL1, IL2, JL1, JL2, KL1, KL2
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)

      REAL*8  PHIS(IDIM,JDIM,KDIM)
      INTEGER ROCK(IDIM,JDIM,KDIM)

C -------------------------------------------------------------
      INTEGER I, J, K, IOFF, JOFF, KOFF, IERR
      REAL*8 DX,DY,DZ

C --------------------------------------------------------------
      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,IERR)
      IF(IERR.NE.0) RETURN

      DO K = KL1,KL2
         DZ=DZREC(K+KOFF,NBLK)
         DO J = JL1V(K),JL2V(K)
            DY=DYREC(J+JOFF,NBLK)
            DO I = IL1,IL2
               DX=DXREC(I+IOFF,NBLK)
               IF (KEYOUT(I,J,K).EQ.1) THEN
                  PHIS(I,J,K) = PHIS(I,J,K) + DX*DY*DZ*
     &                 EFF_SORP_CAPACITY(ROCK(I,J,K), CALPHA)
               ENDIF
            ENDDO
         ENDDO
      ENDDO

      END
C --------------------------------------------------------------


C **************************************************************
      SUBROUTINE TRVEL (NCALPHA, FLAG)
C **************************************************************
C COMPUTE PHASE AVERAGED VELOCITIES FOR COMPONENT ALPHA
C **************************************************************
      IMPLICIT NONE 

$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'trarydat.h'
      INCLUDE 'trmodel.h'

      INTEGER NCALPHA, FLAG

      LOGICAL ONCEONLY
      DATA ONCEONLY /.TRUE./

      INTEGER IVEL(15)
      DATA  IVEL /15*0/

      EXTERNAL TRVEL_COMBINE
C --------------------------------
C SET PARAMETERS TO CALLWORK ARRAYS

      IF(ONCEONLY) THEN
         ONCEONLY = .FALSE.
 
         IVEL(1)=5
         IVEL(2)=N_TRVELN
         IVEL(3)=N_TRVEL

         IVEL(4)=N_TRVX
         IVEL(5)=N_TRVY
         IVEL(6)=N_TRVZ

      ENDIF

      IF(SKIP_FLOW) IVEL(2)=N_TRVEL

      CALPHA = NCALPHA

      IF(FLAG.EQ.OLD) THEN
         CFAC = (CONCTIM_HALF - FLOWTIM)/DELTIM
      ELSEIF(FLAG.EQ.NEW) THEN
         CFAC = (CONCTIM_NEW - FLOWTIM)/DELTIM
      ELSEIF(FLAG.EQ.MID) THEN
         CFAC = (CONCTIM_HALF - FLOWTIM)/DELTIM
      ELSE
         STOP 'ERROR IN TRVEL: UNSUPPORTED INTERPOLATION FLAG !!'
      ENDIF
      
      CALL CALLWORK(TRVEL_COMBINE,IVEL)

      END

C ==================================================================
       SUBROUTINE TRVEL_COMBINE
     &     (IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &     JL1V,JL2V,KL1,KL2,
     &     KEYOUT,NBLK,
     &     VVELN, VVEL,
     &     VELX,VELY,VELZ)
C ------------------------------------------------------------------
C COMPUTES VELOCITIES ASSOCIATED WITH FACES 1,2,3 (X,Y,Z) OF
C EACH GRIDBLOCK AND SUMS THEM OVER PHASES 1,2 (OIL,WATER) USING
C PARTITIONING COEFFICIENTS DEFINED IN TRANSPORT-CHEMISTRY MODULE.
C
C ROUTINE WORKS FOR SINGLE AND TWO PHASE PROBLEMS. VELOCITIES IN
C           VVEL(IDIM,JDIM,KDIM,NPHASES,3)
C ARE ASSUMED TO BE ORDERED AS NPHASE =1 : NONWETTING PHASE, 
C                              NPHASE =2 : WATER PHASE.
C
C PUTS THE VALUES IN THE VELX, VELY, VELZ GRID ARRAYS:
C FOR EXAMPLE, VELX(I,J,K)  CONTAINS THE VALUE OF PHASE AVERAGED
C VELOCITY AT LOCATION I-1/2,J,K 
C-------------------------------------------------------------------
       IMPLICIT NONE
$POWER       INCLUDE 'msjunk.h'

      INCLUDE 'trmodel.h'

      INTEGER I, J, K, IL1, IL2, JL1, JL2, KL1, KL2
      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK
      
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
       
      REAL*8 VVELN(IDIM,JDIM,KDIM,NPHASES,3),
     &     VVEL(IDIM,JDIM,KDIM,NPHASES,3),
     &     VELX(IDIM,JDIM,KDIM), VELY(IDIM,JDIM,KDIM), 
     &     VELZ(IDIM,JDIM,KDIM)

C -------------------------------------------------------------
      INTEGER JLP,ILP,KLP,MKEY1,MKEY,I1,J1,K1,IERR
      INTEGER IOFF,JOFF,KOFF
      INTEGER IPHASE, IFACE, MIOFF, MJOFF, MKOFF
      
      REAL*8 VEL,VELN,COF(3), V1,V2, V
  
C     INNER ORDERING OF PHASES IN TRANSPORT-CHEMISTRY
      
      INTEGER    WATER,OIL,GAS
      PARAMETER (WATER=1,OIL=2,GAS=3)
      
C --------------------------------------------------------------
      IF(NPHASES.EQ.1) THEN
         COF(1) = 1.0D0
      ELSEIF(NPHASES.EQ.2) THEN
         COF(1) = EQLBCOEF(OIL,CALPHA)
         COF(2) = EQLBCOEF(WATER,CALPHA)
      ELSEIF(NPHASES.EQ.3) THEN
         COF(1) = EQLBCOEF(WATER,CALPHA)
         COF(2) = EQLBCOEF(OIL,CALPHA)
         COF(3) = EQLBCOEF(GAS,CALPHA)
      ELSE
         STOP 'ERROR IN TRVEL_COMBINE: UNSUPPORTED NO. OF PHASES !!'
      ENDIF

C      WRITE(*,*) 'EQP ',COF(1),COF(2)

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,IERR)

C --------------------------- MAIN LOOP OVER FACES  ---
        DO IFACE=1,3
                MIOFF=0
                MJOFF=0
                MKOFF=0
                IF (IFACE.EQ.1) MIOFF=1
                IF (IFACE.EQ.2) MJOFF=1
                IF (IFACE.EQ.3) MKOFF=1
        DO K=KL1,KL2+MKOFF
           IF (K.EQ.KL1) THEN
              JL1=JL1V(K)
              JLP=JL2V(K)+MJOFF
           ELSEIF (K.LE.KL2) THEN
              JL1=MIN(JL1V(K-1),JL1V(K))
              JLP=MAX(JL2V(K-1),JL2V(K))+MJOFF
           ELSE
              JL1=JL1V(KL2)
              JLP=JL2V(KL2)
           ENDIF

CCCCCCCCCCCC SHUYU TEST FOR ANDRA
C                       WRITE(*,*)
C                        WRITE(*,*)
C     &              'IFACE=', IFACE, '   K=',K,
C     &              ' MIOFF=',MIOFF, ' MJOFF=',MJOFF,  '  MKOFF=',MKOFF,
C     &              ' IOFF=',IOFF, ' JOFF=',JOFF,  '  KOFF=',KOFF,
C     &              ' JL1=',JL1,  ' JLP=',JLP,
C     &              ' IL1=',IL1,  ' IL2+MIOFF=',IL2+MIOFF
C                        WRITE(*,*)
CCCCCCCCCCCC
        DO J=JL1,JLP
        DO I=IL1,IL2+MIOFF

                I1=I-MIOFF
                J1=J-MJOFF
                K1=K-MKOFF

                MKEY=KEYOUT(I,J,K)
                MKEY1=KEYOUT(I1,J1,K1)

                IF ((MKEY.EQ.0).AND.(MKEY1.EQ.0))  GOTO 1
                IF ((MKEY.EQ.-1).AND.(MKEY1.EQ.-1))  GOTO 1

C       INNER FACE
                IF(MKEY.EQ.1.AND.MKEY1.EQ.1) GOTO 4
C       GHOST FACE
                IF (((MKEY.EQ.-1).AND.(MKEY1.EQ.1)) .OR.
     &              ((MKEY.EQ.1).AND.(MKEY1.EQ.-1))) GOTO 4
C       GHOST FACE WHEN INDICES ARE WAY OUT THEN IT CAN HEPPEN
C              THAT "THE OTHER KEYOUT" IS 0 INSTEAD OF -1

                IF (((MKEY.EQ.-1).AND.(MKEY1.EQ.0)) .OR.
     &              ((MKEY.EQ.0).AND.(MKEY1.EQ.-1))) GOTO 4
C       BOUNDARY FACE
                IF (((MKEY.EQ.0).AND.(MKEY1.EQ.1)) .OR.
     &               ((MKEY.EQ.1).AND.(MKEY1.EQ.0))) GOTO 4

                WRITE(*,*) " UNEXPECTED VALUES IN TRFLOW: ",
     &               MIOFF,I+IOFF,I1+IOFF,J+JOFF,K+KOFF
                WRITE(*,*) "      MKEY, MKEY1=", MKEY, MKEY1

                GOTO 1
 4              CONTINUE
C --------------------------
C ADD OVER PHASES USING COF(IPHASE) AS PHASE COEFFICIENT

                VEL = 0.0D0  

                DO IPHASE = 1,NPHASES
     
                   V1 = VVELN(I,J,K,IPHASE,IFACE)
                   V2 = VVEL (I,J,K,IPHASE,IFACE)
                   V = V1 + CFAC*(V2-V1)

                   IF(NPHASES.EQ.1) THEN 
                      VEL = V
                   ELSEIF(NPHASES.LE.3) THEN
                      VEL = VEL + COF(IPHASE)*V
                   ELSE
                      WRITE(*,*) 'ERROR IN TRVEL_COMBINE: UNSUPPORTED ',
     &                      'NO. OF PHASES !!'
                      STOP 13
                   ENDIF

CCCCCCCCCCCCC MPESZ TEST FOR ANDRA
C                   IF(I.EQ.3.AND.J.EQ.3.AND.IFACE.NE.3)
C     &                  WRITE(*,*) 
C     &                  IFACE,' TRVELCOMBINE ',I,J,K,V1,V2,V,VEL
CCCCCCCCCCCCC MPESZ TEST FOR ANDRA

CCCCCCCCCCCC SHUYU TEST FOR ANDRA
C                     IF(I.EQ.3.AND.J.LE.3.AND.IFACE.NE.3) THEN
C                       WRITE(*,*)
C                        WRITE(*,*)
C     &              'IFACE=',IFACE, '  IG=',I+IOFF, '  JG=',J+JOFF,
C     &              '  KG=',K+KOFF, '  VEL=',VEL
C                       WRITE(*,*) 
C     &              'IOFF=',IOFF, ' JOFF=',JOFF,  '  KOFF=',KOFF,
C     &              '  MJOFF=',MJOFF, '   JL1=',JL1,  ' JLP=',JLP
C                     ENDIF
CCCCCCCCCCCC


                ENDDO

                IF(IFACE.EQ.1) VELX(I,J,K) = VEL
                IF(IFACE.EQ.2) THEN
                     VELY(I,J,K) = VEL
                ENDIF
                IF(IFACE.EQ.3) VELZ(I,J,K) = VEL

   1    CONTINUE 


        ENDDO
        ENDDO
        ENDDO
        ENDDO

C ----------------------------------------------

   3    CONTINUE

        RETURN
        END
      
