C  TRGDV.F - TRANSPORT - GODUNOV SCHEME

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE TRADVECT
C  SUBROUTINE TRADV_GDV_IN1 
C  SUBROUTINE TRADV_GDV_IN2 
C  SUBROUTINE TRADV_GDV_IN3
C  SUBROUTINE TRADV_CSLOPE

C  CODE HISTORY:

C M. PESZYNSKA,     8/00   INITIAL VERSION
C SUNIL. G. THOMAS  06/08  FLUX RECONSTRUCTION AND SLOPE LIMITERS 
C                         (HIGHER ORDER GODUNOV)
C*********************************************************************
      SUBROUTINE TRADVECT (NALPHA,NERR)
C*********************************************************************

C  ROUTINE MAKES ONE TIME STEP FOR FLOW+TRANSPORT/CHEMISTRY
C  MULTIMODEL IN IPARS

C  NALPHA = TAG (NUMBER) OF SPECIES FOR WHICH WE DO ADVECTION
C  NERR = ERROR NUMBER STEPED BY 1 ON ERROR (INPUT & OUTPUT, INTEGER)

C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'

      INCLUDE 'trmodel.h'
      INCLUDE 'trarydat.h'

      INTEGER NALPHA, NERR

C SETUP FOR CALLWORK ROUTINE

      INTEGER IADV(9)
      EXTERNAL TRADVECT_GDV_CFL
      EXTERNAL TRADVECT_GDV_IN1
      EXTERNAL TRADVECT_GDV_IN2
      EXTERNAL TRADVECT_GDV_IN3
      DATA IADV /9*0/
C -----------------------------------------------------
      IADV (1) = 7
      IADV (2) = N_TRVX
      IADV (3) = N_TRVY
      IADV (4) = N_TRVZ
      IADV (5) = N_CONCARR(NALPHA)
      IADV (6) = N_CONCOLD 
      IADV (7) = N_PHISN
      IADV (8) = N_PHIS
      
      CALPHA = NALPHA 

C CHECK CFL CONDITION 

      CFLERR = .FALSE.
      CFLTSTEP = CDELTIM

      IF(.NOT.NO_CFL_CHECK) THEN
        CALL CALLWORK (TRADVECT_GDV_CFL,IADV)      
      ENDIF

$MANY      CALL MINIT(1,CFLTSTEP)

      IF(.NOT.NO_CFL_CHECK) THEN
      IF(CFLTSTEP.NE.CDELTIM) THEN
         IF(LEVELC) THEN
            WRITE(NFOUT,*) 'ERROR: CFL CONDITION NOT SATISFIED'
            WRITE(NFOUT,*) 'CSTEP=',CDELTIM,' CFL=',CFLTSTEP,
     &           ' AT FLOW STEP ',NSTEP,' TIMES:< ',
     &           CONCTIM,',',CONCTIM_NEW,'>'
            WRITE(*,*) 'ERROR: CFL CONDITION NOT SATISFIED'
            WRITE(*,*) 'CSTEP=',CDELTIM,' CFL=',CFLTSTEP,
     &           ' AT FLOW STEP ',NSTEP,' TIMES:< ',
     &           CONCTIM,',',CONCTIM_NEW,'>'
         ENDIF
         NERR = NERR + 1
         LEVERR = 3
         RETURN
      ENDIF
      ENDIF

C SAVE CONCENTRATIONS TO CONCOLD AND INITIALIZE CONC<-CONC*PHISOLD
      CALL CALLWORK (TRADVECT_GDV_IN1,IADV)

C NEED TO UPDATE CONCOLD TO GET CORRECT VALUE AT GHOST CELLS
$MANY      CALL TIMON(22)
$MANY      CALL UPDATE(N_CONCOLD,1)
$MANY      CALL TIMOFF(22)

C BOUNDARY CONTRIBUTIONS
      CFLERR = .FALSE.
      CFLTSTEP = CDELTIM

      CALL TRBD_ADV(NALPHA,NERR)

C FAULT-BLOCK INTERFACE CONTRIBUTIONS
$MORTAR      CALL TRMORTAR_ADV(NALPHA,NERR)
$DUAL      CALL TRDADVECT(NALPHA,NERR)


$MANY      CALL MINIT(1,CFLTSTEP)

      IF(.NOT.NO_CFL_CHECK) THEN
      IF(CFLTSTEP.NE.CDELTIM) THEN
         IF(LEVELC) THEN
            WRITE(NFOUT,*) 'ERROR: CFL CONDITION NOT SATISFIED AT BDRY'
            WRITE(NFOUT,*) 'CSTEP=',CDELTIM,' CFL=',CFLTSTEP,
     &           ' AT FLOW STEP ',NSTEP,' TIMES:< ',
     &           CONCTIM,',',CONCTIM_NEW,'>'
            WRITE(*,*) 'ERROR: CFL CONDITION NOT SATISFIED AT BDRY'
            WRITE(*,*) 'CSTEP=',CDELTIM,' CFL=',CFLTSTEP,
     &           ' AT FLOW STEP ',NSTEP,' TIMES:< ',
     &           CONCTIM,',',CONCTIM_NEW,'>'
         ENDIF
         NERR = NERR + 1
         LEVERR = 3
         RETURN
      ENDIF
      ENDIF

C ACTUAL TRANSPORT PASS: IN X,Y,Z DIRECTION
      IADV(1) = 8
      IADV(9) = N_TRSLP
      CALL CALLWORK (TRADVECT_GDV_IN2,IADV)

C WELL CONTRIBUTIONS 
      CFLERR = .FALSE.
      CFLTSTEP = CDELTIM

      CALL TRWELL(NALPHA,NERR)

$MANY      CALL MINIT(1,CFLTSTEP)

      IF(.NOT.NO_CFL_CHECK) THEN
      IF(CFLTSTEP.NE.CDELTIM) THEN
         IF(LEVELC) THEN
            WRITE(NFOUT,*) 'ERROR: CFL CONDITION NOT SATISFIED AT WELLS'
            WRITE(NFOUT,*) 'CSTEP=',CDELTIM,' CFL=',CFLTSTEP,
     &           ' AT FLOW STEP ',NSTEP,' TIMES:< ',
     &           CONCTIM,',',CONCTIM_NEW,'>'
            WRITE(*,*) 'ERROR: CFL CONDITION NOT SATISFIED AT WELLS'
            WRITE(*,*) 'CSTEP=',CDELTIM,' CFL=',CFLTSTEP,
     &           ' AT FLOW STEP ',NSTEP,' TIMES:< ',
     &           CONCTIM,',',CONCTIM_NEW,'>'
         ENDIF
         NERR = NERR + 1
         LEVERR = 3
         RETURN
      ENDIF
      ENDIF

C RESCALE THE CONCENTRATIONS FROM CONC*PHISOLD->CONC
      IADV(1) = 7
      IADV(9) = 0
      CALL CALLWORK (TRADVECT_GDV_IN3,IADV)

      END

C **************************************************************
      SUBROUTINE TRADVECT_GDV_IN1(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &     JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,VELX,VELY,VELZ,CONC,
     &     CONCOLD,PHISOLD,PHIS)
C **************************************************************
C VELX,VELY,VELZ - VELOCITY IN X,Y,Z DIRECTION
C CONC - CONCENTRATION OF SPECIES
C PHIS - CAPACITY
C **************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'trarydat.h'

      INTEGER IL1, IL2, JL1, JL2, KL1, KL2
      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK
      
      INTEGER JL1V(KDIM),JL2V(KDIM),   KEYOUT(IDIM,JDIM,KDIM)
      REAL*8  VELX(IDIM,JDIM,KDIM),   
     &     VELY(IDIM,JDIM,KDIM),   VELZ(IDIM,JDIM,KDIM),   
     &     CONC(IDIM,JDIM,KDIM), CONCOLD(IDIM,JDIM,KDIM),
     &      PHISOLD(IDIM,JDIM,KDIM),  PHIS(IDIM,JDIM,KDIM)

      REAL*8 DR1,DR2, VELTOL, CSTAR, VEL, SUMC, SUMCOLD
      PARAMETER (VELTOL=1.D-14)

      INTEGER I, J, K, IOFF, JOFF, KOFF, MERR, ILP, JLP,KLP
C ----------------------------------

C SAVE OLD CONCENTRATIONS AND SCALE CONC:= CONC*PHISOLD
      SUMCOLD = 0.D0

      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
               IF (KEYOUT(I,J,K).EQ.1) THEN
                  CONCOLD(I,J,K) = CONC(I,J,K)
                  CONC(I,J,K) = CONC(I,J,K)*PHISOLD(I,J,K)
                  SUMCOLD = SUMCOLD + CONC(I,J,K)
               ENDIF
            ENDDO
         ENDDO
      ENDDO

      END

C **************************************************************
      SUBROUTINE TRADVECT_GDV_IN2(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &     JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,VELX,VELY,VELZ,CONC,
     &     CONCOLD,PHISOLD,PHIS,TRSLP)
C **************************************************************
C VELX,VELY,VELZY - VELOCITY IN X,Y,Z DIRECTION
C CONC - CONCENTRATION OF SPECIES
C PHIS - CAPACITY
C **************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'trarydat.h'

      INTEGER IL1, IL2, JL1, JL2, KL1, KL2
      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK
      
      INTEGER JL1V(KDIM),JL2V(KDIM),   KEYOUT(IDIM,JDIM,KDIM)
      REAL*8  VELX(IDIM,JDIM,KDIM),   
     &     VELY(IDIM,JDIM,KDIM),   VELZ(IDIM,JDIM,KDIM),   
     &     CONC(IDIM,JDIM,KDIM),   CONCOLD(IDIM,JDIM,KDIM),
     &     PHISOLD(IDIM,JDIM,KDIM),  PHIS(IDIM,JDIM,KDIM),
     &     TRSLP(IDIM,JDIM,KDIM,3)

      REAL*8 DXM, DXP, DYM, DYP, DZM,DZP, DR1,DR2, VELTOL, CSTAR, VEL, 
     &       DCONC, CFLUX, SUMC, SUMCOLD, HALF
      PARAMETER (VELTOL=1.D-14, HALF = 0.5D0)

      INTEGER I, J, K, IOFF, JOFF, KOFF, MERR, ILP, JLP,KLP
C ----------------------------------

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)

C--------------------------C------------------------------------
C ADVECT SEPARATELY IN EACH DIRECTION: LOOP OVER EDGES
C COMMENTS ARE PROVIDED ONLY IN X DIRECTION

C==============
C X DIRECTION: 

      ILP = IL2 + 1
      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,ILP
            IF ( (KEYOUT(I-1,J,K).EQ.1.AND.KEYOUT(I,J,K).EQ.1).OR.
     &           (KEYOUT(I-1,J,K).EQ.1.AND.KEYOUT(I,J,K).EQ.-1).OR. 
     &           (KEYOUT(I-1,J,K).EQ.-1.AND.KEYOUT(I,J,K).EQ.1) ) THEN

C VELOCITY IS WELL DEFINED IF EITHER ONE OF THE CELLS BELONGS TO
C THE GRID

               VEL = VELX(I,J,K)*CDELTIM

C FIND THE VALUE TO BE ADVECTED BY UPWINDING ON THE EDGE, 
C IF VX>0, C_I IS USED, AND IF VX<0, C_I+1 IS USED. NOTE THAT
C CELLS I OR I+1 CAN BELONG TO THIS PROCESSOR OR ITS NEIGHBOR.
C IN THE LATTER CASE WE ONLY USE VALUES IN GHOST CELL REGION
C BUT WE DO NOT MODIFY THE CELL CONTENTS ON THIS PROCESSOR.
C IF THE EDGE IS PART OF EXTERNAL BOUNDARY, B. COND. APPLIES

               CSTAR = 0.0D0
               IF(VEL.GT.0.D0) THEN         
                  IF(KEYOUT(I-1,J,K).EQ.1.
     &                 OR.KEYOUT(I-1,J,K).EQ.-1) THEN
                     DXM = DXREC(I-1+IOFF,NBLK)
                     CSTAR = CONCOLD(I-1,J,K)
                     DCONC = HALF*TRFLXLMTR*TRSLP(I-1,J,K,1)*DXM 
                     CFLUX = VEL*(CSTAR+DCONC)
                  ENDIF
               ELSE                         
                  IF(KEYOUT(I,J,K).EQ.1.OR.KEYOUT(I,J,K).EQ.-1) 
     &                 THEN 
                     DXP = DXREC(I+IOFF,NBLK)
                     CSTAR = CONCOLD(I,J,K)
                     DCONC = -HALF*TRFLXLMTR*TRSLP(I,J,K,1)*DXP
                     CFLUX = VEL*(CSTAR+DCONC)
                  ENDIF
               ENDIF

C ADVECT ONLY THOSE CELLS ADJACENT TO THE EDGE THAT BELONG TO THE PROCESSOR
               
               IF (KEYOUT(I-1,J,K).EQ.1) THEN
                  CONC(I-1,J,K) = CONC(I-1,J,K) - CFLUX
               ENDIF
               IF (KEYOUT(I,J,K).EQ.1) THEN
                  CONC(I,J,K) = CONC(I,J,K) + CFLUX
               ENDIF

            ENDIF
 100        CONTINUE
            ENDDO
         ENDDO
      ENDDO

C==============
C Y DIRECTION: 

 11   CONTINUE
      DO K = KL1,KL2
         JLP = JL2V(K)+1
         DO J = JL1V(K), JLP
            DO I = IL1,IL2

            IF ( (KEYOUT(I,J-1,K).EQ.1.AND.KEYOUT(I,J,K).EQ.1).OR.
     &           (KEYOUT(I,J-1,K).EQ.1.AND.KEYOUT(I,J,K).EQ.-1).OR. 
     &           (KEYOUT(I,J-1,K).EQ.-1.AND.KEYOUT(I,J,K).EQ.1) ) THEN

               VEL = VELY(I,J,K)*CDELTIM

               CSTAR = 0.0D0              
               IF(VEL.GT.0.D0) THEN
                 IF(KEYOUT(I,J-1,K).EQ.1.
     &                 OR.KEYOUT(I,J-1,K).EQ.-1) THEN 
                    DYM = DYREC(J-1+JOFF,NBLK)
                    CSTAR = CONCOLD(I,J-1,K)
                    DCONC = HALF*TRFLXLMTR*TRSLP(I,J-1,K,2)*DYM
                    CFLUX = VEL*(CSTAR+DCONC)
                 ENDIF
                  
               ELSE
                  IF(KEYOUT(I,J,K).EQ.1.OR.KEYOUT(I,J,K).EQ.-1) 
     &                 THEN
                     DYP = DYREC(J+JOFF,NBLK)
                     CSTAR = CONCOLD(I,J,K)
                     DCONC = -HALF*TRFLXLMTR*TRSLP(I,J,K,2)*DYP
                     CFLUX = VEL*(CSTAR+DCONC)
                  ENDIF
               ENDIF

               IF (KEYOUT(I,J-1,K).EQ.1) THEN
                  CONC(I,J-1,K) = CONC(I,J-1,K) - CFLUX
               ENDIF
               IF (KEYOUT(I,J,K).EQ.1) THEN
                  CONC(I,J,K) = CONC(I,J,K) + CFLUX
               ENDIF

            ENDIF
 200        CONTINUE
            ENDDO
         ENDDO
      ENDDO

C==============
C Z DIRECTION: 

      KLP = KL2 + 1
      DO K = KL1,KLP
      IF ( K.EQ.KL1 ) THEN
         JL1=JL1V(K)
         JL2=JL2V(K)
      ELSE IF (K.LT.KLP) THEN
         JL1=MIN( JL1V(K-1) , JL1V(K) )
         JL2=MAX( JL2V(K-1) , JL2V(K) )
      ELSE
         JL1=JL1V(KL2)
         JL2=JL2V(KL2)
      ENDIF
      DO J=JL1,JL2
         DO I = IL1,IL2
            IF ( (KEYOUT(I,J,K-1).EQ.1.AND.KEYOUT(I,J,K).EQ.1).OR.
     &           (KEYOUT(I,J,K-1).EQ.1.AND.KEYOUT(I,J,K).EQ.-1).OR. 
     &           (KEYOUT(I,J,K-1).EQ.-1.AND.KEYOUT(I,J,K).EQ.1) ) THEN

               VEL = VELZ(I,J,K)*CDELTIM

               CSTAR = 0.0D0    
               IF(VEL.GT.0.D0) THEN
                  IF(KEYOUT(I,J,K-1).EQ.1.
     &                 OR.KEYOUT(I,J,K-1).EQ.-1) THEN
                     DZM = DZREC(K-1+KOFF,NBLK)  
                     CSTAR = CONCOLD(I,J,K-1)
                     DCONC = HALF*TRFLXLMTR*TRSLP(I,J,K-1,3)*DZM
                     CFLUX = VEL*(CSTAR+DCONC)
                  ENDIF
                  
               ELSE
                  IF(KEYOUT(I,J,K).EQ.1.OR.KEYOUT(I,J,K).EQ.-1) 
     &                 THEN
                     DZP = DZREC(K+KOFF,NBLK) 
                     CSTAR = CONCOLD(I,J,K)
                     DCONC = -HALF*TRFLXLMTR*TRSLP(I,J,K,3)*DZP
                     CFLUX = VEL*(CSTAR+DCONC)
                  ENDIF
               ENDIF

               IF (KEYOUT(I,J,K-1).EQ.1) THEN
                  CONC(I,J,K-1) = CONC(I,J,K-1) - CFLUX
               ENDIF
               IF (KEYOUT(I,J,K).EQ.1) THEN
                  CONC(I,J,K) = CONC(I,J,K) + CFLUX
               ENDIF

            ENDIF
 300        CONTINUE
            ENDDO
         ENDDO
      ENDDO

      END

C **************************************************************
      SUBROUTINE TRADVECT_GDV_IN3(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &     JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,VELX,VELY,VELZ,CONC,
     &     CONCOLD,PHISOLD,PHIS)
C **************************************************************
C VELX,VELY,VELZY - VELOCITY IN X,Y,Z DIRECTION
C CONC - CONCENTRATION OF SPECIES
C PHIS - CAPACITY
C **************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'trarydat.h'

      INTEGER IL1, IL2, JL1, JL2, KL1, KL2
      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK
      
      INTEGER JL1V(KDIM),JL2V(KDIM),   KEYOUT(IDIM,JDIM,KDIM)
      REAL*8  VELX(IDIM,JDIM,KDIM),   
     &     VELY(IDIM,JDIM,KDIM),   VELZ(IDIM,JDIM,KDIM),   
     &     CONC(IDIM,JDIM,KDIM), CONCOLD(IDIM,JDIM,KDIM),
     &      PHISOLD(IDIM,JDIM,KDIM),  PHIS(IDIM,JDIM,KDIM)

      REAL*8 VELTOL, CSTAR, VEL, SUMC, SUMCOLD
      PARAMETER (VELTOL=1.D-14)

      INTEGER I, J, K, IOFF, JOFF, KOFF, MERR, ILP, JLP,KLP
C ----------------------------------

C FIND THE SOLUTION IN CONCENTRATIONS, SCALE CONC:= CONC/PHIS

      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,IL2
               IF (KEYOUT(I,J,K).EQ.1) THEN

                  CONC(I,J,K) = CONC(I,J,K)/PHIS(I,J,K)

               ENDIF
            ENDDO
         ENDDO
      ENDDO

      END


C **************************************************************
      SUBROUTINE TRADVECT_GDV_CFL(IDIM,JDIM,KDIM,LDIM,IL1,IL2,
     &     JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,VELX,VELY,VELZ,CONC,
     &     CONCOLD,PHISOLD,PHIS)
C **************************************************************
C VELX,VELY,VELZY - VELOCITY IN X,Y,Z DIRECTION
C CONC - CONCENTRATION OF SPECIES
C PHIS - CAPACITY
C **************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'trarydat.h'

      INTEGER IL1, IL2, JL1, JL2, KL1, KL2
      INTEGER IDIM, JDIM, KDIM, LDIM, NBLK
      
      INTEGER JL1V(KDIM),JL2V(KDIM),   KEYOUT(IDIM,JDIM,KDIM)
      REAL*8  VELX(IDIM,JDIM,KDIM),   
     &     VELY(IDIM,JDIM,KDIM),   VELZ(IDIM,JDIM,KDIM),   
     &     CONC(IDIM,JDIM,KDIM), CONCOLD(IDIM,JDIM,KDIM),
     &      PHISOLD(IDIM,JDIM,KDIM),  PHIS(IDIM,JDIM,KDIM)

      REAL*8 DR1,DR2, VELTOL, CSTAR, VEL, SUMC, SUMCOLD
      PARAMETER (VELTOL=1.D-14)

      INTEGER I, J, K, IOFF, JOFF, KOFF, MERR, ILP, JLP,KLP
C ----------------------------------

C--------------------------C------------------------------------
C CHECK CFL CONDITION IN EACH DIRECTION
C==============
C X DIRECTION: 

      ILP = IL2 + 1
      DO K = KL1,KL2
         DO J = JL1V(K),JL2V(K)
            DO I = IL1,ILP
               IF (KEYOUT(I-1,J,K).EQ.1) THEN
                  VEL = VELX(I,J,K)
                  IF(CDELTIM*DABS(VEL).GT.DABS(PHISOLD(I-1,J,K))) THEN
                     CFLERR=.TRUE.
                     CFLTSTEP=DABS(PHISOLD(I-1,J,K)/VEL)
                  ENDIF
               ENDIF
               IF (KEYOUT(I,J,K).EQ.1) THEN
                  VEL = VELX(I,J,K)
                  IF(CDELTIM*DABS(VEL).GE.DABS(PHISOLD(I,J,K))) THEN
                     WRITE(*,*) I,J,K,'CFL X ',CDELTIM*DABS(VEL),
     &                    DABS(PHISOLD(I,J,K)),VEL
                     CFLERR=.TRUE.
                     CFLTSTEP=DABS(PHISOLD(I,J,K)/VEL)
                  ENDIF
               ENDIF
 100           CONTINUE
            ENDDO
         ENDDO
      ENDDO
      
C==============
C Y DIRECTION: 

      DO K = KL1,KL2
         JLP = JL2V(K)+1
         DO J = JL1V(K), JLP
            DO I = IL1,IL2
               IF (KEYOUT(I,J-1,K).EQ.1) THEN
                  VEL = VELY(I,J,K)
                  IF(CDELTIM*DABS(VEL).GE.DABS(PHISOLD(I,J-1,K))) THEN
                     CFLERR=.TRUE.
                     CFLTSTEP=DABS(PHISOLD(I,J-1,K)/VEL)
                  ENDIF
               ENDIF
               IF (KEYOUT(I,J,K).EQ.1) THEN
                  VEL = VELY(I,J,K)
                  IF(CDELTIM*DABS(VEL).GE.DABS(PHISOLD(I,J,K))) THEN
                     CFLERR=.TRUE.
                     CFLTSTEP=DABS(PHISOLD(I,J,K)/VEL)
                  ENDIF
               ENDIF
 200           CONTINUE
            ENDDO
         ENDDO
      ENDDO
      
C==============
C Z DIRECTION: 

      KLP = KL2 + 1
      DO K = KL1,KLP
         IF ( K.EQ.KL1 ) THEN
            JL1=JL1V(K)
            JL2=JL2V(K)
         ELSE IF (K.LT.KLP) THEN
            JL1=MIN( JL1V(K-1) , JL1V(K) )
            JL2=MAX( JL2V(K-1) , JL2V(K) )
         ELSE
            JL1=JL1V(KL2)
            JL2=JL2V(KL2)
         ENDIF
         DO J=JL1,JL2
            DO I = IL1,IL2
               IF (KEYOUT(I,J,K-1).EQ.1) THEN
                  VEL = VELZ(I,J,K)
                  IF(CDELTIM*DABS(VEL).GE.DABS(PHISOLD(I,J,K-1))) THEN
                     CFLERR=.TRUE.
                     CFLTSTEP=DABS(PHISOLD(I,J,K-1)/VEL)
                  ENDIF
               ENDIF
               IF (KEYOUT(I,J,K).EQ.1) THEN
                  VEL = VELZ(I,J,K)
                  IF(CDELTIM*DABS(VEL).GE.DABS(PHISOLD(I,J,K))) THEN
                     CFLERR=.TRUE.
                     CFLTSTEP=DABS(PHISOLD(I,J,K)/VEL)
                  ENDIF
               ENDIF
 300           CONTINUE
            ENDDO
         ENDDO
      ENDDO

      END

C*********************************************************************
      SUBROUTINE TRCSLP(NALPHA)
C*********************************************************************
C  DRIVER ROUTINE TO COMPUTE ELEMENT "SLOPES" FOR ADVECTION SCALAR 
C  VARIABLE FOR USE IN HIGHER ORDER GODUNOV FLUX RECONSTRUCTION.
C  INPUT: 
C     NALPHA = TAG (NUMBER) OF SPECIES 
C*********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'trarydat.h'

      INTEGER NALPHA,ISLP(3)
      LOGICAL ONCEONLY 
      EXTERNAL TRCSLPW
      DATA ISLP/3*0/,ONCEONLY/.TRUE./

      IF(ONCEONLY) THEN
         ONCEONLY = .FALSE.
         ISLP (1) = 2
         ISLP (3) = N_TRSLP
      ENDIF

      ISLP (2) = N_CONCARR(NALPHA)
      CALL CALLWORK(TRCSLPW,ISLP)

      RETURN
      END

C***********************************************************************
      SUBROUTINE TRCSLPW(IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,
     &                         KL1,KL2,KEYOUT,NBLK,CONC,TRSLP)
C***********************************************************************
C INPUT:
C    CONC - CURRENT CONCENTRATION OF SPECIES [REAL*8, lbM/cu-ft]
C OUTPUT
C    TRSLP - SCALAR ELEMENT "SLOPES".
C NOTE: Minor modification needed for multi-block case at sub-domain 
C       interfaces.
C***********************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'trarydat.h'
      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,JL1V(KDIM),JL2V(KDIM),
     &        KEYOUT(IDIM,JDIM,KDIM),NBLK
      REAL*8 CONC(IDIM,JDIM,KDIM),TRSLP(IDIM,JDIM,KDIM,3)
C-----------------------------------------------------------------------
      INTEGER I,J,K,IM1,IP1,JM1,JP1,KM1,KP1,IOFF,JOFF,KOFF,IERR,IPH
      REAL*8 DX,DY,DZ,DXC,DXM,DXP,DYC,DYM,DYP,DZC,DZM,DZP,CNC,CNCM,CNCP,
     &       DCNCMDX,DCNCPDX,DCNCMDY,DCNCPDY,DCNCMDZ,DCNCPDZ,SIGNT,ARG1,
     &       ARG2,HALF,ZERO
      PARAMETER (HALF=0.5D0,ZERO=0.0D0)
      REAL*8 HRMNCAVG,SGNUMT
C-----------------------------------------------------------------------

C  GET BLOCK OFFSETS
      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,IERR)

C----------get element slopes

      DO K = KL1,KL2
         DO J=JL1V(K),JL2V(K)
            DO I=IL1,IL2
               IF(KEYOUT(I,J,K) <= 0) CYCLE
               IM1 = I-1
               IP1 = I+1
               JM1 = J-1
               JP1 = J+1
               KM1 = K-1
               KP1 = K+1
               DX = DXREC(I+IOFF,NBLK)
               DY = DYREC(J+JOFF,NBLK)
               DZ = DZREC(K+KOFF,NBLK)
               CNC = CONC(I,J,K)

C----------x-direction slopes
C               IF(I == IL1) THEN
               IF(KEYOUT(IP1,J,K)/=0 .AND. KEYOUT(IM1,J,K)==0) THEN
                  DXM = DX
                  DXP = DXREC(IP1+IOFF,NBLK)
                  DXC = HALF*(DX+DXP)
                  CNCM = CNC
                  CNCP = CONC(IP1,J,K)
C               ELSEIF(I == IL2) THEN
               ELSEIF(KEYOUT(IM1,J,K)/=0 .AND. KEYOUT(IP1,J,K)==0) THEN
                  DXP = DX
                  DXM = DXREC(IM1+IOFF,NBLK)
                  DXC = HALF*(DX+DXM)
                  CNCM = CONC(IM1,J,K)
                  CNCP = CNC
               ELSEIF(KEYOUT(IM1,J,K)==0 .AND. KEYOUT(IP1,J,K)==0) THEN
                  DXP = DX
                  DXM = DX
                  DXC = DX
                  CNCM = CNC
                  CNCP = CNC
               ELSE
                  DXM = DXREC(IM1+IOFF,NBLK)
                  DXP = DXREC(IP1+IOFF,NBLK)
                  DXC = DX+HALF*(DXM+DXP)
                  CNCM = CONC(IM1,J,K)
                  CNCP = CONC(IP1,J,K)
               ENDIF

               IF(NTRFLXLMT == 0) THEN
                  TRSLP(I,J,K,1) = (CNCP-CNCM)/DXC
               ELSEIF(NTRFLXLMT == 1) THEN
                  DCNCMDX = (CNC-CNCM)/(HALF*(DXM+DX))
                  DCNCPDX = (CNCP-CNC)/(HALF*(DXP+DX))
                  TRSLP(I,J,K,1) =
     &               MIN(MAX(DCNCMDX,ZERO),MAX(DCNCPDX,ZERO))
     &              +MAX(MIN(DCNCMDX,ZERO),MIN(DCNCPDX,ZERO))
               ELSEIF(NTRFLXLMT == 2) THEN
                  DCNCMDX = (CNC-CNCM)/(HALF*(DXM+DX))
                  DCNCPDX = (CNCP-CNC)/(HALF*(DXP+DX))
                  TRSLP(I,J,K,1) = HRMNCAVG(DCNCMDX,DCNCPDX)
               ELSEIF(NTRFLXLMT == 3) THEN
                  DCNCMDX = (CNC-CNCM)/(HALF*(DXM+DX))
                  DCNCPDX = (CNCP-CNC)/(HALF*(DXP+DX))
                  SIGNT = SGNUMT(DCNCMDX,DCNCPDX)
                  ARG1 = MIN(ABS(DCNCMDX),ABS(DCNCPDX))
                  ARG2 = HALF*MAX(ABS(DCNCMDX),ABS(DCNCPDX))
                  TRSLP(I,J,K,1) = SIGNT*MIN(ARG1,ARG2)
               ELSE
                  WRITE(0,*) 'WARNING: FLUX LIMITER TYPE UNDEFINED ',
     &                       'DEFAULTS TO 0 (CENTERED DIFFERENCES)'
                  TRSLP(I,J,K,1) = (CNCP-CNCM)/DXC
               ENDIF

C----------y-direction slopes
C               IF(J == JL1V(K)) THEN
               IF(KEYOUT(I,JP1,K)/=0 .AND. KEYOUT(I,JM1,K)==0) THEN
                  DYM = DY
                  DYP = DYREC(JP1+JOFF,NBLK)
                  DYC = HALF*(DY+DYP)
                  CNCM = CNC
                  CNCP = CONC(I,JP1,K)
C               ELSEIF(J == JL2V(K)) THEN
               ELSEIF(KEYOUT(I,JM1,K)/=0 .AND. KEYOUT(I,JP1,K)==0) THEN
                  DYM = DYREC(JM1+JOFF,NBLK)
                  DYP = DY
                  DYC = HALF*(DY+DYM)
                  CNCM = CONC(I,JM1,K)
                  CNCP = CNC
               ELSEIF(KEYOUT(I,JM1,K)==0 .AND. KEYOUT(I,JP1,K)==0) THEN
                  DYM = DY
                  DYP = DY
                  DYC = DY
                  CNCM = CNC
                  CNCP = CNC
               ELSE
                  DYM = DYREC(JM1+JOFF,NBLK)
                  DYP = DYREC(JP1+JOFF,NBLK)
                  DYC = DY+HALF*(DYM+DYP)
                  CNCM = CONC(I,JM1,K)
                  CNCP = CONC(I,JP1,K)
               ENDIF

               IF(NTRFLXLMT == 0) THEN
                  TRSLP(I,J,K,2) = (CNCP-CNCM)/DYC
               ELSEIF(NTRFLXLMT == 1) THEN
                  DCNCMDY = (CNC-CNCM)/(HALF*(DYM+DY))
                  DCNCPDY = (CNCP-CNC)/(HALF*(DYP+DY))
                  TRSLP(I,J,K,2) =
     &               MIN(MAX(DCNCMDY,ZERO),MAX(DCNCPDY,ZERO))
     &              +MAX(MIN(DCNCMDY,ZERO),MIN(DCNCPDY,ZERO))
               ELSEIF(NTRFLXLMT == 2) THEN
                  DCNCMDY = (CNC-CNCM)/(HALF*(DYM+DY))
                  DCNCPDY = (CNCP-CNC)/(HALF*(DYP+DY))
                  TRSLP(I,J,K,2) = HRMNCAVG(DCNCMDY,DCNCPDY)
               ELSEIF(NTRFLXLMT == 3) THEN
                  DCNCMDY = (CNC-CNCM)/(HALF*(DYM+DY))
                  DCNCPDY = (CNCP-CNC)/(HALF*(DYP+DY))
                  SIGNT = SGNUMT(DCNCMDY,DCNCPDY)
                  ARG1 = MIN(ABS(DCNCMDY),ABS(DCNCPDY))
                  ARG2 = HALF*MAX(ABS(DCNCMDY),ABS(DCNCPDY))
                  TRSLP(I,J,K,2) = SIGNT*MIN(ARG1,ARG2)
               ELSE
                  WRITE(0,*) 'WARNING: FLUX LIMITER TYPE UNDEFINED ',
     &                       'DEFAULTS TO 0 (CENTERED DIFFERENCES)'
                  TRSLP(I,J,K,2) = (CNCP-CNCM)/DYC
               ENDIF

C----------z-direction slopes
C               IF(K == KL1) THEN
               IF(KEYOUT(I,J,KP1)/=0 .AND. KEYOUT(I,J,KM1)==0) THEN
                  DZM = DZ
                  DZP = DZREC(KP1+KOFF,NBLK)
                  DZC = HALF*(DZ+DZP)
                  CNCM = CNC
                  CNCP = CONC(I,J,KP1)
C               ELSEIF(K == KL2) THEN
               ELSEIF(KEYOUT(I,J,KM1)/=0 .AND. KEYOUT(I,J,KP1)==0) THEN
                  DZM = DZREC(KM1+KOFF,NBLK)
                  DZP = DZ
                  DZC = HALF*(DZ+DZM)
                  CNCM = CONC(I,J,KM1)
                  CNCP = CNC
               ELSEIF(KEYOUT(I,J,KM1)==0 .AND. KEYOUT(I,J,KP1)==0) THEN
                  DZM = DZ
                  DZP = DZ
                  DZC = DZ
                  CNCM = CNC
                  CNCP = CNC
               ELSE
                  DZM = DZREC(KM1+KOFF,NBLK)
                  DZP = DZREC(KP1+KOFF,NBLK)
                  DZC = DZ+HALF*(DZM+DZP)
                  CNCM = CONC(I,J,KM1)
                  CNCP = CONC(I,J,KP1)
               ENDIF

               IF(NTRFLXLMT == 0) THEN
                  TRSLP(I,J,K,3) = (CNCP-CNCM)/DZC
               ELSEIF(NTRFLXLMT == 1) THEN
                  DCNCMDZ = (CNC-CNCM)/(HALF*(DZM+DZ))
                  DCNCPDZ = (CNCP-CNC)/(HALF*(DZP+DZ))
                  TRSLP(I,J,K,3) =
     &               MIN(MAX(DCNCMDZ,ZERO),MAX(DCNCPDZ,ZERO))
     &              +MAX(MIN(DCNCMDZ,ZERO),MIN(DCNCPDZ,ZERO))
               ELSEIF(NTRFLXLMT == 2) THEN
                  DCNCMDZ = (CNC-CNCM)/(HALF*(DZM+DZ))
                  DCNCPDZ = (CNCP-CNC)/(HALF*(DZP+DZ))
                  TRSLP(I,J,K,3) = HRMNCAVG(DCNCMDZ,DCNCPDZ)
               ELSEIF(NTRFLXLMT == 3) THEN
                  DCNCMDZ = (CNC-CNCM)/(HALF*(DZM+DZ))
                  DCNCPDZ = (CNCP-CNC)/(HALF*(DZP+DZ))
                  SIGNT = SGNUMT(DCNCMDZ,DCNCPDZ)
                  ARG1 = MIN(ABS(DCNCMDZ),ABS(DCNCPDZ))
                  ARG2 = HALF*MAX(ABS(DCNCMDZ),ABS(DCNCPDZ))
                  TRSLP(I,J,K,3) = SIGNT*MIN(ARG1,ARG2)
               ELSE
                  WRITE(0,*) 'WARNING: FLUX LIMITER TYPE UNDEFINED ',
     &                       'DEFAULTS TO 0 (CENTERED DIFFERENCES)'
                  TRSLP(I,J,K,3) = (CNCP-CNCM)/DZC
               ENDIF

            END DO
         END DO
      END DO

      RETURN
      END

C***********************************************************************
      REAL*8 FUNCTION SGNUMT(A,B)
C***********************************************************************
      IMPLICIT NONE
C***********************************************************************
C  THIS FUNCTION RETURNS SGN(A)+SGN(B) (USED IN SUPER-BEE FLUX LIMITER)
C  INPUT:
C     A,B  (REAL*8)
C  OUTPUT: 
C     SGNUMT
C-----------------------------------------------------------------------
      REAL*8 A,B,ZERO,ONE,S1,S2
      PARAMETER (ZERO=0.0D0,ONE=1.0D0)
C-----------------------------------------------------------------------

      IF(A.GT.ZERO) THEN
        S1 = ONE
      ELSEIF(A.LT.ZERO) THEN
        S1 = -ONE
      ELSE
        S1 = ZERO
      ENDIF

      IF(B.GT.ZERO) THEN
        S2 = ONE
      ELSEIF(B.LT.ZERO) THEN
        S2 = -ONE
      ELSE
        S2 = ZERO
      ENDIF

      SGNUMT = S1+S2

      RETURN
      END

C***********************************************************************
      REAL*8 FUNCTION HRMNCAVG(A,B)
C***********************************************************************
      IMPLICIT NONE
C***********************************************************************
C  THIS FUNCTION RETURNS HARMONIC MEAN OF A AND B
C  INPUT:
C     A,B  (REAL*8)
C  OUTPUT:
C     HRMNCAVG
C-----------------------------------------------------------------------
      REAL*8 A,B,ZERO,ONE,TWO,INV1,INV2
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0)
C-----------------------------------------------------------------------

      IF(A*B > ZERO) THEN
         INV1 = ONE/A
         INV2 = ONE/B
         HRMNCAVG = TWO/(INV1+INV2)
      ELSE
         HRMNCAVG = ZERO
      ENDIF

      RETURN
      END
