C  TRISDAT.DF - INPUT TRANSPORT CHEMISTRY MULTI MODEL INITIAL SCALAR DATA
C 8/00 M. PESZYNSKA - INITIAL VERSION 
C 9/00 SHUYU SUN    - DETAIL ADDED
C 3/07 S. G. THOMAS - MODS FOR MULTIBLOCK
C 7/08 S. G. THOMAS - MODS FOR EVMFEM
C 6/16 G. SINGH     - FULLY IMPLICIT REACTIVE FLOW AND TRANSPORT
C*********************************************************************
      SUBROUTINE TRISDAT (NERR)
C*********************************************************************
      IMPLICIT NONE 
      INTEGER  NERR, NDUM, IMOD, L, LL, KERR, MP

      INCLUDE 'control.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'blkary.h'
      INCLUDE 'unitsex.h'
$COMP      INCLUDE 'xmodel.h'
$CMFMFE      INCLUDE 'xmodel.h'

      DATA INITIALCHEM /.TRUE./

      CHARACTER*79 FLOWMODEL_NAME
      CHARACTER*20 WORKSTR

C      REAL*8 DUMMY($MXPHAST * $MXNSPEC)
C-----------------------------------
      KERR = 0
      IF (NERR.NE.0) RETURN

      FLOWMODEL=0

C INPUT THE FLOW MODEL NAME

      CALL GETVALS('FLOW_MODEL ',FLOWMODEL_NAME,'CS',0,
     &     0,0,79,NDUM,NERR)

C PROCESS THE NAME TO GET FLOWMODEL NUMBER AND SET MODELON 
C TRUE FOR THOSE MODELS. NOTE: THIS HAS TO BE MADE REFLECTIVE 
C OF ACTIVE PROCESSOR ASSIGNMENT WHICH IN TURN WILL INVOLVE 
C MAKING FLOWMODEL AN NBLK-DIMENSIONED ARRAY!! SEE LINE 930 
C OR THEREABOUTS FOR A SIMILAR IMPLEMENTATION IN IDATA.DF

      DO IMOD = 1, $MXMOD
                  
         IF (FLOWMODEL_NAME.EQ.MODEL_NAMES(IMOD)) THEN
            FLOWMODEL=IMOD
            IF(LEVELC) THEN
                 WRITE(NFOUT,
     &         "(/' FLOW MODEL (IMOD=', I2, ')  ', T56, A23/)" )
     &            IMOD, MODEL_NAMES(IMOD)
            END IF 
            IF(IMOD.EQ.$TMODEL) THEN
               MODELON($TMODEL)=.TRUE.
            ELSEIF(IMOD.EQ.$HMODEL) THEN
               MODELON($HMODEL)=.TRUE.
            ELSE
               WRITE(0,*) "WARNING: UNLISTED FLOW MODEL ACTIVE!!"
            ENDIF
            GO TO 1
         ENDIF
      ENDDO
 1    CONTINUE
      
      IF(FLOWMODEL.NE.SINGLEI
     &     .AND.FLOWMODEL.NE.HYDROI 
     &     .AND.FLOWMODEL.NE.COMP 
     &     .AND.FLOWMODEL.NE.AIR 
     &     ) THEN
         NERR = NERR + 1 
         IF(LEVELC) THEN
            WRITE(NFOUT,*) 
     &           'ERROR: MODEL ',FLOWMODEL,
     &           ' CANNOT BE USED AS FLOWMODEL'
         ENDIF
      ENDIF

      
C GET THE INPUT SPECIFIC TO THE FLOW MODEL
$COMP         MODACT=$XMODEL
$COMP         IF(FLOWMODEL.EQ.$XMODEL) CALL XISDAT(NERR)
$CMFMFE         MODACT=$XMMODEL
$CMFMFE         IF(FLOWMODEL.EQ.$XMMODEL) CALL XISDAT(NERR)
$HYDROI       MODACT=$HMODEL
$HYDROI       IF(FLOWMODEL.EQ.$HMODEL) CALL HISDAT(NERR)
$SINGLEI      MODACT=$TMODEL
$SINGLEI      IF(FLOWMODEL.EQ.$TMODEL) CALL TISDAT(NERR)
C$AIR          IF(FLOWMODEL.EQ.AIR) CALL AISDAT(NERR)
      MODACT=$TRMODEL

C ------------------------------------------------------------------
C GET ALL THE OTHER PARAMETERS SPECIFIC TO THE TRANSPORT/CHEMISTRY
C ------------------------------------------------------------------

      IF (LEVELC) THEN
         WRITE(NFOUT, *)
         TITU = '******'
         CALL PRTTIT(TITU)
         TITU = 'TRANSPORT-CHEMISTRY DATA'
         CALL PRTTIT(TITU)
      ENDIF

C MPESZ PARAMETER NPHASES IS ESTABLISHED HERE

$COMP         MODACT=$XMODEL
$COMP         IF(FLOWMODEL.EQ.$XMODEL) NPHASES = NPH
$CMFMFE         MODACT=$XMMODEL
$CMFMFE         IF(FLOWMODEL.EQ.$XMMODEL) NPHASES = NPH
$HYDROI       MODACT=$HMODEL
$HYDROI       IF(FLOWMODEL.EQ.$HMODEL) NPHASES = 2
$SINGLEI      MODACT=$TMODEL
$SINGLEI      IF(FLOWMODEL.EQ.$TMODEL) NPHASES = 1
C$AIR          IF(FLOWMODEL.EQ.AIR) NPHASES = 2
      MODACT=$TRMODEL

      IF (LEVELC) WRITE (NFOUT,
     &     "(' NUMBER OF FLOWING PHASES  ',T54, I3 )" ) 
     &      NPHASES


C GET THE CONTROL PARAMETERS (INTEGER NUMBERS) 

      SKIP_FLOW = .FALSE.
      CALL GETVAL('SKIP_FLOW ',SKIP_FLOW,'FG',0,0,0,0,NDUM,NERR)
      IF (LEVELC) THEN
         IF (SKIP_FLOW) THEN
            WRITE (NFOUT,*) "FLOW STEPS SKIPPED AFTER FIRST." 
         ELSE 
            WRITE (NFOUT,*) "ALL FLOW STEPS EXECUTED (DEFAULT)."
         ENDIF
      ENDIF

      NO_CFL_CHECK = .FALSE.
      CALL GETVAL('NO_CFL_CHECK ',NO_CFL_CHECK,
     &            'FG',0,0,0,0,NDUM,NERR)
      IF (LEVELC) THEN
         IF (NO_CFL_CHECK) THEN
            WRITE (NFOUT,*) "CFL_CHECK MODE IS OFF "
         ELSE
            WRITE (NFOUT,*) "CFL_CHECK MODE IS ON "
         ENDIF
      ENDIF

      REPORT_BD_FLUX = .FALSE.
      CALL GETVAL('REPORT_BD_FLUX ',REPORT_BD_FLUX,
     &            'FG',0,0,0,0,NDUM,NERR)
      IF (LEVELC) THEN
         IF (REPORT_BD_FLUX) THEN
            WRITE (NFOUT,*) "REPORT_BD_FLUX MODE IS ON "
         ELSE
            WRITE (NFOUT,*) "REPORT_BD_FLUX MODE IS OFF "
         ENDIF
      ENDIF

      REPORT_BAL_ALL = .FALSE.
      CALL GETVAL('REPORT_BAL_ALL ',REPORT_BAL_ALL,
     &            'FG',0,0,0,0,NDUM,NERR)
      IF (LEVELC) THEN
         IF (REPORT_BAL_ALL) THEN
            WRITE (NFOUT,*) "REPORT_BAL_ALL MODE IS ON "
         ELSE
            WRITE (NFOUT,*) "REPORT_BAL_ALL MODE IS OFF "
         ENDIF
      ENDIF

      NO_ADV = .FALSE.
      CALL GETVAL('NO_ADVECTION ',NO_ADV,'FG',0,0,0,0,NDUM,NERR)
      IF (LEVELC) THEN
         IF (NO_ADV) THEN
            WRITE (NFOUT,*) "ADVECTION MODE IS OFF "
         ELSE 
            WRITE (NFOUT,*) "ADVECTION MODE IS ON "
         ENDIF
      ENDIF

      TRNOFLXLMTR = .FALSE.
      CALL GETVAL('TRNOFLXLMTR ',TRNOFLXLMTR,'FG',0,0,0,0,NDUM,NERR)
      IF (LEVELC) THEN
         IF (TRNOFLXLMTR) THEN
            WRITE (NFOUT,*) "HIGHER ORDER GODUNOV MODE IS OFF "
         ELSE 
            WRITE (NFOUT,*) "HIGHER ORDER GODUNOV MODE IS ON "
         ENDIF
      ENDIF

      NTRFLXLMT = 2
      TRFLXLMTR = 0.75D0
      CALL GETVAL('TRFLXLMTRTYPE ',NTRFLXLMT,'I4',0,0,0,0,NDUM,NERR)
      CALL GETVAL('TRFLXLMTR ',TRFLXLMTR,'R8',0,0,0,0,NDUM,NERR)
      IF (LEVELC) WRITE (NFOUT,
     &     "(' TYPE OF ELEMENT SLOPES AND FLUX LIMITER ',T55,I3,F5.2 )")
     &      NTRFLXLMT,TRFLXLMTR
      IF(TRNOFLXLMTR) TRFLXLMTR=0.0D0

      NO_DISP = .FALSE.
      CALL GETVAL('NO_DISPERSION ',NO_DISP,'FG',0,0,0,0,NDUM,NERR)
      IF (LEVELC) THEN
         IF (NO_DISP) THEN
            WRITE (NFOUT,*) "DISPERSION MODE IS OFF "
         ELSE 
            WRITE (NFOUT,*) "DISPERSION MODE IS ON "
         ENDIF
      ENDIF

      NO_OPSPLIT=.FALSE.
      CALL GETVAL('NO_OPSPLIT ',NO_OPSPLIT,'FG',0,0,0,0,NDUM,NERR)
      IF (LEVELC) THEN
         IF (NO_OPSPLIT) THEN
            WRITE (NFOUT,*) "SOLVE USING FULLY IMPLICIT "
         ELSE 
            WRITE (NFOUT,*) "SOLVE USING OPERATOR SPLITTING "
         ENDIF
      ENDIF

      IDDLINSOL = 2
      CALL GETVAL('TRDDLINSOL ',IDDLINSOL,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC) WRITE (NFOUT,
     &     "(' SOLVER TYPE FOR DIFFUSION-DISPERSION ',T54,I2)") 
     &      IDDLINSOL
      IF (IDDLINSOL.LT.1.OR.IDDLINSOL.GT.4) THEN
         WRITE(0,*) 'ONLY 3 SOLVERS AVAILABLE: 1-GMRES, 2-BCGS,
     &               3-PCG, 4-HYPRE!!'
         NERR = NERR + 1
      ENDIF

      NSPECIES = 1
      CALL GETVAL('NSPECIES ',NSPECIES,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC) WRITE (NFOUT,
     &     "(' NUMBER OF CHEMICAL SPECIES  ',T54, I3 )" ) 
     &      NSPECIES
      IF (NSPECIES.LT.1.OR.NSPECIES.GT.$MXNSPEC) NERR = NERR + 1

      NCOMPS = 1
      CALL GETVAL('N_COMPONENTS ',NCOMPS,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC) WRITE (NFOUT,
     &     "(' NUMBER OF CHEMICAL COMPONENTS  ',T54, I3 )" ) 
     &      NCOMPS
      IF (NCOMPS.LT.1.OR.NCOMPS.GT.$MXNSPEC) NERR = NERR + 1

      NPRODUCTS = 0
      CALL GETVAL('N_PRODUCTS ',NPRODUCTS,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC) WRITE (NFOUT,
     &     "(' NUMBER OF CHEMICAL PRODUCTS  ',T54, I3 )" ) 
     &      NPRODUCTS
      IF (NPRODUCTS.LT.0.OR.NPRODUCTS.GT.$MXNSPEC) NERR = NERR + 1

$COMP$XREAC      NXSPECIES = 1
$COMP$XREAC      CALL GETVAL('NXSPECIES ',NXSPECIES,'I4',0,0,0,0,NDUM,NERR)
$COMP$XREAC      IF (LEVELC) WRITE (NFOUT,
$COMP$XREAC     &  "(' NUMBER OF XMODEL CHEMICAL SPECIES  ',T54,I3)") 
$COMP$XREAC     &      NXSPECIES
$COMP$XREAC      IF (NXSPECIES.LT.1.OR.NXSPECIES.GT.$MXNSPEC) NERR = NERR + 1

$COMP$XREAC      NXCOMPS = 1
$COMP$XREAC      CALL GETVAL('N_XCOMPONENTS ',NXCOMPS,'I4',0,0,0,0,NDUM,NERR)
$COMP$XREAC      IF (LEVELC) WRITE (NFOUT,
$COMP$XREAC     &  "(' NUMBER OF XMODEL CHEMICAL COMPONENTS  ',T54,I3)") 
$COMP$XREAC     &      NXCOMPS
$COMP$XREAC      IF (NXCOMPS.LT.1.OR.NXCOMPS.GT.$MXNSPEC) NERR = NERR + 1

$COMP$XREAC      NXPRODUCTS = 0
$COMP$XREAC      CALL GETVAL('N_XPRODUCTS ',NXPRODUCTS,'I4',0,0,0,0,NDUM,NERR)
$COMP$XREAC      IF (LEVELC) WRITE (NFOUT,
$COMP$XREAC     &  "(' NUMBER OF XMODEL CHEMICAL PRODUCTS  ',T54,I3)") 
$COMP$XREAC     &      NXPRODUCTS
$COMP$XREAC      IF (NXPRODUCTS.LT.0.OR.NXPRODUCTS.GT.$MXNSPEC) NERR = NERR + 1

$CMFMFE$XREAC      NXSPECIES = 1
$CMFMFE$XREAC      CALL GETVAL('NXSPECIES ',NXSPECIES,'I4',0,0,0,0,NDUM,NERR)
$CMFMFE$XREAC      IF (LEVELC) WRITE (NFOUT,
$CMFMFE$XREAC     &  "(' NUMBER OF XMMODEL CHEMICAL SPECIES  ',T54,I3)") 
$CMFMFE$XREAC     &      NXSPECIES
$CMFMFE$XREAC      IF (NXSPECIES.LT.1.OR.NXSPECIES.GT.$MXNSPEC) NERR = NERR + 1

$CMFMFE$XREAC      NXCOMPS = 1
$CMFMFE$XREAC      CALL GETVAL('N_XCOMPONENTS ',NXCOMPS,'I4',0,0,0,0,NDUM,NERR)
$CMFMFE$XREAC      IF (LEVELC) WRITE (NFOUT,
$CMFMFE$XREAC     &  "(' NUMBER OF XMMODEL CHEMICAL COMPONENTS  ',T54,I3)") 
$CMFMFE$XREAC     &      NXCOMPS
$CMFMFE$XREAC      IF (NXCOMPS.LT.1.OR.NXCOMPS.GT.$MXNSPEC) NERR = NERR + 1

$CMFMFE$XREAC      NXPRODUCTS = 0
$CMFMFE$XREAC      CALL GETVAL('N_XPRODUCTS ',NXPRODUCTS,'I4',0,0,0,0,NDUM,NERR)
$CMFMFE$XREAC      IF (LEVELC) WRITE (NFOUT,
$CMFMFE$XREAC     &  "(' NUMBER OF XMMODEL CHEMICAL PRODUCTS  ',T54,I3)") 
$CMFMFE$XREAC     &      NXPRODUCTS
$CMFMFE$XREAC      IF (NXPRODUCTS.LT.0.OR.NXPRODUCTS.GT.$MXNSPEC) NERR = NERR + 1

C     IF USE CHEMISTRY (I.E. NPRODUCTS>=1) THEN CHECK NSPECIES

      IF ( (NPRODUCTS.GE.1).AND.((NPRODUCTS + NCOMPS).NE.NSPECIES)) THEN
         NSPECIES = NPRODUCTS + NCOMPS
         IF(LEVELC) WRITE(NFOUT,*) 
     &     '  ----  NUMBER OF CHEMICAL SPECIES CHANGED ---- ' 
         IF (LEVELC) WRITE (NFOUT,
     &     "(' NUMBER OF CHEMICAL SPECIES  ',T54, I3 )" ) 
     &      NSPECIES
         IF (NSPECIES.LT.1.OR.NSPECIES.GT.$MXNSPEC) NERR = NERR + 1
      ENDIF

$COMP$XREAC      IF ((NXPRODUCTS.GE.1).AND.((NXPRODUCTS + NXCOMPS).NE.NXSPECIES)) 
$COMP$XREAC     &  THEN
$COMP$XREAC         NXSPECIES = NXPRODUCTS + NXCOMPS
$COMP$XREAC         IF(NXSPECIES.NE.NRC) THEN
$COMP$XREAC            STOP 'ERROR IN TRISDAT: NXSPECIES /= NRC IN XMODEL !!'
$COMP$XREAC         ENDIF
$COMP$XREAC         IF(LEVELC) WRITE(NFOUT,*) 
$COMP$XREAC     &    ' --- NUMBER OF COMPOSITIONAL MODEL CHEM. SPECIES CHANGED ---'
$COMP$XREAC         IF (LEVELC) WRITE (NFOUT,
$COMP$XREAC     &     "(' NUMBER OF XMODEL CHEMICAL SPECIES ',T54,I3)") 
$COMP$XREAC     &      NXSPECIES
$COMP$XREAC         IF (NXSPECIES.LT.1.OR.NXSPECIES.GE.$MXNSPEC) NERR = NERR + 1
$COMP$XREAC      ENDIF

$CMFMFE$XREAC      IF ((NXPRODUCTS.GE.1).AND.((NXPRODUCTS + NXCOMPS).NE.NXSPECIES)) 
$CMFMFE$XREAC     &  THEN
$CMFMFE$XREAC         NXSPECIES = NXPRODUCTS + NXCOMPS
$CMFMFE$XREAC         IF(NXSPECIES.NE.NRC) THEN
$CMFMFE$XREAC            STOP 'ERROR IN TRISDAT: NXSPECIES /= NRC IN XMMODEL !!'
$CMFMFE$XREAC         ENDIF
$CMFMFE$XREAC         IF(LEVELC) WRITE(NFOUT,*) 
$CMFMFE$XREAC     &    ' --- NUMBER OF COMPOSITIONAL MODEL CHEM. SPECIES CHANGED ---'
$CMFMFE$XREAC         IF (LEVELC) WRITE (NFOUT,
$CMFMFE$XREAC     &     "(' NUMBER OF XMMODEL CHEMICAL SPECIES ',T54,I3)") 
$CMFMFE$XREAC     &      NXSPECIES
$CMFMFE$XREAC         IF (NXSPECIES.LT.1.OR.NXSPECIES.GE.$MXNSPEC) NERR = NERR + 1
$CMFMFE$XREAC      ENDIF

      NCSTEP = 1
      CALL GETVAL('N_CONC_STEPS ',NCSTEP,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC) WRITE (NFOUT,
     &     "(' NUMBER OF TRANSPORT STEPS PER FLOW STEP  ',T54, I3 )" ) 
     &      NCSTEP
      IF (NCSTEP.LT.1) NERR = NERR + 1

      ODEALGTYPE = 2
      WORKSTR = 'RUNGE_KUTTA_4'
      CALL GETVALS('ODE_ALG_TYPE ', WORKSTR,'CS',
     &              0, 0, 0,20,NDUM,NERR)
      IF (WORKSTR.EQ.'EULER') THEN
         ODEALGTYPE = 0
      ELSE IF (WORKSTR.EQ.'RUNGE_KUTTA_2') THEN
         ODEALGTYPE = 1
      ELSE IF (WORKSTR.EQ.'RUNGE_KUTTA_4') THEN
         ODEALGTYPE = 2
      ENDIF
      IF (LEVELC) THEN
         WRITE (NFOUT,
     &     "(' ODE ALGORITHM TYPE ', 
     &         T54, A20, ' (',I1,')' )" ) 
     &      WORKSTR, ODEALGTYPE
      ENDIF

      NTREACT = 1
      CALL GETVAL('N_RXNSTEPS ',NTREACT,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC) WRITE (NFOUT,
     &     "(' NUMBER OF REACTION STEPS PER TRANSPORT STEP',T54, I3 )" ) 
     &      NTREACT
      IF (NTREACT.LT.1) NERR = NERR + 1

C GET CHEMICAL SPECIES NAME
      DO L=1,NSPECIES
          CALL PASTE_SIS(SPECNAME(L), 'CONC', L, '_ ', KERR)
      ENDDO
      CALL GETVALS('NAME_SPECIES ',SPECNAME,'CS',NSPECIES,
     &              0,0,20,NDUM,NERR)
      IF (LEVELC) THEN
         DO L=1,NSPECIES
            WRITE (NFOUT,
     &     "(' NAME OF SPECIES #',I2, T54, A20 )" ) 
     &      L, SPECNAME(L)
         ENDDO
      ENDIF

C GET CHEMICAL SPECIES NAME FOR COMPOSITIONAL MODEL
$COMP$XREAC      DO L=1,NXSPECIES
$COMP$XREAC          CALL PASTE_SIS(XSPECNAME(L), 'CONCX', L, '_ ', KERR)
$COMP$XREAC      ENDDO
$COMP$XREAC      CALL GETVALS('XNAME_SPECIES ',XSPECNAME,'CS',NXSPECIES,
$COMP$XREAC     &              0,0,20,NDUM,NERR)
$COMP$XREAC      IF (LEVELC) THEN
$COMP$XREAC         DO L=1,NXSPECIES
$COMP$XREAC            WRITE (NFOUT,
$COMP$XREAC     &     "(' NAME OF XMODEL SPECIES #',I2, T54, A20 )" ) 
$COMP$XREAC     &      L, XSPECNAME(L)
$COMP$XREAC         ENDDO
$COMP$XREAC      ENDIF

$CMFMFE$XREAC      DO L=1,NXSPECIES
$CMFMFE$XREAC          CALL PASTE_SIS(XSPECNAME(L), 'CONCX', L, '_ ', KERR)
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      CALL GETVALS('XNAME_SPECIES ',XSPECNAME,'CS',NXSPECIES,
$CMFMFE$XREAC     &              0,0,20,NDUM,NERR)
$CMFMFE$XREAC      IF (LEVELC) THEN
$CMFMFE$XREAC         DO L=1,NXSPECIES
$CMFMFE$XREAC            WRITE (NFOUT,
$CMFMFE$XREAC     &     "(' NAME OF XMMODEL SPECIES #',I2, T54, A20 )" ) 
$CMFMFE$XREAC     &      L, XSPECNAME(L)
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC      ENDIF

C GET MOLECULAR WEIGHT
      DO L=1,NSPECIES
         MOLWEIGHT(L) = 18.0D0
      ENDDO
      CALL DEFAULT('[lb/lbM] ')
      CALL GETVAL('MOLECULAR_WEIGHT[lb/lbM] ',MOLWEIGHT,'R8',NSPECIES,
     &              0,0,0,NDUM,NERR)
      IF (LEVELC) THEN
         DO L=1,NSPECIES
            WRITE (NFOUT,
     &     "(' MOLECULAR WEIGHT FOR ',A20, T49, F10.2, 1X, A20 )" ) 
     &      SPECNAME(L), MOLWEIGHT(L),  "[LB/LBMOL]          "
         ENDDO
      ENDIF

C GET MOLECULAR WEIGHT FOR SPECIES FROM COMPOSITIONAL MODEL
$COMP$XREAC      DO L=1,NXSPECIES
$COMP$XREAC         XMOLWEIGHT(L) = 18.0D0
$COMP$XREAC      ENDDO
$COMP$XREAC      CALL DEFAULT('[lb/lbM] ')
$COMP$XREAC      CALL GETVAL('XMOLECULAR_WEIGHT[lb/lbM] ',XMOLWEIGHT,'R8',
$COMP$XREAC     &             NXSPECIES,0,0,0,NDUM,NERR)
$COMP$XREAC      IF (LEVELC) THEN
$COMP$XREAC         DO L=1,NXSPECIES
$COMP$XREAC            WRITE (NFOUT,
$COMP$XREAC     &     "(' XMODEL MOLECULAR WEIGHT FOR ',A20,T49,F10.2,1X,A20)")
$COMP$XREAC     &      XSPECNAME(L), XMOLWEIGHT(L),  "[LB/LBMOL]          "
$COMP$XREAC         ENDDO
$COMP$XREAC      ENDIF

$CMFMFE$XREAC      DO L=1,NXSPECIES
$CMFMFE$XREAC         XMOLWEIGHT(L) = 18.0D0
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      CALL DEFAULT('[lb/lbM] ')
$CMFMFE$XREAC      CALL GETVAL('XMOLECULAR_WEIGHT[lb/lbM] ',XMOLWEIGHT,'R8',
$CMFMFE$XREAC     &             NXSPECIES,0,0,0,NDUM,NERR)
$CMFMFE$XREAC      IF (LEVELC) THEN
$CMFMFE$XREAC         DO L=1,NXSPECIES
$CMFMFE$XREAC            WRITE (NFOUT,
$CMFMFE$XREAC     &     "(' XMMODEL MOLECULAR WEIGHT FOR ',A20,T49,F10.2,1X,A20)")
$CMFMFE$XREAC     &      XSPECNAME(L), XMOLWEIGHT(L),  "[LB/LBMOL]          "
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC      ENDIF

C GET EQUILIBRIUM PARTITIONING COEFFICIENTS FOR FLOWING PHASES
      DO L=1,NSPECIES
         DO MP = 1, NPHASES
            EQLBCOEF(MP, L) = 1.0D0
         ENDDO
      ENDDO
      CALL GETVAL2D('EQ_PARTITIONING_COEFF ', EQLBCOEF,'R8',
     &              NPHASES, NSPECIES, 0,0,NDUM,
     &              $MXPHAST, $MXNSPEC, 0,0, RWK,DIMRWK, NERR, 
     &              LEVELC, NFOUT)
      IF (LEVELC) THEN
         DO L=1,NSPECIES
            IF (NPHASES .EQ. 1) THEN
               WRITE (NFOUT,
     &     "(' PHASE EQLBRM PARTITIONING COEFF FOR ',
     &        A20, T53, F6.2 )" ) 
     &      SPECNAME(L), EQLBCOEF(1, L)
            ELSE IF (NPHASES .EQ. 2) THEN
               WRITE (NFOUT,
     &     "(' PHASE EQLBRM PARTITIONING COEFF FOR ',
     &        A20, T53, F6.2, 1X, F6.2 )" ) 
     &      SPECNAME(L), EQLBCOEF(1, L), EQLBCOEF(2, L)
            ELSE IF (NPHASES .EQ. 3) THEN
               WRITE (NFOUT,
     &     "(' PHASE EQLBRM PARTITIONING COEFF FOR ',
     &        A20, T53, F6.2, 1X, F6.2,  1X, F6.2)" ) 
     &      SPECNAME(L), EQLBCOEF(1,L),EQLBCOEF(2,L),EQLBCOEF(3,L)
            ELSE 
               WRITE (NFOUT,
     &     "('   ERROR IN TRISDAT:  TOO MANY FLOWING PHASES!!  ')" )
            ENDIF
         ENDDO
      ENDIF

C GET EQUILIBRIUM PARTITIONING COEFFICIENTS FOR FLOWING PHASES
C FOR SPECIES FROM COMPOSITIONAL MODEL
$COMP$XREAC      DO L=1,NXSPECIES
$COMP$XREAC         DO MP = 1, NPHASES
$COMP$XREAC            XEQLBCOEF(MP, L) = 1.0D0
$COMP$XREAC         ENDDO
$COMP$XREAC      ENDDO
$COMP$XREAC      CALL GETVAL2D('XEQ_PARTITIONING_COEFF ', XEQLBCOEF,'R8',
$COMP$XREAC     &              NPHASES, NXSPECIES, 0,0,NDUM,
$COMP$XREAC     &              $MXPHAST, $MXNSPEC, 0,0, RWK,DIMRWK, NERR,
$COMP$XREAC     &              LEVELC, NFOUT)
$COMP$XREAC      IF (LEVELC) THEN
$COMP$XREAC         DO L=1,NXSPECIES
$COMP$XREAC            IF (NPHASES .EQ. 1) THEN
$COMP$XREAC               WRITE (NFOUT,
$COMP$XREAC     &     "(' XMODEL PHASE EQLBRM PARTITIONING COEFF FOR ',
$COMP$XREAC     &        A20, T53, F6.2 )" )
$COMP$XREAC     &      XSPECNAME(L), XEQLBCOEF(1, L)
$COMP$XREAC            ELSE IF (NPHASES .EQ. 2) THEN
$COMP$XREAC               WRITE (NFOUT,
$COMP$XREAC     &     "(' XMODEL PHASE EQLBRM PARTITIONING COEFF FOR ',
$COMP$XREAC     &        A20, T53, F6.2, 1X, F6.2 )" )
$COMP$XREAC     &      XSPECNAME(L), XEQLBCOEF(1, L), XEQLBCOEF(2, L)
$COMP$XREAC            ELSE IF (NPHASES .EQ. 3) THEN
$COMP$XREAC               WRITE (NFOUT,
$COMP$XREAC     &     "(' XMODEL PHASE EQLBRM PARTITIONING COEFF FOR ',
$COMP$XREAC     &        A20, T53, F6.2, 1X, F6.2,  1X, F6.2)" )
$COMP$XREAC     &      XSPECNAME(L), XEQLBCOEF(1,L),XEQLBCOEF(2,L),XEQLBCOEF(3,L)
$COMP$XREAC            ELSE
$COMP$XREAC               WRITE (NFOUT,
$COMP$XREAC     &     "('   ERROR IN TRISDAT:  TOO MANY FLOWING PHASES!!  ')" )
$COMP$XREAC            ENDIF
$COMP$XREAC         ENDDO
$COMP$XREAC      ENDIF


$CMFMFE$XREAC      DO L=1,NXSPECIES
$CMFMFE$XREAC         DO MP = 1, NPHASES
$CMFMFE$XREAC            XEQLBCOEF(MP, L) = 1.0D0
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      CALL GETVAL2D('XEQ_PARTITIONING_COEFF ', XEQLBCOEF,'R8',
$CMFMFE$XREAC     &              NPHASES, NXSPECIES, 0,0,NDUM,
$CMFMFE$XREAC     &              $MXPHAST, $MXNSPEC, 0,0, RWK,DIMRWK, NERR,
$CMFMFE$XREAC     &              LEVELC, NFOUT)
$CMFMFE$XREAC      IF (LEVELC) THEN
$CMFMFE$XREAC         DO L=1,NXSPECIES
$CMFMFE$XREAC            IF (NPHASES .EQ. 1) THEN
$CMFMFE$XREAC               WRITE (NFOUT,
$CMFMFE$XREAC     &     "(' XMODEL PHASE EQLBRM PARTITIONING COEFF FOR ',
$CMFMFE$XREAC     &        A20, T53, F6.2 )" )
$CMFMFE$XREAC     &      XSPECNAME(L), XEQLBCOEF(1, L)
$CMFMFE$XREAC            ELSE IF (NPHASES .EQ. 2) THEN
$CMFMFE$XREAC               WRITE (NFOUT,
$CMFMFE$XREAC     &     "(' XMODEL PHASE EQLBRM PARTITIONING COEFF FOR ',
$CMFMFE$XREAC     &        A20, T53, F6.2, 1X, F6.2 )" )
$CMFMFE$XREAC     &      XSPECNAME(L), XEQLBCOEF(1, L), XEQLBCOEF(2, L)
$CMFMFE$XREAC            ELSE IF (NPHASES .EQ. 3) THEN
$CMFMFE$XREAC               WRITE (NFOUT,
$CMFMFE$XREAC     &     "(' XMODEL PHASE EQLBRM PARTITIONING COEFF FOR ',
$CMFMFE$XREAC     &        A20, T53, F6.2, 1X, F6.2,  1X, F6.2)" )
$CMFMFE$XREAC     &      XSPECNAME(L), XEQLBCOEF(1,L),XEQLBCOEF(2,L),XEQLBCOEF(3,L)
$CMFMFE$XREAC            ELSE
$CMFMFE$XREAC               WRITE (NFOUT,
$CMFMFE$XREAC     &     "('   ERROR IN TRISDAT:  TOO MANY FLOWING PHASES!!  ')" )
$CMFMFE$XREAC            ENDIF
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC      ENDIF


C ------------------------------------------------------------------
C GET THE PARAMETERS FOR SPECIFIC FIRST ORDER DECAY CHEMISTRY
C   -- SOLVED BY COMBINING IN DIFFUSION/DISPERSION PART, WHICH IS
C      PROBABLY MUCH FASTER AND MORE STABLE AND ACCURATE

      USE_RADIODECAY = .FALSE.
      CALL GETVAL('USE_RADIODECAY ',USE_RADIODECAY,'FG',
     &             0,0,0,0,NDUM,NERR)
      IF (LEVELC) THEN
         IF (USE_RADIODECAY) THEN
            WRITE (NFOUT,*) "USE_RADIODECAY MODE IS ON "
         ELSE
            WRITE (NFOUT,*) "USE_RADIODECAY MODE IS OFF "
         ENDIF
      ENDIF
      IF (USE_RADIODECAY) THEN
         NO_DISP = .FALSE.
         IF (LEVELC) THEN
            WRITE (NFOUT,*)
     &    "DISPERSION MODE IS TURNED ON BECAUSE OF USE_RADIODECAY"
         ENDIF
      ENDIF

      DO L=1,NSPECIES
         HALFLIFTIM(L) = 1.0D99    ! DEFAULT VALUE IS NO-REACTION
      ENDDO
      IF (USE_RADIODECAY) THEN
C        HALF_LIFE_TIME MAY BE SPECIFIED AT INFILE ONLY IN USE_RADIODECAY MODE
         CALL DEFAULT(EXTTIME)
         CALL GETVAL('HALF_LIFE_TIME[DAY] ',HALFLIFTIM,'R8',NSPECIES,
     &              0,0,0,NDUM,NERR)
         IF (LEVELC) THEN
            DO L=1,NSPECIES
               WRITE (NFOUT,
     &     "(' HALF_LIFE_TIME FOR ',A20, T49, E12.2 )" )
     &      SPECNAME(L), HALFLIFTIM(L)
            ENDDO
         ENDIF
         DO L=1,NSPECIES
            IF (HALFLIFTIM(L).LE.0.0D0) NERR = NERR + 1
         ENDDO
      ENDIF

C -- END OF "GET THE PARAMETERS FOR SPECIFIC FIRST ORDER DECAY CHEMISTRY"
C -----------------------------------------------------------------------


C GET THE REACTION TYPE
      DO L=NCOMPS+1, NSPECIES
            RXN_MASS(L)  = .FALSE.
            RXN_EQLBR(L) = .FALSE.
            RXN_MONOD(L) = .FALSE.
            REACTIONTYPE(L) = -1
            RXNTYPE_STR(L) = "UNKNOWN_RXN_TYPE"
      ENDDO
      IF (NPRODUCTS.GT.0)
     &   CALL GETVALS('CHEMICAL_REACTION_TYPES ', RXNTYPE_STR,'CS',
     &              NPRODUCTS, 0, 0,20,NDUM,NERR)
      DO L=1, NPRODUCTS
            IF (RXNTYPE_STR(L).EQ.'MONOD') THEN
               RXN_MONOD(L) = .TRUE.
               RXN_EQLBR(L) = .FALSE.
               RXN_MASS(L) = .FALSE.
               REACTIONTYPE(L) = 2
            ELSE IF (RXNTYPE_STR(L).EQ.'EQUILIBRIUM') THEN
               RXN_MONOD(L) = .FALSE.
               RXN_EQLBR(L) = .TRUE.
               RXN_MASS(L) = .FALSE.
               REACTIONTYPE(L) = 0
            ELSE IF (RXNTYPE_STR(L).EQ.'MASS_ACTION') THEN
               RXN_MONOD(L) = .FALSE.
               RXN_EQLBR(L) = .FALSE.
               RXN_MASS(L) = .TRUE.
               REACTIONTYPE(L) = 1
            ENDIF
      ENDDO
      IF (LEVELC) THEN
         DO L=1,NPRODUCTS
               WRITE (NFOUT,
     &     "(' REATION TYPE FOR ', 
     &        A20, T54, A20, ' (',I1,')' )" ) 
     &      SPECNAME(L+NCOMPS), RXNTYPE_STR(L), REACTIONTYPE(L) 
         ENDDO
      ENDIF

C GET THE REACTION TYPE FOR SPECIES FROM COMPOSITIONAL MODEL
$COMP$XREAC      DO L=NXCOMPS+1, NXSPECIES
$COMP$XREAC            XRXN_MASS(L)  = .FALSE.
$COMP$XREAC            XRXN_EQLBR(L) = .FALSE.
$COMP$XREAC            XRXN_MONOD(L) = .FALSE.
$COMP$XREAC            XREACTIONTYPE(L) = -1
$COMP$XREAC            XRXNTYPE_STR(L) = "UNKNOWN_RXN_TYPE"
$COMP$XREAC      ENDDO
$COMP$XREAC      IF (NXPRODUCTS.GT.0)
$COMP$XREAC     &   CALL GETVALS('XCHEMICAL_REACTION_TYPES ', XRXNTYPE_STR,'CS',
$COMP$XREAC     &              NXPRODUCTS, 0, 0,20,NDUM,NERR)
$COMP$XREAC      DO L=1, NXPRODUCTS
$COMP$XREAC            IF (XRXNTYPE_STR(L).EQ.'MONOD') THEN
$COMP$XREAC               XRXN_MONOD(L) = .TRUE.
$COMP$XREAC               XRXN_EQLBR(L) = .FALSE.
$COMP$XREAC               XRXN_MASS(L) = .FALSE.
$COMP$XREAC               XREACTIONTYPE(L) = 2
$COMP$XREAC            ELSE IF (XRXNTYPE_STR(L).EQ.'EQUILIBRIUM') THEN
$COMP$XREAC               XRXN_MONOD(L) = .FALSE.
$COMP$XREAC               XRXN_EQLBR(L) = .TRUE.
$COMP$XREAC               XRXN_MASS(L) = .FALSE.
$COMP$XREAC               XREACTIONTYPE(L) = 0
$COMP$XREAC            ELSE IF (XRXNTYPE_STR(L).EQ.'MASS_ACTION') THEN
$COMP$XREAC               XRXN_MONOD(L) = .FALSE.
$COMP$XREAC               XRXN_EQLBR(L) = .FALSE.
$COMP$XREAC               XRXN_MASS(L) = .TRUE.
$COMP$XREAC               XREACTIONTYPE(L) = 1
$COMP$XREAC            ENDIF
$COMP$XREAC      ENDDO
$COMP$XREAC      IF (LEVELC) THEN
$COMP$XREAC         DO L=1,NXPRODUCTS
$COMP$XREAC               WRITE (NFOUT,
$COMP$XREAC     &     "(' XMODEL REATION TYPE FOR ',
$COMP$XREAC     &        A20, T54, A20, ' (',I1,')' )" )
$COMP$XREAC     &      XSPECNAME(L+NXCOMPS), XRXNTYPE_STR(L), XREACTIONTYPE(L)
$COMP$XREAC         ENDDO
$COMP$XREAC      ENDIF


$CMFMFE$XREAC      DO L=NXCOMPS+1, NXSPECIES
$CMFMFE$XREAC            XRXN_MASS(L)  = .FALSE.
$CMFMFE$XREAC            XRXN_EQLBR(L) = .FALSE.
$CMFMFE$XREAC            XRXN_MONOD(L) = .FALSE.
$CMFMFE$XREAC            XREACTIONTYPE(L) = -1
$CMFMFE$XREAC            XRXNTYPE_STR(L) = "UNKNOWN_RXN_TYPE"
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      IF (NXPRODUCTS.GT.0)
$CMFMFE$XREAC     &   CALL GETVALS('XCHEMICAL_REACTION_TYPES ', XRXNTYPE_STR,'CS',
$CMFMFE$XREAC     &              NXPRODUCTS, 0, 0,20,NDUM,NERR)
$CMFMFE$XREAC      DO L=1, NXPRODUCTS
$CMFMFE$XREAC            IF (XRXNTYPE_STR(L).EQ.'MONOD') THEN
$CMFMFE$XREAC               XRXN_MONOD(L) = .TRUE.
$CMFMFE$XREAC               XRXN_EQLBR(L) = .FALSE.
$CMFMFE$XREAC               XRXN_MASS(L) = .FALSE.
$CMFMFE$XREAC               XREACTIONTYPE(L) = 2
$CMFMFE$XREAC            ELSE IF (XRXNTYPE_STR(L).EQ.'EQUILIBRIUM') THEN
$CMFMFE$XREAC               XRXN_MONOD(L) = .FALSE.
$CMFMFE$XREAC               XRXN_EQLBR(L) = .TRUE.
$CMFMFE$XREAC               XRXN_MASS(L) = .FALSE.
$CMFMFE$XREAC               XREACTIONTYPE(L) = 0
$CMFMFE$XREAC            ELSE IF (XRXNTYPE_STR(L).EQ.'MASS_ACTION') THEN
$CMFMFE$XREAC               XRXN_MONOD(L) = .FALSE.
$CMFMFE$XREAC               XRXN_EQLBR(L) = .FALSE.
$CMFMFE$XREAC               XRXN_MASS(L) = .TRUE.
$CMFMFE$XREAC               XREACTIONTYPE(L) = 1
$CMFMFE$XREAC            ENDIF
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      IF (LEVELC) THEN
$CMFMFE$XREAC         DO L=1,NXPRODUCTS
$CMFMFE$XREAC               WRITE (NFOUT,
$CMFMFE$XREAC     &     "(' XMODEL REATION TYPE FOR ',
$CMFMFE$XREAC     &        A20, T54, A20, ' (',I1,')' )" )
$CMFMFE$XREAC     &      XSPECNAME(L+NXCOMPS), XRXNTYPE_STR(L), XREACTIONTYPE(L)
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC      ENDIF

C GET STOICH
      DO L=1, NPRODUCTS
         DO LL=1, NCOMPS
            STOICH( L, LL) = 0.0
         ENDDO
      ENDDO

      IF (NPRODUCTS.GT.0)
     &    CALL GETVAL2D('STOICH ', STOICH, 'R8',
     &             NPRODUCTS, NCOMPS, 0,0,NDUM,
     &             $MXNSPEC, $MXNSPEC, 0,0, RWK,DIMRWK, NERR,
     &             LEVELC, NFOUT)

C GET THE KINETICS PARAMETER FOR MASS-ACTION TYPE
      DO MP = 1, NPHASES
         DO L=NCOMPS+1, NSPECIES
            PKF(MP, L) = 0.0
            PKB(MP, L) = 0.0
         ENDDO
      ENDDO
      DO L=1, NPRODUCTS
         DO LL=1, NCOMPS
            STOICHK( L, LL) = 0.0
         ENDDO
      ENDDO

      IF (NPRODUCTS.GT.0)
     &        CALL GETVAL2D('RATE_LAW_POWERS ', STOICHK, 'R8',
     &             NPRODUCTS, NCOMPS, 0,0,NDUM,
     &             $MXNSPEC, $MXNSPEC, 0,0, RWK,DIMRWK, NERR, 
     &             LEVELC, NFOUT)

      IF (NPRODUCTS.GT.0)
     &        CALL GETVAL2D('PK_FORWARD ',  PKF,'R8',
     &               NPHASES, NPRODUCTS, 0,0,NDUM,
     &               $MXPHAST, $MXNSPEC, 0,0, RWK,DIMRWK, NERR, 
     &               LEVELC, NFOUT)

      IF (NPRODUCTS.GT.0)
     &        CALL GETVAL2D('PK_BACKWARD ', PKB,'R8',
     &               NPHASES, NPRODUCTS, 0,0,NDUM,
     &               $MXPHAST, $MXNSPEC, 0,0, RWK,DIMRWK, NERR, 
     &               LEVELC, NFOUT)

      IF (NPRODUCTS.GT.0)
     &        CALL GETVAL('PK_EQUILIBRIUM ',PEQK,'R8',NPRODUCTS,
     &              0,0,0,NDUM,NERR)

      IF (LEVELC) THEN
         DO L=1, NPRODUCTS
            WRITE (NFOUT,
     &          "('  FOR ', A20 )" ) 
     &           SPECNAME(L+NCOMPS)
            WRITE (NFOUT,
     &          "(' -- STOICH =', 99(1X, F4.1) )" ) 
     &           (STOICH( L, LL), LL=1, NCOMPS) 
            WRITE (NFOUT,
     &          "(' -- RATE LAW POWERS =', 99(1X, F4.1) )" ) 
     &           (STOICHK( L, LL), LL=1, NCOMPS) 
            DO MP = 1, NPHASES
               WRITE (NFOUT,
     &     "(' -- PK FORWARD/BACKWARD IN PHASE ', 
     &      I1,  T53, F6.2, 1X, F6.2 )" )
     &      MP,  PKF(MP, L), PKB(MP, L)
            ENDDO
            WRITE ( NFOUT,
     &     "(' -- PK EQUILIBRIUM IN REFERENCE PHASE ', 
     &      T53, F6.2 )" )
     &      PEQK(L)
         ENDDO
      ENDIF

C GET STOICH FOR COMPOSITIONAL MODEL
$COMP$XREAC      DO L=1, NXPRODUCTS
$COMP$XREAC         DO LL=1, NXCOMPS
$COMP$XREAC            XSTOICH( L, LL) = 0.0
$COMP$XREAC         ENDDO
$COMP$XREAC      ENDDO
$COMP$XREAC
$COMP$XREAC      IF (NXPRODUCTS.GT.0)
$COMP$XREAC     &    CALL GETVAL2D('XSTOICH ', XSTOICH, 'R8',
$COMP$XREAC     &             NXPRODUCTS, NXCOMPS, 0,0,NDUM,
$COMP$XREAC     &             $MXNSPEC, $MXNSPEC, 0,0, RWK,DIMRWK, NERR,
$COMP$XREAC     &             LEVELC, NFOUT)

$CMFMFE$XREAC      DO L=1, NXPRODUCTS
$CMFMFE$XREAC         DO LL=1, NXCOMPS
$CMFMFE$XREAC            XSTOICH( L, LL) = 0.0
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC
$CMFMFE$XREAC      IF (NXPRODUCTS.GT.0)
$CMFMFE$XREAC     &    CALL GETVAL2D('XSTOICH ', XSTOICH, 'R8',
$CMFMFE$XREAC     &             NXPRODUCTS, NXCOMPS, 0,0,NDUM,
$CMFMFE$XREAC     &             $MXNSPEC, $MXNSPEC, 0,0, RWK,DIMRWK, NERR,
$CMFMFE$XREAC     &             LEVELC, NFOUT)

C GET THE KINETICS PARAMETER FOR COMPOSITIONAL MODEL MASS-ACTION TYPE
$COMP$XREAC      DO L=NXCOMPS+1, NXSPECIES
$COMP$XREAC         XPKF(L) = 0.0
$COMP$XREAC         XPKB(L) = 0.0
$COMP$XREAC      ENDDO
$COMP$XREAC      DO L=1, NXPRODUCTS
$COMP$XREAC         DO LL=1, NXCOMPS
$COMP$XREAC            XSTOICHK( L, LL) = 0.0
$COMP$XREAC         ENDDO
$COMP$XREAC      ENDDO

$CMFMFE$XREAC      DO L=NXCOMPS+1, NXSPECIES
$CMFMFE$XREAC         XPKF(L) = 0.0
$CMFMFE$XREAC         XPKB(L) = 0.0
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      DO L=1, NXPRODUCTS
$CMFMFE$XREAC         DO LL=1, NXCOMPS
$CMFMFE$XREAC            XSTOICHK( L, LL) = 0.0
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC      ENDDO

$COMP$XREAC      IF (NXPRODUCTS.GT.0)
$COMP$XREAC     &        CALL GETVAL2D('XRATE_LAW_POWERS ', XSTOICHK, 'R8',
$COMP$XREAC     &             NXPRODUCTS, NXCOMPS, 0,0,NDUM,
$COMP$XREAC     &             $MXNSPEC, $MXNSPEC, 0,0, RWK,DIMRWK, NERR,
$COMP$XREAC     &             LEVELC, NFOUT)

$CMFMFE$XREAC      IF (NXPRODUCTS.GT.0)
$CMFMFE$XREAC     &        CALL GETVAL2D('XRATE_LAW_POWERS ', XSTOICHK, 'R8',
$CMFMFE$XREAC     &             NXPRODUCTS, NXCOMPS, 0,0,NDUM,
$CMFMFE$XREAC     &             $MXNSPEC, $MXNSPEC, 0,0, RWK,DIMRWK, NERR,
$CMFMFE$XREAC     &             LEVELC, NFOUT)

$COMP$XREAC      IF (NXPRODUCTS.GT.0)
$COMP$XREAC     &        CALL GETVAL('XPK_FORWARD ',XPKF,'R8',NXPRODUCTS,0,0,0,
$COMP$XREAC     &             NDUM,NERR)

$CMFMFE$XREAC      IF (NXPRODUCTS.GT.0)
$CMFMFE$XREAC     &        CALL GETVAL('XPK_FORWARD ',XPKF,'R8',NXPRODUCTS,0,0,0,
$CMFMFE$XREAC     &             NDUM,NERR)

$COMP$XREAC      IF (NXPRODUCTS.GT.0)
$COMP$XREAC     &        CALL GETVAL('XPK_BACKWARD ',XPKB,'R8',NXPRODUCTS,0,0,0,
$COMP$XREAC     &             NDUM,NERR)

$CMFMFE$XREAC      IF (NXPRODUCTS.GT.0)
$CMFMFE$XREAC     &        CALL GETVAL('XPK_BACKWARD ',XPKB,'R8',NXPRODUCTS,0,0,0,
$CMFMFE$XREAC     &             NDUM,NERR)

$COMP$XREAC      IF (NXPRODUCTS.GT.0)
$COMP$XREAC     &        CALL GETVAL('XPK_EQUILIBRIUM ',XPEQK,'R8',NXPRODUCTS,
$COMP$XREAC     &             0,0,0,NDUM,NERR)

$CMFMFE$XREAC      IF (NXPRODUCTS.GT.0)
$CMFMFE$XREAC     &        CALL GETVAL('XPK_EQUILIBRIUM ',XPEQK,'R8',NXPRODUCTS,
$CMFMFE$XREAC     &             0,0,0,NDUM,NERR)

$COMP$XREAC      IF (LEVELC) THEN
$COMP$XREAC         DO L=1, NXPRODUCTS
$COMP$XREAC            WRITE (NFOUT,
$COMP$XREAC     &          "('  FOR ', A20 )" )
$COMP$XREAC     &           XSPECNAME(L+NXCOMPS)
$COMP$XREAC            WRITE (NFOUT,
$COMP$XREAC     &          "(' -- XSTOICH =', 99(1X, F4.1) )" )
$COMP$XREAC     &           (XSTOICH( L, LL), LL=1, NXCOMPS)
$COMP$XREAC            WRITE (NFOUT,
$COMP$XREAC     &          "(' -- XMODEL RATE LAW POWERS =', 99(1X, F4.1) )" )
$COMP$XREAC     &           (XSTOICHK( L, LL), LL=1, NXCOMPS)
$COMP$XREAC            DO MP = 1, NPHASES
$COMP$XREAC               WRITE (NFOUT,
$COMP$XREAC     &     "(' -- XMODEL PK FORWARD/BACKWARD FOR PRODUCT ',
$COMP$XREAC     &      I2,  T53, F6.2, 1X, F6.2 )" )
$COMP$XREAC     &      L,  XPKF(L), XPKB(L)
$COMP$XREAC            ENDDO
$COMP$XREAC            WRITE ( NFOUT,
$COMP$XREAC     &     "(' -- XMODEL PK EQUILIBRIUM FOR PRODUCT ',
$COMP$XREAC     &      I2, T53, F6.2 )" )
$COMP$XREAC     &      L, XPEQK(L)
$COMP$XREAC         ENDDO
$COMP$XREAC      ENDIF

$CMFMFE$XREAC      IF (LEVELC) THEN
$CMFMFE$XREAC         DO L=1, NXPRODUCTS
$CMFMFE$XREAC            WRITE (NFOUT,
$CMFMFE$XREAC     &          "('  FOR ', A20 )" )
$CMFMFE$XREAC     &           XSPECNAME(L+NXCOMPS)
$CMFMFE$XREAC            WRITE (NFOUT,
$CMFMFE$XREAC     &          "(' -- XSTOICH =', 99(1X, F4.1) )" )
$CMFMFE$XREAC     &           (XSTOICH( L, LL), LL=1, NXCOMPS)
$CMFMFE$XREAC            WRITE (NFOUT,
$CMFMFE$XREAC     &          "(' -- XMODEL RATE LAW POWERS =', 99(1X, F4.1) )" )
$CMFMFE$XREAC     &           (XSTOICHK( L, LL), LL=1, NXCOMPS)
$CMFMFE$XREAC            DO MP = 1, NPHASES
$CMFMFE$XREAC               WRITE (NFOUT,
$CMFMFE$XREAC     &     "(' -- XMODEL PK FORWARD/BACKWARD FOR PRODUCT ',
$CMFMFE$XREAC     &      I2,  T53, F6.2, 1X, F6.2 )" )
$CMFMFE$XREAC     &      L,  XPKF(L), XPKB(L)
$CMFMFE$XREAC            ENDDO
$CMFMFE$XREAC            WRITE ( NFOUT,
$CMFMFE$XREAC     &     "(' -- XMODEL PK EQUILIBRIUM FOR PRODUCT ',
$CMFMFE$XREAC     &      I2, T53, F6.2 )" )
$CMFMFE$XREAC     &      L, XPEQK(L)
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC      ENDIF

C       NOTE:  IN FUTURE, THE CODE MIGHT BE MODIFIED SO THAT NROCKTYPE IS
C              OBTAINED FROM A SUBROUTINE WHICH CALCULATE THE MAXIMUM
C              NUMBER IN THE  GRID ARRAY N_ROCK
      NROCKTYPE = 1
      CALL GETVAL('NROCKTYPE ',NROCKTYPE,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC) WRITE (NFOUT,
     &     "(' NROCKTYPE ',T54, I3 )" )
     &      NROCKTYPE

C ------------------------------------------------------------------
C GET THE PARAMETERS FOR SPECIFIC LINEAR ADSORPTION CHEMISTRY
C   -- SOLVED BY COMBINING IN ADVECTION-DIFFUSION/DISPERSION PART, 
C      BY MODIFYING THE COEFFICENT PHIS, WHICH IS NOT ONLY 
C      FASTER BUT MORE STABLE AND ACCURATE

      USE_LIN_SORP = .FALSE.
      CALL GETVAL('USE_LINEAR_ADSORPTION ',USE_LIN_SORP,'FG',
     &             0,0,0,0,NDUM,NERR)
      IF (LEVELC) THEN
         IF (USE_LIN_SORP) THEN
            WRITE (NFOUT,*) "USE_LINEAR_ADSORPTION MODE IS ON "
         ELSE
            WRITE (NFOUT,*) "USE_LINEAR_ADSORPTION MODE IS OFF "
         ENDIF
      ENDIF

      DO LL = 1, NROCKTYPE
         DO L = 1, NSPECIES
            EFF_SORP_CAPACITY(LL,L) = 0.0D0  ! DEFAULT VALUE: NO-ADSORPTION
         ENDDO
      ENDDO

      IF (USE_LIN_SORP) THEN
         CALL GETVAL2D('EFF_SORP_CAPACITY ',  EFF_SORP_CAPACITY,'R8',
     &               NROCKTYPE, NSPECIES, 0,0,NDUM,
     &               $MXROCKTYPE, $MXNSPEC, 0,0, RWK,DIMRWK, NERR, 
     &               LEVELC, NFOUT)
         IF (LEVELC) THEN
            DO LL = 1, NROCKTYPE
               DO L = 1, NSPECIES
                  WRITE (NFOUT,
     &     "(' EFF ADSORPTION CAPACITY (ROCK',I2,',SPECIES',I2,')',
     &        T49,E10.2,1X,A20)" )
     &  LL, L, EFF_SORP_CAPACITY(LL,L), "[DIMENSIONLESS]     "           
               ENDDO
            ENDDO
         ENDIF
      ENDIF

C -- END OF "GET THE PARAMETERS FOR SPECIFIC LINEAR ADSORPTION CHEMISTRY"
C -----------------------------------------------------------------------


C GET THE MOLECULAR DIFFUSIVITY, LONGITUDINAL/TRANSVERSE DISPERSIVITY
      DO LL = 1, NROCKTYPE
         DO L = 1, NSPECIES
            DO MP = 1, NPHASES
              MOLDIFF(LL,L,MP) = 0.0D0
            ENDDO
         ENDDO
      ENDDO
      CALL DEFAULT('[sq-ft/day] ')
      CALL GETVAL3D('MOLECULAR_DIFFUSIVITY[sq-ft/day] ', MOLDIFF,'R8',
     &               NROCKTYPE, NSPECIES, NPHASES, 0,NDUM,
     &               $MXROCKTYPE, $MXNSPEC, $MXPHAST, 0, RWK,DIMRWK, NERR,
     &               LEVELC, NFOUT)
      IF (LEVELC) THEN
        DO LL = 1, NROCKTYPE
          DO L = 1, NSPECIES
            DO MP = 1, NPHASES
              WRITE (NFOUT,
     &   "(' MOL EFF DIFFUSIVITY (ROCK',I2,',SPECIES',I2,
     &     ',PHASE',I2,')',T49,E10.2,1X,A20)" ) 
     &  LL, L, MP,  MOLDIFF(LL,L,MP), "[FT^2/DAY]          "
            ENDDO
          ENDDO 
        ENDDO
      ENDIF

      DO LL = 1, NROCKTYPE
         DO MP = 1, NPHASES
            LONGDISP(LL,MP) = 0.0D0
         ENDDO
      ENDDO
      CALL DEFAULT(EXTDIST)
      CALL GETVAL2D('LONGITUDINAL_DISPERSIVITY[ft] ',  LONGDISP,'R8',
     &               NROCKTYPE, NPHASES, 0,0,NDUM,
     &               $MXROCKTYPE, $MXPHAST, 0,0, RWK,DIMRWK, NERR, 
     &               LEVELC, NFOUT)
      IF (LEVELC) THEN
         DO LL = 1, NROCKTYPE
            DO MP = 1, NPHASES
               WRITE (NFOUT,
     &     "(' LONGITUDINAL DISPERSIVITY (ROCK',I2,',PHASE',I2,')',
     &        T49,E10.2,1X,A20)" )
     &  LL, MP, LONGDISP(LL,MP), "[ft]                "
            ENDDO
         ENDDO
      ENDIF

      DO LL = 1, NROCKTYPE
         DO MP = 1, NPHASES
            TRANSDISP(LL,MP) = 0.0D0
         ENDDO
      ENDDO
      CALL DEFAULT(EXTDIST)
      CALL GETVAL2D('TRANSVERSE_DISPERSIVITY[ft] ', TRANSDISP,'R8',
     &               NROCKTYPE, NPHASES, 0,0,NDUM,
     &               $MXROCKTYPE, $MXPHAST, 0,0, RWK,DIMRWK, NERR, 
     &               LEVELC, NFOUT)
      IF (LEVELC) THEN
         DO LL = 1, NROCKTYPE
            DO MP = 1, NPHASES
               WRITE (NFOUT,
     &     "(' TRANSVERSE DISPERSIVITY (ROCK',I2,',PHASE',I2,')',
     &        T49,E10.2,1X,A20)" )
     &  LL, MP, TRANSDISP(LL,MP), "[ft]                "
            ENDDO
         ENDDO
      ENDIF

      NDUM = 0
      DO LL = 1, NROCKTYPE
         DO L = 1, NSPECIES
            DO MP = 1, NPHASES
              IF (MOLDIFF(LL,L,MP).NE.0.0D0) NDUM=NDUM+1
            ENDDO
         ENDDO
      ENDDO
      DO LL = 1, NROCKTYPE
         DO MP = 1, NPHASES
            IF (LONGDISP(LL,MP).NE.0.0D0) NDUM=NDUM+1
         ENDDO
      ENDDO
      DO LL = 1, NROCKTYPE
         DO MP = 1, NPHASES
            IF (TRANSDISP(LL,MP).NE.0.0D0) NDUM=NDUM+1
         ENDDO
      ENDDO
      IF ((NDUM.EQ.0).AND.(.NOT.USE_RADIODECAY))  THEN
         NO_DISP = .TRUE.
         IF (LEVELC) THEN
            WRITE (NFOUT,*) 
     &    "DISPERSION MODE IS TURNED OFF BECAUSE OF ZERO COEFFICIENTS"
         ENDIF
      ENDIF


C GET THE PHASE TYPE  -- DEFAULT IS THE FLOWING PHASE
      DO L=1, NSPECIES
            PHASETYPE(L) = 1
            PHASETYPE_STR(L) = "FLOWING"
      ENDDO
      CALL GETVALS('PHASE_TYPE ', PHASETYPE_STR,'CS',
     &              NSPECIES, 0, 0,20,NDUM,NERR)
      DO L=1, NSPECIES
            IF (PHASETYPE_STR(L).EQ.'FLOWING') THEN
               PHASETYPE(L) = 1
            ELSE IF (PHASETYPE_STR(L).EQ.'STATIONARY') THEN
               PHASETYPE(L) = 2

C              ---CHANGE EQLBCOEF TO DEFAULT VALUE FOR IMMOBILE SPECIES
               DO MP = 1, NPHASES   
                  EQLBCOEF(MP, L) = 1.0D0
               ENDDO
               IF (LEVELC) THEN
                  IF (NPHASES .EQ. 1) THEN
                     WRITE (NFOUT,
     &     "(' UPDATE: PHASE EQLBRM PARTITIONING COEFF FOR ',
     &        A20, T53, F6.2 )" )
     &      SPECNAME(L), EQLBCOEF(1, L)
                  ELSE IF (NPHASES .EQ. 2) THEN
                     WRITE (NFOUT,
     &     "(' UPDATE: PHASE EQLBRM PARTITIONING COEFF FOR ',
     &        A20, T53, F6.2, 1X, F6.2 )" )
     &      SPECNAME(L), EQLBCOEF(1, L), EQLBCOEF(2, L)
                  ELSE IF (NPHASES .EQ. 3) THEN
                     WRITE (NFOUT,
     &     "(' UPDATE: PHASE EQLBRM PARTITIONING COEFF FOR ',
     &        A20, T53, F6.2, 1X, F6.2,  1X, F6.2)" )
     &      SPECNAME(L), EQLBCOEF(1,L),EQLBCOEF(2,L),EQLBCOEF(3,L)
                  ELSE
                     WRITE (NFOUT,
     &     "('   ERROR IN TRISDAT:  TOO MANY FLOWING PHASES!!  ')" )
                  ENDIF
               ENDIF

            ELSE 
               IF (LEVELC) 
     &             WRITE (NFOUT,*) "ERROR IN TRISDAT: UNSUPPORTED PHASE 
     &                              TYPE"
               NERR = NERR + 1
            ENDIF
      ENDDO
      IF (LEVELC) THEN
         DO L=1,NSPECIES
               WRITE (NFOUT,
     &     "(' PHASE TYPE FOR ', 
     &        A20, T54, A20, ' (',I1,')' )" ) 
     &      SPECNAME(L), PHASETYPE_STR(L), PHASETYPE(L) 
         ENDDO
      ENDIF

C GET THE PHASE TYPE FOR COMPOSITIONAL MODEL -- DEFAULT IS THE FLOWING 
C PHASE
$COMP$XREAC      DO L=1, NXSPECIES
$COMP$XREAC            XPHASETYPE(L) = 1
$COMP$XREAC            XPHASETYPE_STR(L) = "FLOWING"
$COMP$XREAC      ENDDO
$COMP$XREAC      CALL GETVALS('XPHASE_TYPE ', XPHASETYPE_STR,'CS',
$COMP$XREAC     &              NXSPECIES, 0, 0,20,NDUM,NERR)
$COMP$XREAC      DO L=1, NXSPECIES
$COMP$XREAC            IF (XPHASETYPE_STR(L).EQ.'FLOWING') THEN
$COMP$XREAC               XPHASETYPE(L) = 1
$COMP$XREAC            ELSE IF (XPHASETYPE_STR(L).EQ.'STATIONARY') THEN
$COMP$XREAC               XPHASETYPE(L) = 2

$CMFMFE$XREAC      DO L=1, NXSPECIES
$CMFMFE$XREAC            XPHASETYPE(L) = 1
$CMFMFE$XREAC            XPHASETYPE_STR(L) = "FLOWING"
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      CALL GETVALS('XPHASE_TYPE ', XPHASETYPE_STR,'CS',
$CMFMFE$XREAC     &              NXSPECIES, 0, 0,20,NDUM,NERR)
$CMFMFE$XREAC      DO L=1, NXSPECIES
$CMFMFE$XREAC            IF (XPHASETYPE_STR(L).EQ.'FLOWING') THEN
$CMFMFE$XREAC               XPHASETYPE(L) = 1
$CMFMFE$XREAC            ELSE IF (XPHASETYPE_STR(L).EQ.'STATIONARY') THEN
$CMFMFE$XREAC               XPHASETYPE(L) = 2

C              ---CHANGE XEQLBCOEF TO DEFAULT VALUE FOR IMMOBILE SPECIES
$COMP$XREAC               DO MP = 1, NPHASES
$COMP$XREAC                  XEQLBCOEF(MP, L) = 1.0D0
$COMP$XREAC               ENDDO
$COMP$XREAC               IF (LEVELC) THEN
$COMP$XREAC                  IF (NPHASES .EQ. 1) THEN
$COMP$XREAC                     WRITE (NFOUT,
$COMP$XREAC     &     "(' UPDATE: XMODEL PHASE EQLBRM PARTITIONING COEFF FOR ',
$COMP$XREAC     &        A20, T53, F6.2 )" )
$COMP$XREAC     &      XSPECNAME(L), XEQLBCOEF(1, L)
$COMP$XREAC                  ELSE IF (NPHASES .EQ. 2) THEN
$COMP$XREAC                     WRITE (NFOUT,
$COMP$XREAC     &     "(' UPDATE: XMODEL PHASE EQLBRM PARTITIONING COEFF FOR ',
$COMP$XREAC     &        A20, T53, F6.2, 1X, F6.2 )" )
$COMP$XREAC     &      XSPECNAME(L), XEQLBCOEF(1, L), XEQLBCOEF(2, L)
$COMP$XREAC                  ELSE IF (NPHASES .EQ. 3) THEN
$COMP$XREAC                     WRITE (NFOUT,
$COMP$XREAC     &     "(' UPDATE: XMODEL PHASE EQLBRM PARTITIONING COEFF FOR ',
$COMP$XREAC     &        A20, T53, F6.2, 1X, F6.2,  1X, F6.2)" )
$COMP$XREAC     &      XSPECNAME(L),XEQLBCOEF(1,L),XEQLBCOEF(2,L),XEQLBCOEF(3,L)
$COMP$XREAC                  ELSE
$COMP$XREAC                     WRITE (NFOUT,
$COMP$XREAC     &     "('   ERROR IN TRISDAT:  TOO MANY FLOWING PHASES!!  ')" )
$COMP$XREAC                  ENDIF
$COMP$XREAC               ENDIF

$CMFMFE$XREAC               DO MP = 1, NPHASES
$CMFMFE$XREAC                  XEQLBCOEF(MP, L) = 1.0D0
$CMFMFE$XREAC               ENDDO
$CMFMFE$XREAC               IF (LEVELC) THEN
$CMFMFE$XREAC                  IF (NPHASES .EQ. 1) THEN
$CMFMFE$XREAC                     WRITE (NFOUT,
$CMFMFE$XREAC     &     "(' UPDATE: XMODEL PHASE EQLBRM PARTITIONING COEFF FOR ',
$CMFMFE$XREAC     &        A20, T53, F6.2 )" )
$CMFMFE$XREAC     &      XSPECNAME(L), XEQLBCOEF(1, L)
$CMFMFE$XREAC                  ELSE IF (NPHASES .EQ. 2) THEN
$CMFMFE$XREAC                     WRITE (NFOUT,
$CMFMFE$XREAC     &     "(' UPDATE: XMODEL PHASE EQLBRM PARTITIONING COEFF FOR ',
$CMFMFE$XREAC     &        A20, T53, F6.2, 1X, F6.2 )" )
$CMFMFE$XREAC     &      XSPECNAME(L), XEQLBCOEF(1, L), XEQLBCOEF(2, L)
$CMFMFE$XREAC                  ELSE IF (NPHASES .EQ. 3) THEN
$CMFMFE$XREAC                     WRITE (NFOUT,
$CMFMFE$XREAC     &     "(' UPDATE: XMODEL PHASE EQLBRM PARTITIONING COEFF FOR ',
$CMFMFE$XREAC     &        A20, T53, F6.2, 1X, F6.2,  1X, F6.2)" )
$CMFMFE$XREAC     &      XSPECNAME(L),XEQLBCOEF(1,L),XEQLBCOEF(2,L),XEQLBCOEF(3,L)
$CMFMFE$XREAC                  ELSE
$CMFMFE$XREAC                     WRITE (NFOUT,
$CMFMFE$XREAC     &     "('   ERROR IN TRISDAT:  TOO MANY FLOWING PHASES!!  ')" )
$CMFMFE$XREAC                  ENDIF
$CMFMFE$XREAC               ENDIF

$COMP$XREAC            ELSE
$COMP$XREAC               IF (LEVELC)
$COMP$XREAC     &             WRITE (NFOUT,*) "ERROR IN TRISDAT: UNSUPPORTED 
$COMP$XREAC     &                              PHASE TYPE"
$COMP$XREAC               NERR = NERR + 1
$COMP$XREAC            ENDIF
$COMP$XREAC      ENDDO
$COMP$XREAC      IF (LEVELC) THEN
$COMP$XREAC         DO L=1,NXSPECIES
$COMP$XREAC               WRITE (NFOUT,
$COMP$XREAC     &     "(' XMODEL PHASE TYPE FOR ',
$COMP$XREAC     &        A20, T54, A20, ' (',I1,')' )" )
$COMP$XREAC     &      XSPECNAME(L), XPHASETYPE_STR(L), XPHASETYPE(L)
$COMP$XREAC         ENDDO
$COMP$XREAC      ENDIF

$CMFMFE$XREAC            ELSE
$CMFMFE$XREAC               IF (LEVELC)
$CMFMFE$XREAC     &             WRITE (NFOUT,*) "ERROR IN TRISDAT: UNSUPPORTED 
$CMFMFE$XREAC     &                              PHASE TYPE"
$CMFMFE$XREAC               NERR = NERR + 1
$CMFMFE$XREAC            ENDIF
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      IF (LEVELC) THEN
$CMFMFE$XREAC         DO L=1,NXSPECIES
$CMFMFE$XREAC               WRITE (NFOUT,
$CMFMFE$XREAC     &     "(' XMODEL PHASE TYPE FOR ',
$CMFMFE$XREAC     &        A20, T54, A20, ' (',I1,')' )" )
$CMFMFE$XREAC     &      XSPECNAME(L), XPHASETYPE_STR(L), XPHASETYPE(L)
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC      ENDIF

C     CALCULATE NRQ, NRK, PIMULTI, PIPURE, NPHASE, PHASEIDENTITY
      NRQ = 0
      NRK = 0
      DO L=1, NPRODUCTS
         IF (REACTIONTYPE(L).EQ.0) THEN
            NRQ=NRQ+1
         ELSE IF ((REACTIONTYPE(L).EQ.1).OR.(REACTIONTYPE(L).EQ.2)) THEN
            NRK=NRK+1
         ENDIF
      ENDDO
      PIMULTI=1
      PIPURE=0
      DO L=1, NSPECIES
         IF (PHASETYPE(L).EQ.2) THEN
            PIPURE=PIPURE+1
            PHASEIDENTITY(L) = PIPURE+1
         ELSE IF (PHASETYPE(L).EQ.1) THEN
            PHASEIDENTITY(L) = 1
         ENDIF
      ENDDO
      DO MP=1, PIMULTI+PIPURE
         NPHASE(MP)=0
      ENDDO
      DO  L=1, NSPECIES
         NPHASE(PHASEIDENTITY(L)) = NPHASE(PHASEIDENTITY(L))+1
      ENDDO
C     ECHO  NRQ, NRK, PIMULTI, PIPURE, NPHASE, PHASEIDENTITY
      IF (LEVELC) THEN
         WRITE (NFOUT,"(' NRQ ',T54, I3 )" )  NRQ
         WRITE (NFOUT,"(' NRK ',T54, I3 )" )  NRK
         WRITE (NFOUT,"(' PIMULTI ',T54, I3 )" )  PIMULTI
         WRITE (NFOUT,"(' PIPURE ',T54, I3 )" )  PIPURE
         DO L=1, NSPECIES
            WRITE (NFOUT, "(' PHASEIDENTITY FOR ', A20, T54, I2  )")
     &      SPECNAME(L), PHASEIDENTITY(L)
         ENDDO
         DO MP=1, PIMULTI+PIPURE
               WRITE (NFOUT, "(' NPHASE(', I2,') ', T54, I2  )" ) 
     &         MP, NPHASE(MP) 
         ENDDO
      ENDIF

C     GET COMPCHARGE(NC)
      DO L=1, NCOMPS
         COMPCHARGE(L) = 0.0
      ENDDO
      CALL GETVAL('COMP_CHARGE ', COMPCHARGE,'R8',
     &              NCOMPS, 0, 0,0,NDUM,NERR)
      IF (LEVELC) THEN
         WRITE (NFOUT, "(' COMPCHARGE(*) = ',
     &             99(1X, F5.1)  )")
     &      (COMPCHARGE(L), L=1, NCOMPS)
      ENDIF

C     GET HALFSATCONST(NC,NPRODUCTS)
      DO L=1, NCOMPS
         DO LL=1, NPRODUCTS
            HALFSATCONST(L+(LL-1)*NCOMPS) = 0.0
         ENDDO
      ENDDO
      IF (NPRODUCTS.GT.0) THEN
         CALL DEFAULT('[lbM/cu-ft] ')
         CALL GETVAL('HALF_SAT_CONST[lbM/cu-ft] ', HALFSATCONST,'R8',
     &              NCOMPS, NPRODUCTS, 0,0,NDUM,NERR)
      ENDIF
      IF (LEVELC) THEN
         DO LL=1, NPRODUCTS
            WRITE (NFOUT, "(' HALFSATCONST(*,', I2, ') = ',
     &             99(1X, E8.3)  )")
     &       LL, (HALFSATCONST(L+(LL-1)*NCOMPS), L=1, NCOMPS)
         ENDDO
      ENDIF

C     CALCULATE NXRQ, NXRK, PIXMULTI, PIXPURE, NXPHASE, XPHASEIDENTITY
C     FOR COMPOSITIONAL MODEL SPECIES
$COMP$XREAC      NXRQ = 0
$COMP$XREAC      NXRK = 0
$COMP$XREAC      DO L=1, NXPRODUCTS
$COMP$XREAC         IF (XREACTIONTYPE(L).EQ.0) THEN
$COMP$XREAC            NXRQ=NXRQ+1
$COMP$XREAC         ELSE IF ((XREACTIONTYPE(L).EQ.1).OR.(XREACTIONTYPE(L).EQ.2)) 
$COMP$XREAC     &   THEN
$COMP$XREAC            NXRK=NXRK+1
$COMP$XREAC         ENDIF
$COMP$XREAC      ENDDO
$COMP$XREAC      PIXMULTI=1
$COMP$XREAC      PIXPURE=0
$COMP$XREAC      DO L=1, NXSPECIES
$COMP$XREAC         IF (XPHASETYPE(L).EQ.2) THEN
$COMP$XREAC            PIXPURE=PIXPURE+1
$COMP$XREAC            XPHASEIDENTITY(L) = PIXPURE+1
$COMP$XREAC         ELSE IF (XPHASETYPE(L).EQ.1) THEN
$COMP$XREAC            XPHASEIDENTITY(L) = 1
$COMP$XREAC         ENDIF
$COMP$XREAC      ENDDO
$COMP$XREAC      DO MP=1, PIXMULTI+PIXPURE
$COMP$XREAC         NXPHASE(MP)=0
$COMP$XREAC      ENDDO
$COMP$XREAC      DO  L=1, NXSPECIES
$COMP$XREAC         NXPHASE(XPHASEIDENTITY(L)) = NXPHASE(XPHASEIDENTITY(L))+1
$COMP$XREAC      ENDDO

$CMFMFE$XREAC      NXRQ = 0
$CMFMFE$XREAC      NXRK = 0
$CMFMFE$XREAC      DO L=1, NXPRODUCTS
$CMFMFE$XREAC         IF (XREACTIONTYPE(L).EQ.0) THEN
$CMFMFE$XREAC            NXRQ=NXRQ+1
$CMFMFE$XREAC         ELSE IF ((XREACTIONTYPE(L).EQ.1).OR.(XREACTIONTYPE(L).EQ.2)) 
$CMFMFE$XREAC     &   THEN
$CMFMFE$XREAC            NXRK=NXRK+1
$CMFMFE$XREAC         ENDIF
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      PIXMULTI=1
$CMFMFE$XREAC      PIXPURE=0
$CMFMFE$XREAC      DO L=1, NXSPECIES
$CMFMFE$XREAC         IF (XPHASETYPE(L).EQ.2) THEN
$CMFMFE$XREAC            PIXPURE=PIXPURE+1
$CMFMFE$XREAC            XPHASEIDENTITY(L) = PIXPURE+1
$CMFMFE$XREAC         ELSE IF (XPHASETYPE(L).EQ.1) THEN
$CMFMFE$XREAC            XPHASEIDENTITY(L) = 1
$CMFMFE$XREAC         ENDIF
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      DO MP=1, PIXMULTI+PIXPURE
$CMFMFE$XREAC         NXPHASE(MP)=0
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      DO  L=1, NXSPECIES
$CMFMFE$XREAC         NXPHASE(XPHASEIDENTITY(L)) = NXPHASE(XPHASEIDENTITY(L))+1
$CMFMFE$XREAC      ENDDO

C     ECHO  NXRQ, NXRK, PIXMULTI, PIXPURE, NXPHASE, XPHASEIDENTITY
$COMP$XREAC      IF (LEVELC) THEN
$COMP$XREAC         WRITE (NFOUT,"(' NXRQ ',T54, I3 )" )  NXRQ
$COMP$XREAC         WRITE (NFOUT,"(' NXRK ',T54, I3 )" )  NXRK
$COMP$XREAC         WRITE (NFOUT,"(' PIXMULTI ',T54, I3 )" )  PIXMULTI
$COMP$XREAC         WRITE (NFOUT,"(' PIXPURE ',T54, I3 )" )  PIXPURE
$COMP$XREAC         DO L=1, NXSPECIES
$COMP$XREAC            WRITE (NFOUT, "(' XPHASEIDENTITY FOR ', A20, T54, I2  )")
$COMP$XREAC     &      XSPECNAME(L), XPHASEIDENTITY(L)
$COMP$XREAC         ENDDO
$COMP$XREAC         DO MP=1, PIXMULTI+PIXPURE
$COMP$XREAC               WRITE (NFOUT, "(' NXPHASE(', I2,') ', T54, I2  )" )
$COMP$XREAC     &         MP, NXPHASE(MP)
$COMP$XREAC         ENDDO
$COMP$XREAC      ENDIF

$CMFMFE$XREAC      IF (LEVELC) THEN
$CMFMFE$XREAC         WRITE (NFOUT,"(' NXRQ ',T54, I3 )" )  NXRQ
$CMFMFE$XREAC         WRITE (NFOUT,"(' NXRK ',T54, I3 )" )  NXRK
$CMFMFE$XREAC         WRITE (NFOUT,"(' PIXMULTI ',T54, I3 )" )  PIXMULTI
$CMFMFE$XREAC         WRITE (NFOUT,"(' PIXPURE ',T54, I3 )" )  PIXPURE
$CMFMFE$XREAC         DO L=1, NXSPECIES
$CMFMFE$XREAC            WRITE (NFOUT, "(' XPHASEIDENTITY FOR ', A20, T54, I2  )")
$CMFMFE$XREAC     &      XSPECNAME(L), XPHASEIDENTITY(L)
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC         DO MP=1, PIXMULTI+PIXPURE
$CMFMFE$XREAC               WRITE (NFOUT, "(' NXPHASE(', I2,') ', T54, I2  )" )
$CMFMFE$XREAC     &         MP, NXPHASE(MP)
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC      ENDIF

C     GET XCOMPCHARGE(NC)
$COMP$XREAC      DO L=1, NXCOMPS
$COMP$XREAC         XCOMPCHARGE(L) = 0.0
$COMP$XREAC      ENDDO
$COMP$XREAC      CALL GETVAL('XCOMP_CHARGE ', XCOMPCHARGE,'R8',
$COMP$XREAC     &              NXCOMPS, 0, 0,0,NDUM,NERR)
$COMP$XREAC      IF (LEVELC) THEN
$COMP$XREAC         WRITE (NFOUT, "(' XCOMPCHARGE(*) = ',
$COMP$XREAC     &             99(1X, F5.1)  )")
$COMP$XREAC     &      (XCOMPCHARGE(L), L=1, NXCOMPS)
$COMP$XREAC      ENDIF

$CMFMFE$XREAC      DO L=1, NXCOMPS
$CMFMFE$XREAC         XCOMPCHARGE(L) = 0.0
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      CALL GETVAL('XCOMP_CHARGE ', XCOMPCHARGE,'R8',
$CMFMFE$XREAC     &              NXCOMPS, 0, 0,0,NDUM,NERR)
$CMFMFE$XREAC      IF (LEVELC) THEN
$CMFMFE$XREAC         WRITE (NFOUT, "(' XCOMPCHARGE(*) = ',
$CMFMFE$XREAC     &             99(1X, F5.1)  )")
$CMFMFE$XREAC     &      (XCOMPCHARGE(L), L=1, NXCOMPS)
$CMFMFE$XREAC      ENDIF

C     GET XHALFSATCONST(NC,NXPRODUCTS)
$COMP$XREAC      DO L=1, NXCOMPS
$COMP$XREAC         DO LL=1, NXPRODUCTS
$COMP$XREAC            XHALFSATCONST(L+(LL-1)*NXCOMPS) = 0.0
$COMP$XREAC         ENDDO
$COMP$XREAC      ENDDO
$COMP$XREAC      IF (NXPRODUCTS.GT.0) THEN
$COMP$XREAC         CALL DEFAULT('[lbM/cu-ft] ')
$COMP$XREAC         CALL GETVAL('XHALF_SAT_CONST[lbM/cu-ft] ', XHALFSATCONST,'R8',
$COMP$XREAC     &              NXCOMPS, NXPRODUCTS, 0,0,NDUM,NERR)
$COMP$XREAC      ENDIF
$COMP$XREAC      IF (LEVELC) THEN
$COMP$XREAC         DO LL=1, NXPRODUCTS
$COMP$XREAC            WRITE (NFOUT, "(' XHALFSATCONST(*,', I2, ') = ',
$COMP$XREAC     &             99(1X, E8.3)  )")
$COMP$XREAC     &       LL, (XHALFSATCONST(L+(LL-1)*NXCOMPS), L=1, NXCOMPS)
$COMP$XREAC         ENDDO
$COMP$XREAC      ENDIF

$CMFMFE$XREAC      DO L=1, NXCOMPS
$CMFMFE$XREAC         DO LL=1, NXPRODUCTS
$CMFMFE$XREAC            XHALFSATCONST(L+(LL-1)*NXCOMPS) = 0.0
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC      ENDDO
$CMFMFE$XREAC      IF (NXPRODUCTS.GT.0) THEN
$CMFMFE$XREAC         CALL DEFAULT('[lbM/cu-ft] ')
$CMFMFE$XREAC         CALL GETVAL('XHALF_SAT_CONST[lbM/cu-ft] ', XHALFSATCONST,'R8',
$CMFMFE$XREAC     &              NXCOMPS, NXPRODUCTS, 0,0,NDUM,NERR)
$CMFMFE$XREAC      ENDIF
$CMFMFE$XREAC      IF (LEVELC) THEN
$CMFMFE$XREAC         DO LL=1, NXPRODUCTS
$CMFMFE$XREAC            WRITE (NFOUT, "(' XHALFSATCONST(*,', I2, ') = ',
$CMFMFE$XREAC     &             99(1X, E8.3)  )")
$CMFMFE$XREAC     &       LL, (XHALFSATCONST(L+(LL-1)*NXCOMPS), L=1, NXCOMPS)
$CMFMFE$XREAC         ENDDO
$CMFMFE$XREAC      ENDIF

C     CALCULATE RATEPOW(NC, NPRODUCTS), FORMULAMATRIX(NC,NS) AND 
C     VMATRIX(NS,NPRODUCTS) AND IF REQUIRED, XRATEPOW(NC, NPRODUCTS),
C     XFORMULAMATRIX(NC,NS) AND XVMATRIX(NS,NPRODUCTS)

      CALL CALAVMATRIX(STOICH,STOICHK,RATEPOW,FORMULAMATRIX,VMATRIX, 
     &          REACTIONTYPE,NSPECIES,NCOMPS,NPRODUCTS,LEVELC,NFOUT)

$COMP$XREAC      CALL CALAVMATRIX(XSTOICH,XSTOICHK,XRATEPOW,XFORMULAMATRIX,
$COMP$XREAC     &    XVMATRIX,XREACTIONTYPE,NXSPECIES,NXCOMPS,NXPRODUCTS,
$COMP$XREAC     &    LEVELC,NFOUT)

$CMFMFE$XREAC      CALL CALAVMATRIX(XSTOICH,XSTOICHK,XRATEPOW,XFORMULAMATRIX,
$CMFMFE$XREAC     &    XVMATRIX,XREACTIONTYPE,NXSPECIES,NXCOMPS,NXPRODUCTS,
$CMFMFE$XREAC     &    LEVELC,NFOUT)

C     CALCULATE MU(NS),RATECONST(NPRODUCTS,2)
C      SATR(1) = 0.5
C      SATR(2) = 0.5
C      SATR(3) = 0.0
C      CALL CALMURATECONST(MU, RATECONST, PKF, PKB, PEQK, 
C     &    SATR, EQLBCOEF, RATEPOW,
C     &    REACTIONTYPE, NSPECIES, NCOMPS, NPRODUCTS, 
C     &    NPHASES, LEVELC, NFOUT)
C     NOTE:  CALMURATECONST(..) IS CALLED IN SUBROUTINE REACTONECELL()

C -------------------------------------------------------------------
C     SETUP ALL OTHER ENVIRONMENT VARIBLES
C     WE DO NOT USE DATA FORMAT TO SET THE VARIABLES BECAUSE
C     SOME OF THE VARIABLE BELOW MIGHT BE GOT FROM INPUT FILE 
C     IN THE FUTURE VERSION IF NECCESSARY
C     HOWEVER, TO MINIMIZE THE BURDEN OF THE USER, WE SHOULD 
C     REDUCE THE CONTROL VARIABLES FROM INPUT FILE IF POSSIBLE
C -------------------------------------------------------------------
      EPSCONC = 1.0E-16   ! 1.0E-30
C      IF (LEVELC) WRITE (NFOUT, "(' EPSCONC ',T49,E10.2,1X,A20)" ) 
C     &  EPSCONC , "[kgmol/ft^3]        "
      SWITCHENABLED = .FALSE.

C     LOCH, LOCWATER, CHMMAXITER, NVIOL, IDEAL
C     CHMSCALEFLAG, CHMTESTSOLFLAG, CHMINTERPFLAG, HESSFLAG
      NIPSIPARM(1) = 0
      NIPSIPARM(2) = 0
      NIPSIPARM(3) = 100
      NIPSIPARM(4) = 0
      NIPSIPARM(5) = 0
      NIPSIPARM(6) = 0
      NIPSIPARM(7) = 0
      NIPSIPARM(8) = 0
      NIPSIPARM(9) = 1

C     SIMTEMP, PRESSURE,  RELTOL, ALPHA, TAUMIN, RHO 
      NIPSRPARM(1) = 275.0
      NIPSRPARM(2) = 101325.0
      NIPSRPARM(3) = 1.0E-10
      NIPSRPARM(4) = 1.0E-4
      NIPSRPARM(5) = 0.8
      NIPSRPARM(6) = 1.0E-2

      DO MP=1, NPHASES
         CALL PASTE_SIS(NIPSCPARM(MP), 'PHASE_NUMBER_', MP, ' ', KERR)
      ENDDO
      DO L=1, NSPECIES
         NIPSCPARM(L+NPHASES) = SPECNAME(L)
      ENDDO

      IDEBUGEQ = 0
      IDEBUG = 0
C      IDEBUGEQ = 2
C      IDEBUG = 1
C     OPEN(DEBUGUNIT, FILE='INTERNAL_DBG.OUT', STATUS='UNKNOWN')
      

C RETURN
C      IF (NSPECIES.LT.1.OR.NSPECIES.GT.$MXNSPEC) NERR = NERR + 1
      RETURN

 13   NERR = NERR + 1
      RETURN

      END
C ***************************************************************
C     CALCULATE RATEPOW(NC, NPRODUCTS),
C               FORMULAMATRIX(NC,NS) AND VMATRIX(NS,NPRODUCTS)

      SUBROUTINE CALAVMATRIX(STOICH, STOICHK, 
     &    RATEPOW, FORMULAMATRIX, VMATRIX, 
     &    REACTIONTYPE, NSPECIES, NCOMPS, NPRODUCTS, LEVELC, NFOUT)

      IMPLICIT NONE
      INTEGER NSPECIES, NCOMPS, NPRODUCTS, NFOUT, L, LL, 
     &        REACTIONTYPE(NPRODUCTS)
      LOGICAL LEVELC
      REAL*8 STOICHK($MXNSPEC, $MXNSPEC), STOICH($MXNSPEC, $MXNSPEC), 
     &       FORMULAMATRIX(NCOMPS, NSPECIES),
     &       VMATRIX(NSPECIES, NPRODUCTS),
     &       RATEPOW(NCOMPS, NPRODUCTS)

C     CALCULATE RATEPOW(NC, NPRODUCTS)
      DO L=1, NCOMPS
         DO LL=1, NPRODUCTS
            IF (REACTIONTYPE(LL).EQ.0) THEN
               RATEPOW(L,LL) = 0.0D0
            ELSE
               RATEPOW(L,LL) = STOICHK(LL,L)
            ENDIF
         ENDDO
      ENDDO

C     CALCULATE FORMULAMATRIX(NC,NS) AND VMATRIX(NS,NPRODUCTS)
      DO L=1, NCOMPS
         DO LL=1, NCOMPS
            FORMULAMATRIX(L, LL) = 0.0D0
         ENDDO
         FORMULAMATRIX(L,L) = 1.0D0
         DO LL=1, NPRODUCTS
            FORMULAMATRIX(L, LL+NCOMPS) = STOICH( LL, L)
         ENDDO
      ENDDO
      DO L=1, NCOMPS 
         DO LL=1, NPRODUCTS 
            VMATRIX(L, LL) = - STOICH( LL, L)
         ENDDO
      ENDDO
      DO L=1, NPRODUCTS
         DO LL=1, NPRODUCTS 
            VMATRIX(L+NCOMPS, LL) = 0.0D0
         ENDDO
         VMATRIX(L+NCOMPS, L) = 1.0D0
      ENDDO

C     ECHO
      IF (LEVELC) THEN
         DO LL=1, NPRODUCTS
            WRITE (NFOUT, "(' RATEPOW(*,', I2, ') = ',
     &             99(1X, F5.1)  )")
     &       LL, (RATEPOW(L,LL), L=1, NCOMPS)
         ENDDO
         DO LL=1, NSPECIES
            WRITE (NFOUT, "(' FORMULATMATRIX(*,', I2, ') = ',
     &             99(1X, F5.1)  )")
     &       LL, (FORMULAMATRIX(L,LL), L=1, NCOMPS)
         ENDDO
         DO LL=1, NPRODUCTS
            WRITE (NFOUT, "(' VMATRIX(*,', I2, ') = ',
     &             99(1X, F5.1)  )")
     &       LL, (VMATRIX(L,LL), L=1, NSPECIES)
         ENDDO
      ENDIF
      RETURN
      END
     


C -----------------------------------------------------------------
      SUBROUTINE TRIADAT (NERR)
C -----------------------------------------------------------------
      IMPLICIT NONE

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'trmodel.h'
      INCLUDE 'trarydat.h'

      CHARACTER*10 CNAME
      CHARACTER*50 WORKSTR
      INTEGER NERR,NDUM,L,KERR

C ---------------------------------------------------

$COMP         MODACT=$XMODEL
$COMP         IF(FLOWMODEL.EQ.$XMODEL) CALL XIADAT(NERR)
$CMFMFE         MODACT=$XMMODEL
$CMFMFE         IF(FLOWMODEL.EQ.$XMMODEL) CALL XIADAT(NERR)
$HYDROI       MODACT=$HMODEL
$HYDROI       IF(FLOWMODEL.EQ.$HMODEL) CALL HIADAT(NERR)
$SINGLEI      MODACT=$TMODEL
$SINGLEI      IF(FLOWMODEL.EQ.$TMODEL) CALL TIADAT(NERR)
C$AIR          IF(FLOWMODEL.EQ.AIR) CALL AIADAT(NERR)
      MODACT=$TRMODEL

C INITIALIZATION OF CONCENTRATIONS ETC.

      NDUM=0
      DO L=1,NSPECIES
         KERR = 0
         CALL DEFAULT('[lbM/cu-ft] ')
         CALL MERGE_SS(WORKSTR, SPECNAME(L), '[lbM/cu-ft] ', KERR)
         CALL GETGRDA (WORKSTR, 1, NDUM, KERR)
         IF (KERR.GT.0) THEN
            IF (LEVELC) WRITE (NFOUT,"(/' ERROR: INVALID ', A7)")
     &                        SPECNAME(L)
            NERR=NERR+1
            NDUM=0
         ELSE
            IF (NDUM.GT.0) THEN
            IF (LEVELC) WRITE(TITU,
     &     "(' INITIAL CONC FOR SPECIE ',I1,' & FAULT BLOCK')") L
               CALL GEAOUT(N_CONC,L,1)
             ENDIF
         ENDIF
      ENDDO

      END
C -----------------------------------------------------------------
C   END OF  SUBROUTINE TRIADAT (NERR)
C -----------------------------------------------------------------

C -----------------------------------------------------------------
C    FLEXIBLE VERSION OF GETVAL() FOR 2 DIMENSIONAL REAL*8 ARRAY
C -----------------------------------------------------------------
      SUBROUTINE GETVAL2D (VNAM,VAL,VTYP,NDIM1,NDIM2,NDIM3,NDIM4,NUMRET,
     &                     MXDIM1, MXDIM2, MXDIM3, MXDIM4, RWK, DIMRWK,
     &                     NERR, LEVELC, NFOUT)
      IMPLICIT NONE
      INTEGER NDIM1,NDIM2,NDIM3,NDIM4,NUMRET,
     &        MXDIM1, MXDIM2, MXDIM3, MXDIM4, DIMRWK, NERR, I, J,
     &        NFOUT
      CHARACTER*1 VNAM(*)
      REAL*8 VAL(MXDIM1,MXDIM2)
      REAL*8 RWK(NDIM1,NDIM2)
      CHARACTER*2 VTYP
      LOGICAL LEVELC

      IF ( (NDIM1.EQ.0).OR.(NDIM2.EQ.0).OR.(NDIM3.NE.0).OR.(NDIM4.NE.0)
     &     .OR.(MXDIM1.EQ.0).OR.(MXDIM2.EQ.0).OR.(MXDIM3.NE.0)
     &     .OR.(MXDIM4.NE.0) ) THEN
         IF (LEVELC) WRITE(NFOUT,*) 
     &      "ERROR IN GETVAL2D():  WRONG USAGE ! "
         NERR = NERR+1
         RETURN
      ELSE IF (DIMRWK.LT.NDIM1*NDIM2) THEN
         IF (LEVELC) WRITE(NFOUT,*)  
     &      "ERROR IN GETVAL2D():  RWK TOO SMALL ! "
         NERR = NERR+1
         RETURN
      ELSE IF ((NDIM1.GT.MXDIM1).OR.(NDIM2.GT.MXDIM2)) THEN
         IF (LEVELC) WRITE(NFOUT,*) 
     &      "ERROR IN GETVAL2D():  OUT ARRAY TOO SMALL ! "
         NERR = NERR+1
         RETURN
      ENDIF

C     STORE BACK THE INITIAL VALUE
      DO I=1, NDIM1
         DO J=1, NDIM2
            RWK(I,J) = VAL(I,J)
         ENDDO
      ENDDO

      CALL GETVAL(VNAM,RWK,VTYP,NDIM1,NDIM2,NDIM3,NDIM4,NUMRET,NERR)

      DO I=1, NDIM1
         DO J=1, NDIM2
            VAL(I,J) = RWK(I,J)
         ENDDO
      ENDDO

      RETURN
      END

C -----------------------------------------------------------------
     
C -----------------------------------------------------------------
C    FLEXIBLE VERSION OF GETVAL() FOR 3 DIMENSIONAL REAL*8 ARRAY
C -----------------------------------------------------------------
      SUBROUTINE GETVAL3D (VNAM,VAL,VTYP,NDIM1,NDIM2,NDIM3,NDIM4,NUMRET,
     &                     MXDIM1, MXDIM2, MXDIM3, MXDIM4, RWK, DIMRWK,
     &                     NERR, LEVELC, NFOUT)
      IMPLICIT NONE
      INTEGER NDIM1,NDIM2,NDIM3,NDIM4,NUMRET,
     &        MXDIM1, MXDIM2, MXDIM3, MXDIM4, DIMRWK, NERR, I, J, K,
     &        NFOUT
      CHARACTER*1 VNAM(*)
      REAL*8 VAL(MXDIM1,MXDIM2,MXDIM3)
      REAL*8 RWK(NDIM1,NDIM2,NDIM3)
      CHARACTER*2 VTYP
      LOGICAL LEVELC

      IF ( (NDIM1.EQ.0).OR.(NDIM2.EQ.0).OR.(NDIM3.EQ.0).OR.(NDIM4.NE.0)
     &     .OR.(MXDIM1.EQ.0).OR.(MXDIM2.EQ.0).OR.(MXDIM3.EQ.0)
     &     .OR.(MXDIM4.NE.0) ) THEN
         IF (LEVELC) WRITE(NFOUT,*) 
     &      "ERROR IN GETVAL3D():  WRONG USAGE ! "
         NERR = NERR+1
         RETURN
      ELSE IF (DIMRWK.LT.NDIM1*NDIM2*NDIM3) THEN
         IF (LEVELC) WRITE(NFOUT,*)  
     &      "ERROR IN GETVAL3D():  RWK TOO SMALL ! "
         NERR = NERR+1
         RETURN
      ELSE IF ((NDIM1.GT.MXDIM1).OR.(NDIM2.GT.MXDIM2)
     &         .OR.(NDIM3.GT.MXDIM3) ) THEN
         IF (LEVELC) WRITE(NFOUT,*) 
     &      "ERROR IN GETVAL3D():  OUT ARRAY TOO SMALL ! "
         NERR = NERR+1
         RETURN
      ENDIF

C     STORE BACK THE INITIAL VALUE
      DO I=1, NDIM1
         DO J=1, NDIM2
            DO K=1, NDIM3
               RWK(I,J,K) = VAL(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      CALL GETVAL(VNAM,RWK,VTYP,NDIM1,NDIM2,NDIM3,NDIM4,NUMRET,NERR)

      DO I=1, NDIM1
         DO J=1, NDIM2
            DO K=1, NDIM3
               VAL(I,J,K) = RWK(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      RETURN
      END

C -----------------------------------------------------------------

C ***************************************************************
      SUBROUTINE TRTDATA (NERR)
C ***************************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'trarydat.h'
      INCLUDE 'trmodel.h'

      INTEGER NDUM,NERR,ISET(4)
      EXTERNAL SETARYR8N
      DATA ISET/4*0/

$COMP         MODACT=$XMODEL
$COMP         IF(FLOWMODEL.EQ.$XMODEL) CALL XTDATA(NERR)
$CMFMFE         MODACT=$XMMODEL
$CMFMFE         IF(FLOWMODEL.EQ.$XMMODEL) CALL XTDATA(NERR)
$HYDROI       MODACT=$HMODEL
$HYDROI       IF(FLOWMODEL.EQ.$HMODEL) CALL HTDATA(NERR)
$SINGLEI      MODACT=$TMODEL
$SINGLEI      IF(FLOWMODEL.EQ.$TMODEL) CALL TTDATA(NERR)
C$AIR          IF(FLOWMODEL.EQ.AIR) CALL ATDATA(NERR)
      MODACT=$TRMODEL

      CALL GETVAL('N_CONC_STEPS ',NCSTEP,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC) WRITE (NFOUT,
     &     "(' NUMBER OF TRANSPORT STEPS PER FLOW STEP  ',T54, I3 )" ) 
     &      NCSTEP
      IF (NCSTEP.LT.1) NERR = NERR + 1

      CALL GETVAL('TRFLXLMTRTYPE ',NTRFLXLMT,'I4',0,0,0,0,NDUM,NERR)
      CALL GETVAL('TRFLXLMTR ',TRFLXLMTR,'R8',0,0,0,0,NDUM,NERR)
      CALL GETVAL('TRNOFLXLMTR ',TRNOFLXLMTR,'L4',0,0,0,0,NDUM,NERR)

      IF(TRNOFLXLMTR) THEN
         R8UTIL=0.0D0
         I4UTIL=3
         ISET(1)=3
         ISET(2)=N_TRSLP
         ISET(3)=N_R8U
         ISET(4)=N_I4U
         CALL CALLWORK(SETARYR8N,ISET)
      ENDIF

      CALL GETVAL('TRDDLINSOL ',IDDLINSOL,'I4',0,0,0,0,NDUM,NERR)
      IF (LEVELC) WRITE (NFOUT,
     &     "(' SOLVER TYPE FOR DIFFUSION-DISPERSION ',T54,I2)") 
     &      IDDLINSOL
      IF (IDDLINSOL.LT.1.OR.IDDLINSOL.GT.4) THEN
         WRITE(0,*) 'ONLY 4 SOLVERS AVAILABLE: 1-GMRES, 2-BCGS,
     &               3-PCG, 4-HYPRE!!'
         NERR = NERR + 1
      ENDIF

      END

C ***************************************************************
      SUBROUTINE TRQUIT (NERR)
C ***************************************************************
      INCLUDE 'control.h'
      INCLUDE 'trmodel.h'

$COMP         MODACT=$XMODEL
$COMP         IF(FLOWMODEL.EQ.$XMODEL) CALL XQUIT(NERR)
$CMFMFE       MODACT=$XMMODEL
$CMFMFE       IF(FLOWMODEL.EQ.$XMMODEL) CALL XQUIT(NERR)
$HYDROI       MODACT=$HMODEL
$HYDROI       IF(FLOWMODEL.EQ.$HMODEL) CALL HQUIT(NERR)
$SINGLEI      MODACT=$TMODEL
$SINGLEI      IF(FLOWMODEL.EQ.$TMODEL) CALL TQUIT(NERR)
C$AIR          IF(FLOWMODEL.EQ.AIR) CALL AQUIT(NERR)
      MODACT=$TRMODEL

C     FUTURE: NEED TO CHECK IF NF_OUT_BD IS REALLY OPENED
      CLOSE(NF_OUT_BD)
C     WRITE(*,*)  'NF_OUT_BD IS CLOSED. '
      END

C ***************************************************************


