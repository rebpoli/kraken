C  BDARYIN.DF - INPUT BOUNDARY CONDITION DATA 

C  ROUTINES IN THIS MODULE:

C  SUBROUTINE BDARYIN
c  SUBROUTINE BOUNDSET
c  SUBROUTINE UNPACK_VOL
c  SUBROUTINE UNPACK_MPFAVOL
c  SUBROUTINE FINDBELSW
c  SUBROUTINE GETSOURCEINDEX
c  SUBROUTINE BDPROG
c  SUBROUTINE BDMOD 
c  SUBROUTINE MAKNAM
c  SUBROUTINE DOBDARY
c  SUBROUTINE DOBDARYW
c  
c  Malgo Peszynska, 1/01  initial version
c  MPeszynska       2/01  added reading and processing of user programs 
c  MPeszynska       3/01  added routines DOBDARY for processing DEPTHMOD
c                         on bdary elements
C***********************************************************************
      SUBROUTINE BDARYIN (NTIME,NERR)
C***********************************************************************
      IMPLICIT NONE
      INTEGER  NTIME,NERR
      INCLUDE 'boundary.h'
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'unitsex.h'

      INTEGER NDUM,I,J,NERR0,NREMAIN,N,NR,NB,K,NOFF

c ===============
      NERR0 = NERR

      IF(LEVELC) WRITE(NFOUT,*)
      IF(LEVELC) WRITE(NFOUT,*) 
     &     '***********************************************'

c ===============
c allow for modification of BDAREA_EPS 
      BDAREA_EPS = 0.001

      CALL DEFAULT("[sq-ft]")
      CALL GETVAL('BDAREA_EPS[sq-ft] ',BDAREA_EPS,'R4',
     &     0,0,0,0,NDUM,NERR)

      if(levelc) then
         write(NFOUT,*)
     &     'SIZE THRESHOLD FOR AREA OF BOUNDARY ELEMENTS '
         write(NFOUT,*)
     &     '   BDAREA_EPS = ',BDAREA_EPS, ' [sq-ft]'
      endif
c ===============

      IF(NTIME.EQ.1) THEN

         NBND_REG = 0 
         CALL GETVAL('NBND_REG ',NBND_REG,'I4',0,0,0,0,NDUM,NERR)
         IF (NERR0.NE.NERR) RETURN
         IF (NBND_REG.EQ.0) RETURN
         
         NBND_SUBREG = 0 
         CALL GETVAL('NBND_SUBREG ',NBND_SUBREG,'I4',0,0,0,0,NDUM,NERR)
         IF (NERR0.NE.NERR) RETURN
         IF (NBND_SUBREG.EQ.0) RETURN
      
         IF(LEVELC) WRITE(NFOUT,*) 'NUMBER OF BDARY REGIONS=',NBND_REG
         IF(LEVELC) WRITE(NFOUT,*) 'NUMBER OF BDARY SUBREGIONS='
     &        ,NBND_SUBREG

         DO I=1,$MXSUBREG 
            DO J=1,8
               BND_VOL(J,I)=0
            ENDDO
         ENDDO
      
         BNDOUT = .FALSE.
         CALL GETVAL('BNDOUT ',BNDOUT,'FG',0,0,0,0,NDUM,NERR)
         
      ENDIF
c ---------------------------------------------
c read info about surface regions: volumes first

      NDUM = 0
      CALL DEFAULT(EXTDIST)
      CALL GETVAL('BND_VOL[ft] ',BND_VOL,'R4',8,$MXSUBREG,0,0,NDUM,NERR)

c      write(*,*) 'returned from reading bnd_vol ',nerr0,nerr,ndum

      IF (NERR0.NE.NERR) RETURN
      IF(NDUM.EQ.0)  GOTO 1212    ! if no new volume data return ...


c print values of input
      
      IF(LEVELC) THEN
         WRITE(NFOUT,*)
         WRITE(NFOUT,101) ' BOUNDARY VOLUMES :'
         DO I=1,NBND_SUBREG 
            WRITE(NFOUT,100) (BND_VOL(J,I),J=1,8)
         ENDDO
      ENDIF
 101  FORMAT(A,/,
     &     ' REGION BLOCK   X1     Y1     Z1     X2     X2     Z2' )
 100  FORMAT(8(F8.2,1X))
      
c ---------------------------------------------
c process the volume data

      CALL BOUNDSET()

c ---------------------------------------------
c read in the boundary type for each region 

 1212 CONTINUE

      IF(NTIME.EQ.1) THEN
         DO I=1, NBND_REG
            NBND_TYPE(I) = 0
         ENDDO
      ENDIF

      CALL GETVAL('BOUND_TYPE ',NBND_TYPE,'I4',NBND_REG,0,0,0,NDUM,NERR)
      IF(NERR.NE.NERR0) RETURN

      IF(NDUM.GT.0) THEN
         IF(LEVELC) THEN
            DO I=1, NBND_REG
               IF(LEVELC) WRITE(NFOUT,*) 
     &              'BDARY REGION ',I,' TYPE=',NBND_TYPE(I)
            ENDDO
         ENDIF
      ENDIF

c ---------------------------------------------
c read in the boundary depth for each region : only used with
c a specific boundary type. Models decide if they use it or not.

      IF(NTIME.EQ.1) THEN
         DO I=1, NBND_REG
            BND_DEP(I) = 0.
         ENDDO
      ENDIF

      CALL DEFAULT(EXTDIST)
      CALL GETVAL('BOUND_RDEP[ft] ',BND_DEP,'R4',
     &	NBND_REG,0,0,0,NDUM,NERR)
      IF(NERR.NE.NERR0) RETURN

      IF(NDUM.GT.0) THEN
         IF(LEVELC) THEN
            DO I=1, NBND_REG
               IF(LEVELC) WRITE(NFOUT,*) 
     &              'BDARY REGION ',I,' DEPTH=',BND_DEP(I)
            ENDDO
         ENDIF
      ENDIF

c ---------------------------------------------
c read in the boundary values for each region: this is done 
c by physical models since they only know how to
c interpret a particular value and assign units

      DO I=1,$MXBREG
         DO J=1,$MXNUMEQ
            IF(NTIME.EQ.1) NTABBND(I,J)=0
         ENDDO
      ENDDO

$HYDROI       MODACT=$HMODEL
$HYDROI       IF(MODELON($HMODEL)) CALL HBDINTAB(NTIME,NERR)
C
CGUS BOUNDARY CONDITIONS NOT FUNCTIONAL FOR THESE MODELS
C$AHYDROI       MODACT=$HAMODEL
C$AHYDROI       IF(MODELON($HAMODEL)) CALL HBDINTAB(NTIME,NERR)
C$HIMFMFE       MODACT=$HMMODEL
C$HIMFMFE       IF(MODELON($HMMODEL)) CALL HBDINTAB(NTIME,NERR)
C
$MMODEL       MODACT=$MMODEL
$MMODEL       IF(MODELON($MMODEL)) CALL MMDINTAB(NTIME,NERR)
$SINGLEI      MODACT=$TMODEL
$SINGLEI      IF(MODELON($TMODEL)) CALL TBDINTAB(NTIME,NERR)
C
CGUS MFMFE BOUNDARY CONDITIONS NOT FUNCTIONAL 
$SIMFMFE      MODACT=$TMMODEL
$SIMFMFE      IF(MODELON($TMMODEL)) CALL TBDINTAB(NTIME,NERR)
C
$TRCHEM       MODACT=$TRMODEL
$TRCHEM       IF(MODELON($TRMODEL)) CALL TRBDINTAB(NTIME,NERR)
              MODACT=0 

      END

c ********************************************************
      SUBROUTINE BOUNDSET()
c -----------------------------------
c process the volume data : find list of bdary elements
c for each block and each region. Pack the elements in 
c LOCBND with offsets in LOFFBND
c ********************************************************
      IMPLICIT NONE
      INCLUDE 'control.h'
      INCLUDE 'layout.h'
      INCLUDE 'boundary.h'
      
      INTEGER NDUM,I,J,NERR0,NREMAIN,N,NR,NB,K,NOFF,nbel0

c ------------------------------------
c initialize search for bdary elements

      NBEL = 0
      LOFFBND(1,1) = 0

      DO J=1,NBND_REG
         BNDRMOD(J) = 0
      ENDDO

c loop over blocks to find all regions active in each block
      DO NB = 1, NUMBLK
c new block
         IF(NB.GT.1) LOFFBND(1,NB) = LOFFBND(NBND_REG,NB-1)

         DO J = 1,NBND_REG
            IF(J.GT.1) LOFFBND(J,NB) = LOFFBND(J-1,NB)

c find all subregions associated with this region

            DO I=1,NBND_SUBREG
               NR=BND_VOL(1,I)
               N=BND_VOL(2,I)
               
!               write(*,*) 'Block ',nb,' region ',j,' subreg ',i,nr

               IF(J.EQ.NR.AND.N.EQ.NB) THEN
                  NBEL0=NBEL
                  KBND_BLK(I)=N

                 IF (KNDGRD.EQ.3) THEN                   
c----------
c 1/23/2011 generalize to general domain. But restricted to dirichlet
c gxue Hard coded boundary conditions for MPFA:
c 
$MPFA                     CALL UNPACK_MPFAVOLNEW(I,J,N,BND_VOL(3,I),
$MPFA     &                                         NBND_TYPE(I))
c----------              
                 ELSE
                    CALL UNPACK_VOL(I,J,N,BND_VOL(3,I))
                 ENDIF


                  IF(NBEL.GT.NBEL0) BNDRMOD(J)=BLKMODEL(NB)

!                  write(*,*) nbel0,nbel,' block ',nb,' mod=',
!     &                 bndrmod(j)

               ENDIF
            ENDDO         
         ENDDO
         
      ENDDO

!      WRITE(*,*) myprc,' NBEL FOUND TOTAL =',NBEL

      NOFF = 1
      DO NB=1,NUMBLK
         DO J =1,NBND_REG
            IF(LEVELC) THEN
               WRITE(NFOUT,*) 'BOUNDARY ELEMENTS FOR BLK='
     &              ,NB,' REG=',J,
     &              ' INDEX : ',NOFF,'... ',LOFFBND(J,NB)
c               WRITE(*,*) 'BOUNDARY ELEMENTS FOR BLK='
c     &              ,NB,' REG=',J,
c     &              ' INDEX : ',NOFF,'... ',LOFFBND(J,NB)
            ENDIF
c            DO K=NOFF,LOFFBND(J,NB)
c               WRITE(*,*) 'BLK=',NB,' REG ',J,' BELS:',
c     &              LOCBND(1,K),LOCBND(2,K),LOCBND(3,K),
c     &              ' .... ',LOCBND(4,K)
c            ENDDO
            NOFF = LOFFBND(J,NB)+1
         ENDDO
      ENDDO

      end

c************************************************
      SUBROUTINE UNPACK_VOL(NSUBREG,NREG,NBLK,VOL)
c************************************************
c Unpacks the definition of boundary volume 
c for a given block and region. 
c Fills in LOCBND(),LOFFBND and sets BAREA
c in case of TRCHEM models zeroes in the aux array BFLUX
c
c nsubreg - number of volume (input) - for information/debugging
c nreg    - number of bdary region (input)
c nblk    - faultblock number fot his volume
c vol     - 6 numbers defining the volume
c************************************************
      IMPLICIT NONE
      INTEGER NSUBREG,NREG,NBLK
      REAL*4 VOL(6)
     
      INCLUDE 'boundary.h'
      INCLUDE 'layout.h'
      INCLUDE 'blkary.h'

      INTEGER A(3),I
      EXTERNAL FINDBELSW
$TRCHEM      EXTERNAL ZEROFLUX
c -----------------------
c      write(*,*) 'unpack vol ',nsubreg,' in reg=',nreg,
c     &     ' <blk=',nblk,'>',vol

c copy values to common so callwork findbelsw can access it

      DO I=1,6
         VVOL(I) = VOL(I)
      ENDDO
      MYNBLK = NBLK
      MYREG = NREG

      A(1)=2
      A(2)=N_DEPTH
      A(3)=N_ROCK
      CALL CALLWORK(FINDBELSW,A)
      
$TRCHEM      A(1)=0
$TRCHEM      CALL CALLWORK(ZEROFLUX,A)

      END

C*********************************************************************
      SUBROUTINE FINDBELSW(
     &     IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,
     &     KEYOUT,NBLK,DEPTH,KROCK)
C*********************************************************************
c Main geometry routine for processing boundary condition volumes
c Searches for boundary elements in current faultblock (MYNBLK) only.
c The elements must lie on boundary of the faultblock and must 
c be (at least partially) included in the volume specified by array VOL. 

c This routine sets the values in array LOCBND(?,element).
c For each element, ?=1,2,3,4 denote useful data.
c     ?=1,2,3  denote i,j,k gridblock number of the surface element
c              These elements are located in "communication layers"
c              of each grid array so that some values (depth,properties)
c              can be kept there without allocating extra storage.
c              This means that KEYOUT() of such element must be 0.
c               
c     ?=4      denotes orientation (1 for x-, 2for x+, 3 for y- etc.)
c              For example, if LOCBND(4,el) = 1, then
c                  KEYOUT(LOCBND(1,el),LOCBND(2,el),LOCBND(3,el))=0
c              but
c                  KEYOUT(LOCBND(1,el)+1,LOCBND(2,el),LOCBND(3,el))=0

c Other values computed in this routine are BAREA and LOFFBND.

c BAREA is set to the surface area of the 
c (fraction of) element that lies within the volume. 
c This value needs to be computed by permeability, and by conv. factor
c and divided by the distance to the center of adjacent gridblock
c in order to deliver values compatible with transmissabilities
c for Dirichlet condition.
c For flux condition, it is used to get the mass flux value.

c LOFFBND(reg,faultblock) contain offsets in LOCBND and BAREA.
c*********************************************************************
      IMPLICIT NONE
$POWER      INCLUDE 'msjunk.h'

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'
      INCLUDE 'layout.h'
      INCLUDE 'boundary.h'
 
      INTEGER I, J, K, IL1, IL2, JL1, JL2, KL1, KL2
      INTEGER IOFF,JOFF,KOFF,IDIM,JDIM,KDIM,LDIM,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 DEPTH(IDIM,JDIM,KDIM) 
      INTEGER KROCK(IDIM,JDIM,KDIM) 

      INTEGER MERR,N,M,JEST
      REAL*4 YL,YR,ZL,ZR,XL,XR,X,Y,Z,DX,DY,DZ
      REAL*4 FIND_AREA
c ====================================================

c      write(*,*) 'In FINDBELSW, bdarea eps ',BDAREA_EPS

      IF (NBND_REG.EQ.0) RETURN
      IF (NBLK.NE.MYNBLK) RETURN
c =====================

      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)
c ===================================================== x -
c scan the jk elements to find boundary elements on jk, x- surfaces

      DO K=1,KDIM
         DO J=1,JDIM
            DO I=2,IDIM
               JEST = 0 
               IF (KEYOUT(I,J,K).EQ.1.AND.KEYOUT(I-1,J,K).EQ.0) 
     &              JEST = I-1
               IF(JEST.EQ.0) GOTO 11
            
               XR = XREC(JEST+IOFF+1,NBLK)
               
               ZL = ZREC(K+KOFF,NBLK)
               ZR = ZREC(K+KOFF+1,NBLK)
               YL = YREC(J+JOFF,NBLK)
               YR = YREC(J+JOFF+1,NBLK)
               
               DY = FIND_AREA(YL,YR,VVOL(2),VVOL(5))
               DZ = FIND_AREA(ZL,ZR,VVOL(3),VVOL(6))
               
               IF(XR.GE.VVOL(1).AND.XR.LE.VVOL(4).
     &              AND.DY*DZ.GT.BDAREA_EPS) THEN
               
c     register this element for the region associated with this volume
                  NBEL = NBEL + 1
                  LOCBND(1,NBEL)=JEST
                  LOCBND(2,NBEL)=J
                  LOCBND(3,NBEL)=K
                  LOCBND(4,NBEL)=1 ! FACE X-
                  
                  LOFFBND(MYREG,MYNBLK)=NBEL      
                  BAREA(NBEL)=DZ*DY
                  
                  KROCK(JEST,J,K)=KROCK(JEST+1,J,K)
                  
                  DEPTH(JEST,J,K)=0.5D0*( 
     &                 DOWN(3,NBLK)*(ZL+ZR)+
     &                 DOWN(2,NBLK)*(YL+YR) )+
     &                 DOWN(1,NBLK)*XREC(JEST+IOFF+1,NBLK)
                  
               ENDIF
 11            CONTINUE
            ENDDO
         ENDDO
      ENDDO

c      write(*,*) 'after x- nbel=',nbel,BAREA(nbel)

c====================================================== x + 
c scan the jk elements to find boundary elements on jk, x+ surfaces

      DO K=1,KDIM
         DO J=1,JDIM
            DO I=IDIM-1,1,-1
               JEST = 0 
               IF (KEYOUT(I,J,K).EQ.1.AND.KEYOUT(I+1,J,K).EQ.0) 
     &              JEST = I+1
               IF(JEST.EQ.0) GOTO 12

c     found bdary element (face x) at jestl/jestr,j,k
c     check if it fits volume specification

               XL = XREC(JEST+IOFF,NBLK)
               
               ZL = ZREC(K+KOFF,NBLK)
               ZR = ZREC(K+KOFF+1,NBLK)
               YL = YREC(J+JOFF,NBLK)
               YR = YREC(J+JOFF+1,NBLK)
               
               DY = FIND_AREA(YL,YR,VVOL(2),VVOL(5))
               DZ = FIND_AREA(ZL,ZR,VVOL(3),VVOL(6))
               
               IF(XL.GE.VVOL(1).AND.XL.LE.VVOL(4).
     &              AND.DY*DZ.GT.BDAREA_EPS) THEN
                  
c     register this element for the region associated with this volume
                  
                  NBEL = NBEL + 1
                  LOCBND(1,NBEL)=JEST
                  LOCBND(2,NBEL)=J
                  LOCBND(3,NBEL)=K
                  LOCBND(4,NBEL)=2 ! FACE X+
                  
                  LOFFBND(MYREG,MYNBLK)=NBEL
                  
                  BAREA(NBEL)=DZ*DY
                  
                  KROCK(JEST,J,K)=KROCK(JEST-1,J,K)
                  
                  DEPTH(JEST,J,K)=0.5D0*( 
     &                 DOWN(3,NBLK)*(ZL+ZR)+
     &                 DOWN(2,NBLK)*(YL+YR) )+
     &                 DOWN(1,NBLK)*XREC(JEST+IOFF,NBLK)
                  
               ENDIF
 12            CONTINUE
            ENDDO
         ENDDO
      ENDDO

c      write(*,*) 'after x+ nbel=',nbel,barea(nbel)

c ===================================================== y -
c scan the ik elements to find boundary elements on ik, y- surfaces

      DO K=1,KDIM
         DO I=1,IDIM
            DO J=2,JDIM

               JEST = 0 
               IF (KEYOUT(I,J,K).EQ.1.AND.KEYOUT(I,J-1,K).EQ.0) 
     &              JEST = J-1
               IF(JEST.EQ.0) GOTO 13

c     found bdary element (face x) at jest,j,k
c     check if it fits volume specification
               
               YR = YREC(JEST+JOFF+1,NBLK)
               
               ZL = ZREC(K+KOFF,NBLK)
               ZR = ZREC(K+KOFF+1,NBLK)
               XL = XREC(I+IOFF,NBLK)
               XR = XREC(I+IOFF+1,NBLK)
               
               DX = FIND_AREA(XL,XR,VVOL(1),VVOL(4))
               DZ = FIND_AREA(ZL,ZR,VVOL(3),VVOL(6))
               
               IF(YR.GE.VVOL(2).AND.YR.LE.VVOL(5).
     &              AND.DX*DZ.GT.BDAREA_EPS) THEN
               
c     register this element for the region associated with this volume
                  NBEL = NBEL + 1
                  LOCBND(1,NBEL)=I
                  LOCBND(2,NBEL)=JEST
                  LOCBND(3,NBEL)=K
                  LOCBND(4,NBEL)=3 ! FACE Y-
                  
                  LOFFBND(MYREG,MYNBLK)=NBEL
                  
                  BAREA(NBEL)=DZ*DX
                  
                  KROCK(I,JEST,K)=KROCK(I,JEST+1,K)
                  
                  DEPTH(I,JEST,K)=0.5D0*( 
     &                 DOWN(3,NBLK)*(ZL+ZR)+
     &                 DOWN(1,NBLK)*(XL+XR) )+
     &                 DOWN(2,NBLK)*YREC(JEST+JOFF+1,NBLK)           
                  
               ENDIF
 13            CONTINUE
               
            ENDDO
         ENDDO
      ENDDO
      
c      write(*,*) myprc,' after y- nbel=',nbel,barea(nbel)

c ===================================================== y +
c scan the ik elements to find boundary elements on ik, y+ surfaces

      DO K=1,KDIM
         DO I=1,IDIM
            DO J=JDIM-1,1,-1

               JEST = 0 
               IF (KEYOUT(I,J,K).EQ.1.AND.KEYOUT(I,J+1,K).EQ.0) 
     &              JEST = J+1
               IF(JEST.EQ.0) GOTO 14

c     found bdary element (face x) at jest,j,k
c     check if it fits volume specification

               YL = YREC(JEST+JOFF,NBLK)

               ZL = ZREC(K+KOFF,NBLK)
               ZR = ZREC(K+KOFF+1,NBLK)
               XL = XREC(I+IOFF,NBLK)
               XR = XREC(I+IOFF+1,NBLK)
               
               DX = FIND_AREA(XL,XR,VVOL(1),VVOL(4))
               DZ = FIND_AREA(ZL,ZR,VVOL(3),VVOL(6))

               IF(YL.GE.VVOL(2).AND.YL.LE.VVOL(5).
     &              AND.DX*DZ.GT.BDAREA_EPS) THEN
               
c     register this element for the region associated with this volume
                  NBEL = NBEL + 1
                  LOCBND(1,NBEL)=I
                  LOCBND(2,NBEL)=JEST
                  LOCBND(3,NBEL)=K
                  LOCBND(4,NBEL)=4 ! FACE Y+
                  
                  LOFFBND(MYREG,MYNBLK)=NBEL
                  
                  BAREA(NBEL)=DZ*DX
                  
                  KROCK(I,JEST,K)=KROCK(I,JEST-1,K)
                  
                  DEPTH(I,JEST,K)=0.5D0*( 
     &                 DOWN(3,NBLK)*(ZL+ZR)+
     &                 DOWN(1,NBLK)*(XL+XR) )+
     &                 DOWN(2,NBLK)*YREC(JEST+JOFF,NBLK)           

c                  if(myreg.eq.4) write(*,*) 'dep ',myreg,i,jest,k,
c     &                 depth(i,jest,k),(xl+xr)/2.0,
c     &                 i+ioff,xrec(i+ioff,nblk),xrec(i+ioff+1,nblk),
c     &                 xl,xr

               ENDIF
 14            CONTINUE
            ENDDO
         ENDDO
      ENDDO
      
c      write(*,*) myprc,' after y+ nbel=',nbel,barea(nbel)

c ===================================================== z -
c scan the ij elements to find boundary elements on ij, z- surfaces

      DO J=1,JDIM
         DO I=1,IDIM
            DO K=2,KDIM
               
               JEST = 0 
               IF (KEYOUT(I,J,K).EQ.1.AND.KEYOUT(I,J,K-1).EQ.0) 
     &              JEST = K-1
               IF(JEST.EQ.0) GOTO 15

               ZR = ZREC(JEST+KOFF+1,NBLK)
               
               YL = YREC(J+JOFF,NBLK)
               YR = YREC(J+JOFF+1,NBLK)
               XL = XREC(I+IOFF,NBLK)
               XR = XREC(I+IOFF+1,NBLK)

               DX = FIND_AREA(XL,XR,VVOL(1),VVOL(4))
               DY = FIND_AREA(YL,YR,VVOL(2),VVOL(5))
              
               IF(ZR.GE.VVOL(3).AND.ZR.LE.VVOL(6).
     &              AND.DX*DY.GT.BDAREA_EPS) THEN
                  
c     register this element for the region associated with this volume
                  NBEL = NBEL + 1
                  LOCBND(1,NBEL)=I
                  LOCBND(2,NBEL)=J
                  LOCBND(3,NBEL)=JEST
                  LOCBND(4,NBEL)=5 ! FACE Z-
                  
                  LOFFBND(MYREG,MYNBLK)=NBEL
                  
                  BAREA(NBEL)=DY*DX
                  
                  KROCK(I,J,JEST)=KROCK(I,J,JEST+1)
                  
                  DEPTH(I,J,JEST)=0.5D0*( 
     &                 DOWN(2,NBLK)*(YL+YR)+
     &                 DOWN(1,NBLK)*(XL+XR) )+
     &                 DOWN(3,NBLK)*ZREC(JEST+KOFF+1,NBLK)
                  
               ENDIF
 15            CONTINUE
            ENDDO
         ENDDO
      ENDDO
      
c      write(*,*) 'after z- nbel=',nbel

c ===================================================== z -
c scan the ij elements to find boundary elements on ij, z- surfaces

      DO J=1,JDIM
         DO I=1,IDIM
            DO K=KDIM-1,1,-1               
               
               JEST = 0 
               IF (KEYOUT(I,J,K).EQ.1.AND.KEYOUT(I,J,K+1).EQ.0) 
     &              JEST = K+1
               IF(JEST.EQ.0) GOTO 16
               
               ZL = ZREC(JEST+KOFF,NBLK)

               YL = YREC(J+JOFF,NBLK)
               YR = YREC(J+JOFF+1,NBLK)
               XL = XREC(I+IOFF,NBLK)
               XR = XREC(I+IOFF+1,NBLK)

               DX = FIND_AREA(XL,XR,VVOL(1),VVOL(4))
               DY = FIND_AREA(YL,YR,VVOL(2),VVOL(5))
         
               IF(ZL.GE.VVOL(3).AND.ZL.LE.VVOL(6).
     &              AND.DX*DY.GT.BDAREA_EPS)  THEN
                  
c     register this element for the region associated with this volume

                  NBEL = NBEL + 1
                  LOCBND(1,NBEL)=I
                  LOCBND(2,NBEL)=J
                  LOCBND(3,NBEL)=JEST
                  LOCBND(4,NBEL)=6 ! FACE Z+
                  
                  LOFFBND(MYREG,MYNBLK)=NBEL
                  
                  BAREA(NBEL)=DY*DX

                  KROCK(I,J,JEST)=KROCK(I,J,JEST-1)
                  
                  DEPTH(I,J,JEST)=0.5D0*( 
     &                 DOWN(2,NBLK)*(YL+YR)+
     &                 DOWN(1,NBLK)*(XL+XR) )+
     &                 DOWN(3,NBLK)*ZREC(JEST+KOFF,NBLK)
               ENDIF
 16            CONTINUE
            ENDDO
         ENDDO
      ENDDO

c      write(*,*) 'after z+ nbel=',nbel,bdarea_eps

      END


c ******************************************************
      REAL*4 FUNCTION FIND_AREA(A,B,AEXT,BEXT)
C ******************************************************
c finds common area (length of segment) of segments (a,b) and (aext,bext)
c returns area of this area and records it in a,b
c parameters: a,b (real*, input/output)
c             aext,bext (real*, input)
C ******************************************************
      IMPLICIT NONE
      REAL*4  A,B,AEXT,BEXT

      INTEGER ITEST
      REAL*4  ATEST,BTEST,VAL
c ---------------------------
      VAL = 0.0

      CALL FIND_SEGMENT(A,B,AEXT,BEXT,ITEST,ATEST,BTEST)

      IF(ITEST.EQ.1) THEN
         VAL=BTEST-ATEST
         A=ATEST
         B=BTEST
      ENDIF
      
      FIND_AREA = VAL

      END

c*************************************************************
      SUBROUTINE GETSOURCEINDEX(NDIR,I,J,K,IS,JS,KS,IV,JV,KV,
     &     IAMLEFT_OR_RIGHT)
c*************************************************************
c is,js,ks give index of a cell (center) adjacent to bdary cell i,j,k
c iv,jv,kv goive index of edge adjacent to bdary cell i,j,k
c iamleft_or_right is -1 for left (-) cells, and 1 for right (+) cells
c*************************************************************
      IMPLICIT NONE
      INTEGER NDIR,I,J,K,IS,JS,KS,IV,JV,KV,IAMLEFT_OR_RIGHT

      IS = I
      JS = J
      KS = K 
      IV = I
      JV=  J
      KV = K
      IF(NDIR.EQ.1) IS=I+1
      IF(NDIR.EQ.2) IS=I-1
      IF(NDIR.EQ.3) JS=J+1
      IF(NDIR.EQ.4) JS=J-1
      IF(NDIR.EQ.5) KS=K+1
      IF(NDIR.EQ.6) KS=K-1

      IF(NDIR.EQ.1) IV=I+1
      IF(NDIR.EQ.3) JV=J+1
      IF(NDIR.EQ.5) KV=K+1

      IAMLEFT_OR_RIGHT=0
      IF(NDIR.EQ.1.OR.NDIR.EQ.3.OR.NDIR.EQ.5) IAMLEFT_OR_RIGHT=-1
      IF(NDIR.EQ.2.OR.NDIR.EQ.4.OR.NDIR.EQ.6) IAMLEFT_OR_RIGHT= 1

      END

      
C*********************************************************************
      SUBROUTINE BDPROG (BLKBUF,LEN,NPROG,NERR)
C*********************************************************************
C  Reads and compiles user supplied code that can modify all bdary values 
c
C  NERR = Error number steped by 1 on error (input & output, INTEGER)
c  BLKBUF: buffer with text describing the program (input)
c  LEN: length of buffer describing the program (input)
c  NPROG: number of program associated with this bdary region (input)
c
C  Notes:
C  1) The following variables will automatically be made available to the
C     user code (as Real*8).  If used, the names must appear in an EXTERNAL
C     statement.
C     X, Y, Z , VAL          (block center)
c
c  2) The routine calls the interpreter routine CMPDRV() to compile
c     the user program. It prints information and processes arguments.
C*********************************************************************
      implicit none
$POWER      INCLUDE 'msjunk.h'
      INTEGER NPROG,NERR,LEN
      CHARACTER*1 BLKBUF(*)

      INCLUDE 'control.h'
      INCLUDE 'blkary.h'

c ==== space for variables and data of user supplied code
      REAL*8 XM,YM,ZM,DEPM,VALM
      COMMON /BD2/ XM,YM,ZM,DEPM,VALM
c ====

      INTEGER N, KE
c --------------------------------
      IF (LEN.EQ.0) RETURN

C  OUTPUT PROGRAM

      IF (LEVELC) THEN
         WRITE (NFOUT,*)
         TITU='BOUNDARY VALUE MODIFICATION PROGRAM (BDMOD)'
         CALL PRTTIT(TITU)
         WRITE (NFOUT,*)
         CALL TBLKOUT(BLKBUF,LEN)
      ENDIF

C  DEFINE EXTERNAL VARIABLES

      N = 0
      CALL EXTDEF(XM,1,'XB    ',0,0,0,N)
      CALL EXTDEF(YM,1,'YB    ',0,0,0,N)
      CALL EXTDEF(ZM,1,'ZB    ',0,0,0,N)
      CALL EXTDEF(DEPM,1,'DEPB    ',0,0,0,N)
      CALL EXTDEF(VALM,1,'VALB  ',0,0,0,N)
      IF (N.NE.0) THEN
         IF (LEVERR.LT.2) LEVERR=2
         IF (LEVELC) WRITE (NFOUT,1)
         GO TO 13
      ENDIF
    1 FORMAT (/' ERROR # 403; TOO MANY EXTERNAL VARIABLES')

C  COMPILE PROGRAM

      KE=0
      CALL CMPDRV(BLKBUF(1),LEN,NPROG,.FALSE.,KE)

      IF (KE.NE.0) GO TO 13

      RETURN

   13 NERR=NERR+1

      END


C*********************************************************************
      SUBROUTINE BDMOD (NPROG,XB,YB,ZB,DEPB,VALB)
C*********************************************************************
C  Executes user supplied code to modify values according to 
C  ib - bd. reg. number (input)
c  xb,yb,zb: position (parameters of BDMOD routine) (input)
c  valb : value (parameter of BDMOD routine) (input/output)
C*********************************************************************
      IMPLICIT NONE 
$POWER      INCLUDE 'msjunk.h'

      INTEGER NPROG
      REAL*8 XB,YB,ZB,DEPB,VALB
      INCLUDE 'control.h'
      INCLUDE 'layout.h'

c ==== space for variables and data of user supplied code
      REAL*8 XM,YM,ZM,DEPM,VALM
      COMMON /BD2/ XM,YM,ZM,DEPM,VALM
c ====
      INTEGER KE
c -------------------------------
      IF(NPROG.EQ.0) RETURN

      XM=XB
      YM=YB
      ZM=ZB
      DEPM=DEPB
      VALM=VALB
      KE =0 

      CALL EXCDRV(NPROG,KE)

      IF (KE.NE.0) THEN
         IF (LEVERR.LT.3) LEVERR=3
         IF (LEVELC) WRITE (NFOUT,4) 
         RETURN
      ENDIF

      VALB=VALM

 4    FORMAT(' ERROR # 418, USER PROGRAM ERROR IN BDMOD')
      END


c*********************************************************************
      SUBROUTINE MAKNAM(STROUT,LENOUT,STRIN,LENIN,
     &     NUMB,
     &     STREND,LENEND,NE)
c*********************************************************************
      IMPLICIT NONE
      INTEGER LENOUT,LENIN,LENEND,NE,NUMB
      CHARACTER*1 STROUT(*),STRIN(*),STREND(*)

      CHARACTER*5 STRNUMB(1)
      CHARACTER*1 STRNUMS(5)
      EQUIVALENCE (STRNUMS,STRNUMB)

      INTEGER I,LENNUM
C-------------------------------
      WRITE(STRNUMB,'(I1)')NUMB 

      LENNUM=0
      DO I=1,5
         IF(STRNUMS(I).EQ.' ')GOTO 1
         LENNUM=I
      ENDDO
 1    CONTINUE

c      WRITE(*,*) 'STRING=<',STRNUMB,'> ',LENNUM,(STRIN(I),I=1,LENIN)

      NE=0
      IF(LENIN+LENEND+LENNUM.GT.LENOUT) THEN
         NE=1
         RETURN
      ENDIF

      DO I=1,LENIN
         STROUT(I)=STRIN(I)
      ENDDO
      DO I=1,LENNUM
         STROUT(LENIN+I)=STRNUMB(I)
      ENDDO
      DO I=1,LENEND
         STROUT(LENIN+LENNUM+I)=STREND(I)
      ENDDO
      DO I = LENIN+LENNUM+LENEND+1,LENOUT
         STROUT(I)=' '
      ENDDO

      
c      WRITE(*,*) 'CONSTRUCTED STRING=[',
c     &     (STROUT(I),I=1,LENOUT),']'
      END


C*********************************************************************
      SUBROUTINE DOBDARY(KERR)
C*********************************************************************
c invokes user program depthmod to change depth on the boundary
C*********************************************************************
      IMPLICIT NONE
      INTEGER KERR
      EXTERNAL DOBDARYW
      INCLUDE 'blkary.h'

      INTEGER IBDPROP(2)        

      IBDPROP(1) = 1
      IBDPROP(2) = N_DEPTH
      
      CALL CALLWORK(DOBDARYW,IBDPROP)
      END


C*********************************************************************
      SUBROUTINE DOBDARYW(
     &     IDIM,JDIM,KDIM,LDIM,IL1,IL2,JL1V,JL2V,KL1,KL2,KEYOUT,NBLK,
     &     DEPTH)
C*********************************************************************
C  ROUTINE EVALUATES depth on the bdary using user defined program
C  DEPTH(I,J,K) = DEPTH OF BDARY SURFACE ELEMENT
C*********************************************************************
      implicit none
$POWER      INCLUDE 'msjunk.h'
      INCLUDE 'control.h'
      INCLUDE 'boundary.h'
      INCLUDE 'layout.h'


      INTEGER IDIM,JDIM,KDIM,LDIM,IL1,IL2,KL1,KL2,
     &     IOFF,JOFF,KOFF,NBLK
      INTEGER JL1V(KDIM),JL2V(KDIM),    KEYOUT(IDIM,JDIM,KDIM)
      REAL*8 DEPTH(IDIM,JDIM,KDIM)

      REAL*8 TE,PQ,DPQ,XB,YB,ZB
      INTEGER I,J,K,L,IW,MERR,IB,NDIR,NFOFF,NTYPE,KG,IG,JG

c common block elements for depthmod
      REAL*8 RNBLK,X,Y,Z,DEP
      integer npg,ke
      COMMON /DEPMP/ RNBLK,X,Y,Z,DEP,NPG,KE

c----------------------------
      CALL BLKOFF(NBLK,IOFF,JOFF,KOFF,MERR)

C  EXECUTE PROGRAM FOR WELL ELEMENT DEPTHS

      do 1 ib=1,nbnd_reg

         IF(NBLK.EQ.1.AND.IB.EQ.1) NFOFF=1
         IF(NBLK.GT.1.AND.IB.EQ.1) NFOFF=LOFFBND(NBND_REG,NBLK-1)+1
         IF(IB.NE.1) NFOFF=LOFFBND(IB-1,NBLK)+1
         
c     loop over all bdary elements in this region
         
c         write(*,*) 'BDPROP reg ',ib,' typ=',nbnd_type(ib),
c     &        ' els: ',nfoff,' .... ',loffbnd(ib,nblk),pq

         DO 2 L=NFOFF,LOFFBND(IB,NBLK)
            I = LOCBND(1,L)
            J = LOCBND(2,L)
            K = LOCBND(3,L)
            
            NDIR = LOCBND(4,L)

            KG=K+KOFF
            JG=J+JOFF
            IG=I+IOFF
            
            X=.5D0*(XREC(IG,NBLK)+XREC(IG+1,NBLK))               
            Y=.5D0*(YREC(JG,NBLK)+YREC(JG+1,NBLK))
            Z=.5D0*(ZREC(KG,NBLK)+ZREC(KG+1,NBLK))
            
            IF(NDIR.EQ.1) X=XREC(IG+1,NBLK)
            IF(NDIR.EQ.2) X=XREC(IG,NBLK)
            IF(NDIR.EQ.3) Y=YREC(JG+1,NBLK)
            IF(NDIR.EQ.4) Y=YREC(JG,NBLK)
            IF(NDIR.EQ.5) Z=ZREC(KG+1,NBLK)
            IF(NDIR.EQ.6) Z=ZREC(KG,NBLK)
            
            DEP=DEPth(I,J,K)
            RNBLK=nblk+1.D-6
            
            CALL EXCDRV(NPG,KE)
            
            IF (KE.NE.0) THEN
               IF (LEVERR.LT.3) LEVERR=3
               IF (LEVELC) WRITE (NFOUT,3)
               GO TO 13
 3             FORMAT(' ERROR # 418, USER PROGRAM ERROR IN DEPTHMOD')
            ENDIF

 2          DEPTH(I,J,K)=DEP
            
 1       CONTINUE
         RETURN
 13      KE = KE +1
         RETURN
         END

