// ---------------------------------------------------------
// M. Peszynska, 03/2002
//
// -----------------------------------------------------------------
// file: readdatc.c
// see readdatf.f for information
//-----------------------------------------------------------------

#include <stdio.h>
#include <string.h>
#include "cfsimple.h"

#define MAXFNAMELEN	$MXRECORD
#define MAXBLK   	$MXBLKS 

static _F_INTEGER _Myprc=0;  // processor number, set by vis_fname_set
static _F_INTEGER _Mblk=0;   // max number of blocks
static _F_INTEGER _Order=0;  // flag which determines order in file
// order=0 (default IPARS: ijk)
// order=1 (default other sim.: jki)


#define _readdat_file     _F_NAME_(READDAT_FILE,readdat_file)
_F_EXTERN_(void) _readdat_file( 
 const _F_INTEGER * const IDIM,
 const _F_INTEGER * const JDIM,
 const _F_INTEGER * const KDIM,
 const _F_INTEGER * const LDIM,
 const _F_INTEGER * const IL1,
 const _F_INTEGER * const IL2,
 const _F_INTEGER * const JLV1,
 const _F_INTEGER * const JLV2,
 const _F_INTEGER * const KL1,
 const _F_INTEGER * const KL2,
 const _F_INTEGER * const KEYOUT,
 const _F_INTEGER * const NBLK,
 _F_REAL_4 *data_arr );


#define myreadpar_err     _F_NAME_(READPAR_ERR,readpar_err)
_F_EXTERN_(void) myreadpar_err(_F_INTEGER *Kerr);


#define myread_fname_set    _F_NAME_(READ_FNAME_SET,read_fname_set)

// ---------------------------------------------------------------
static void trimblanks (char *source)
{
char *s;
s = strchr(source,' ');
if (s != NULL) *s='\0';
}

static char Filename [MAXFNAMELEN];
static int iffirst=1;
static int Readpar_error=0;

// ---------------------------------------------------------------
void myread_fname_set(
		    _F_INTEGER *myprc, 
		    _F_INTEGER *Mblk,
		    _F_INTEGER *Order,
		    _F_INTEGER *Error,
		    char *rootname, _F_INTEGER rootnamelen)
{
  char *p;size_t rn=(size_t)rootnamelen;
  
  if(rn>MAXFNAMELEN-2)rn=MAXFNAMELEN-2;
  Filename[0]='\0';p=strncat(Filename, rootname, rn);
  Filename[rn+1]='\0';
  trimblanks(Filename);

  // printf("FILE: <%s>\n",Filename);

  _Myprc=*myprc;   // number of this processor
  _Mblk=*Mblk;     // max number of faultblocks
  _Order = *Order; // flag to decide which order of file is used
  
  // reset error for this new file
  Readpar_error=*Error; 

}

#define myblkdim   _F_NAME_(MYBLKDIM,myblkdim)
_F_EXTERN_(void) myblkdim();
#define myblkoff  _F_NAME_(MYBLKOFF,myblkoff)
_F_EXTERN_(void) myblkoff();

typedef struct cell { int index_f,index,i,j,k; float val;} CELL;
CELL * Cells; 

// ----------------------------------------------------------------
// input REAL*4 array assuming no fourth (L) dimension

void _readdat_file 
(		    
 // first 12 IPARS parameters passed to callwork
 
 const _F_INTEGER * const IDIM,
 const _F_INTEGER * const JDIM,
 const _F_INTEGER * const KDIM,
 const _F_INTEGER * const LDIM,
 const _F_INTEGER * const IL1,
 const _F_INTEGER * const IL2,
 const _F_INTEGER * const JLV1,
 const _F_INTEGER * const JLV2,
 const _F_INTEGER * const KL1,
 const _F_INTEGER * const KL2,
 const _F_INTEGER * const KEYOUT,
 const _F_INTEGER * const NBLK,
 
 // variable to be read: REAL*4 
 
 _F_REAL_4 *data_arr )

{
  const int maxblk = (*IDIM)*(*JDIM)*(*KDIM);
  const int   kinc = (*IDIM) * (*JDIM) ;
  const int   jinc = (*IDIM) ;
  const int   kbeg = (*KL1) ;
  const int   kend = (*KL2) ;
  const int   ibeg =  *IL1 ;
  const int   iend =  *IL2 ;
  const int   nblk = *NBLK-1;
  int   jbeg,jend,kinc_f,jinc_f;
  
  int k,j,i,ir,iblk=0,newline=0;
  int ifile=0;

  FILE *fp;
  int f_howmany=0,p_howmany=0;
  float x=0;
  _F_INTEGER NXG,NYG,NZG,NERROR;
  _F_INTEGER ioff,joff,koff;

  // =============================================  
  
  myblkdim(NBLK,&NXG,&NYG,&NZG,&NERROR);
  myblkoff(NBLK,&ioff,&joff,&koff,&NERROR);
  
  //printf("\nBlock dimensions: %d %d %d offsets: %d %d %d\n",
  //NXG,NYG,NZG,ioff,joff,koff);
  
  if (_Order==1) {
  // assume JKI ordering (J fastest, K slow, I slowest)
    kinc_f = NYG * NZG;
    jinc_f = NYG;
  } else if (_Order==0) {
    // assume IJK ordering (I fastest, J slow, K slowest)
    kinc_f = NXG * NYG;
    jinc_f = NXG;
  }

  // =============================================

  fp = fopen(Filename,"r");
  if(fp==NULL) { Readpar_error++;return;}
  do {
    i=fscanf(fp,"%g",&x);
    // printf("\n Read: x=%g i=%d\n",x,i);
    if(i>0)f_howmany++;
  } while (i>0);
  fclose(fp);
  
  /*
    printf ("\nFile: <%s> Proc: %d found %d data \n",
	  Filename,_Myprc,f_howmany);  
  */

  if( NXG*NYG*NZG > f_howmany) {
    printf("\nNot enough data in input file: %d %d %d\n",
	   NXG, NYG, NZG );
    { Readpar_error++;return;}
  }

  // =========================== count cells on this processor
  // assume box

  /*
    printf("\nProcess block: IPARS i=%d..%d j=%d..%d k=%d..%d\n",
	 ibeg,iend,jbeg,jend,kbeg,kend);
  */

  for(k=kbeg;k<=kend;k++) {
    const int jbeg =  ( JLV1[k-1] );
    const int jend =  ( JLV2[k-1] );	   	    
    
    for ( j = jbeg ; j <= jend ;j++ ) {
      for ( i= ibeg; i <= iend ; i++) {	      
	
#define gindex(i,j,k)   ( ( (k)-1 )*kinc+ ( (j)-1)*jinc + ( (i) -1) )	
	const int index = gindex(i,j,k);	    
#undef gindex 

	if ( KEYOUT[index] == 1 ) p_howmany++;
	} // end i
      } // end j
    } // end k

  // ------------------------------------  allocate memory on this processor
  // printf("\nPROC=%d found %d cells\n",_Myprc,p_howmany);

  Cells = (CELL *) malloc(p_howmany*sizeof(CELL));
  if (Cells == NULL) { Readpar_error++;return;}
  
  // ----------------------------------- collect indices of two types:
  // --------------------- IPARS index : finds index in memory
  // --------------------- and file_index : determines index in file
  
  // iblk loops over all cells on this processor, index_f
  // is a global index (offset) in the file
  
  iblk=0;
  
  for(k=kbeg;k<=kend;k++) {
    const int jbeg =  ( JLV1[k-1] );
    const int jend =  ( JLV2[k-1] );	   	    
    
    for ( j = jbeg ; j <= jend ;j++ ) {
      for ( i= ibeg; i <= iend ; i++) {	      
	
#define gindex(i,j,k)   ( ( (k)-1 )*kinc+ ( (j)-1)*jinc + ( (i) -1) )	
	const int index = gindex(i,j,k);	    
#undef gindex 
	  
	if ( KEYOUT[index] == 1 ) { 
	  
	  const _F_REAL_4 *ptr=data_arr; 
	  const _F_REAL_4 scalval=ptr[index];	      
	  int i_f,j_f,k_f,indexf;
	  
	  if (_Order==1) {
	    i_f=j+joff; // global IPARS index 1..Nx
	    j_f=k+koff; //                    1..Ny
	    k_f=i+ioff; //                    1..Nz
	  } else {
	    i_f=i+ioff; //                    1..Nx
	    j_f=j+joff; // global IPARS index 1..Ny
	    k_f=k+koff; //                    1..Nz
	  }
	  indexf = 
	    ( ( (k_f)-1 )*kinc_f+ ( (j_f)-1)*jinc_f + ( (i_f) ) );
	  
	  /*
	    printf(
	    "\nFile index (%d,%d,%d): %d 
	    IPARS coord (local): %d %d %d index(global)=%d
	    cell index=%d \n",
	    i_f,j_f,k_f,index_f,i+ioff,j+joff,k+koff,index,iblk);
	  */
	  
	  // record the cell 
	  Cells [iblk].index_f=indexf;
	  Cells [iblk].index=index;
	  Cells [iblk].i=i; Cells [iblk].j=j; Cells [iblk].k=k;
	  
	  // to record the original values
	  // printf("%g\n",scalval);
	  
	  iblk++; 
	} // end if KEYOUT
      } // end i
    } // end j
  } // end k
  
  
  // ========================================================
  // read the file and record values at appropriate locations

  ifile=0; 
  fp = fopen(Filename,"r");
  if(fp==NULL) { Readpar_error++;return;}
  
  do {
    ir=fscanf(fp,"%g",&x);
    if(ir>0){
      int ic;
      int found=0;
      
      for(ic=0;ic<p_howmany;ic++) 
	if(Cells[ic].index_f==ifile+1) {
	  Cells[ic].val=x;
	  found=1;
	  break;
	} 	  
      /*
	if(found)
	printf("PR=%d Found cell=%d index=%d ifile=%d (%d,%d,%d) VAL=%g\n",
	_Myprc,ic+1,Cells[ic].index,Cells[ic].index_f,
	Cells[ic].i,Cells[ic].j,Cells[ic].k,x);
	else
	printf("PR=%d skip VAL=%g\n",_Myprc,x);
      */
    }
    ifile++;
  } while (ir>0);
  
  fclose(fp);
  
  // ==================================================== copy values
  // from buffer to the grid
  //
  
  for(iblk=0;iblk<p_howmany;iblk++) {
    const int i=Cells[iblk].i;
    const int j=Cells[iblk].j;
    const int k=Cells[iblk].k;
    const int index=Cells[iblk].index;
    
    if ( KEYOUT[index] == 1 ) {	      
      const _F_REAL_4 *ptr=data_arr; 
      const _F_REAL_4 scalval=ptr[index];	      
      
      // printf("Proc=%d %g =?= %g\n",_Myprc,scalval,Cells[iblk].val);

      data_arr [index]=Cells[iblk].val;

    } else 
      { Readpar_error++;return;}

  } // if iblk
  
  free(Cells);
}


void myreadpar_err( _F_INTEGER * kerr){

  *kerr=Readpar_error;
  
}
